[{"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\index.js":"1","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\serviceWorker.js":"2","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\App.js":"3","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\Issuer.js":"4","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\Verifier.js":"5","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\Dashboard.js":"6","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\SignUp.js":"7","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\utils\\getWeb3.js":"8"},{"size":958,"mtime":1620345518000,"results":"9","hashOfConfig":"10"},{"size":4948,"mtime":1620345518000,"results":"11","hashOfConfig":"10"},{"size":8684,"mtime":1622549582251,"results":"12","hashOfConfig":"10"},{"size":10584,"mtime":1620345518000,"results":"13","hashOfConfig":"10"},{"size":16502,"mtime":1620345518000,"results":"14","hashOfConfig":"10"},{"size":26865,"mtime":1622384303786,"results":"15","hashOfConfig":"10"},{"size":13551,"mtime":1620345518000,"results":"16","hashOfConfig":"10"},{"size":1137,"mtime":1622549027711,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"s0bdck",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\index.js",[],["36","37"],"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\serviceWorker.js",[],"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\App.js",[],"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\Issuer.js",[],"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\Verifier.js",[],"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\Dashboard.js",["38"],"import React, { Component } from 'react'\nimport uuid from 'uuid'\n// import { Redirect } from 'react-router-dom'\nimport TimeAgo from 'react-timeago'\nimport IPFS from 'ipfs'\n// import {Cookies} from 'react-cookie';\nimport './dashboard.css';\nimport SSI from \"../contracts/SSI.json\";\nimport VerifierSSI from \"../contracts/VerifierSSI.json\";\nimport getWeb3 from \"../utils/getWeb3\";\n\nconst nacl = require(\"tweetnacl\");\nnacl.util = require(\"tweetnacl-util\");\nconst arrayBufferToHex = require(\"array-buffer-to-hex\");\n\nconst RenderRequests = (props) => {\n    return (\n            props.requests.map((req,i) => (\n                <tr key={i}>\n                    <td className={req.removed ? 'verifier-strike-removed' : ''} ><h6>{req.company}</h6></td>\n                    <td className={req.removed ? 'verifier-strike-removed' : ''} ><h6>{req.docs}</h6></td>\n                    <td className={req.removed ? 'verifier-strike-removed' : ''} ><h6><TimeAgo date={req.req_at}/></h6></td>\n                    <td style={{float:'right'}}>\n                        {\n                            (!req.review) ? \n                                (!req.review && req.status) ? \n                                    <button className=\"btn btn-info\">Pending</button> : \n                                    (!req.removed && <button onClick={() => props.handleClickSend(req, i)} className=\"btn btn-info\">send document</button>)\n                            :\n                            (req.review && req.status) ? \n                                <button className=\"btn btn-success\">document accepted</button>\n                                : <button  className=\"btn btn-danger \">document rejected</button>\n                        }\n                        {req.removed ? <div className=\"dash-remove-btn\">REMOVED</div>\n                        :\n                        <div onClick={() => props.handleRemove(req)} className=\"dash-remove-btn\">REMOVE</div>\n                        }\n                        \n                    </td>\n                </tr>\n            ))\n    )\n}\n\nclass Dashboard extends Component {\n    state = {\n        user: {},\n        demo: null,\n        imageState:null,\n        image:null,\n        did:null,\n        title:null,\n        web3:null,\n        accounts:null,\n        SSI_contract:null,\n        VerifierSSI_contract:null,\n        uploadDoc:true,\n        request_index:null,\n        requests:[],\n        sending_details: null,\n        sending_document:null,\n        send_status:false,\n        sendingDocId:null,\n        ipfsHash:null,\n        ipfsMessage: null,\n        refresh:false,\n        docs: [],\n        loading:true,\n        sending_btn:false,\n    }\n\n    handleRemove = async (doc) => {\n        console.log('test')\n        console.log(doc)\n        const { accounts, VerifierSSI_contract } = this.state;\n        await VerifierSSI_contract.methods.removeRequest(doc.request_id).send({ from: accounts[0] });\n\n\n// re render the requests\n    window.location.href = 'http://localhost:3000/dashboard';\n    }\n    // add new document \n    handleForm = async(e) => {\n        e.preventDefault();\n        const { accounts, SSI_contract } = this.state;\n        console.log('clicked');\n        let docArray = JSON.parse(localStorage.getItem('documents'));\n        if(docArray === null) {\n            docArray = {}\n        }\n        // every document has unique did\n        let did = uuid.v1().replace(/-/g, \"\");\n        \n        const docId = await SSI_contract.methods.getDocCount().call();\n        // store the document locally\n        docArray[this.state.title] = {\n            doc_id: docId,\n            user_did: this.state.user.did,\n            did: did,\n            title:this.state.title,\n            image:this.state.image,\n            name:this.state.user.name,\n            address:this.state.user.address,\n            email:this.state.user.email,\n            phone:this.state.user.phone,\n            review:false,\n            status:0,\n            issuer_did:null,\n            signature:null,\n            created_at:new Date(),\n            verified_at:null,\n        }\n        // create an IPFS\n        const node = new IPFS();\n        node.once(\"ready\", () => {\n          // convert  data to a Buffer and add it to IPFS\n          node.add(\n            IPFS.Buffer.from(JSON.stringify(docArray[this.state.title])),\n            async (err, files) => {\n              if (err) return console.error(err);\n\n              // 'hash', known as CID, is a string uniquely addressing the data\n              // and can be used to get it again. 'files' is an array because\n              // 'add' supports multiple additions, but we only added one entry\n              console.log(files[0].hash);\n              this.setState({ ipfsHash: files[0].hash });\n\n\n              // write document did to the blockchain\n              await SSI_contract.methods\n                .addDocument(this.state.user.did, did, files[0].hash)\n                .send({ from: accounts[0] });\n            }\n          );\n        });\n        \n        localStorage.setItem('documents', JSON.stringify(docArray));\n        console.log(docArray)\n        console.log('test')\n        this.setState({ uploadDoc: true })\n        \n    }\n    handleTitle = (e) => {\n        this.setState({title:e.target.value});\n    }\n    handleFormPopUp = () => {\n        this.setState({ uploadDoc: false })\n    }\n    handleFile = (e) => {\n        let reader = new FileReader();\n        console.log(e.target.files);\n        reader.onload = () => {\n            this.setState({\n                imageState: true,\n                image: reader.result\n            });\n        }\n        reader.readAsDataURL(e.target.files[0])\n    }\n    handleClickSend = (req,i) => {\n        this.setState({ sending_details:req,send_status:true})\n    }\n    handleCloseSend = () => {\n        this.setState({ send_status: false })\n    }\n    handleChangeSend = (e) => {\n        if(e.target.value == 0){\n            this.setState({sending_btn:false})\n        } else{\n            this.setState({sending_btn:true, sending_document: e.target.value })\n        }\n    }\n    handleLogout = () => {\n        document.cookie = `did = ; expires= ${new Date()}`;\n        window.location.href = \"http://localhost:3000/\";\n\n    }\n    handleDocSend = async() => {\n        // handleDocSend will send the document to the vierifier\n        // current component is for calling this.setstate inside the callback function\n\n        //  we need to improve this section since we are duplicating the document on the ipfs\n        // for different verifier since the document is same but the ipfs address is different\n        // or we can leave as it is because if the same address is send then the address may be leak..\n        \n        // enable sending doc btn\n        setTimeout(() => {\n            this.setState({ sending_btn: true, send_status: false })\n        }, 2000);\n        const { accounts, VerifierSSI_contract } = this.state;\n        let storage = JSON.parse(localStorage.getItem('documents'));\n        let sending_document = this.state.sending_document;\n        let sending_details = this.state.sending_details;\n        let storage_details = storage[sending_document];\n        // console.log(sending_details)\n        // console.log(storage_details)\n        const node = new IPFS()\n        // let ipfsObj = storage[sending_document];\n        let ipfsObj = {};\n        ipfsObj.req_id = sending_details.request_id;\n        ipfsObj.user_did = sending_details.u_did;\n        ipfsObj.doc_did = storage_details.did;\n        ipfsObj.title = storage_details.title;\n        ipfsObj.image = storage_details.image;\n        ipfsObj.name = storage_details.name;\n        ipfsObj.email = storage_details.email;\n        ipfsObj.phone = storage_details.phone;\n        ipfsObj.review = storage_details.review;\n        ipfsObj.status = storage_details.status;\n        ipfsObj.issuer_did = storage_details.issuer_did;\n        ipfsObj.signature = storage_details.signature;\n        ipfsObj.created_at = storage_details.created_at;\n        ipfsObj.verified_at = storage_details.verified_at;\n        // once the node is ready\n        console.log(ipfsObj)\n        node.once('ready', () => {\n            // convert  data to a Buffer and add it to IPFS\n            node.add(IPFS.Buffer.from(JSON.stringify(ipfsObj)), async(err, files) => {\n                if (err) return console.error(err)\n\n                // 'hash', known as CID, is a string uniquely addressing the data\n                // and can be used to get it again. 'files' is an array because\n                // 'add' supports multiple additions, but we only added one entry\n                console.log(files[0].hash)\n                console.log(this.state.sending_details.V_publicKey)\n                this.setState({ ipfsHash: files[0].hash })\n                // encrypt the ipfs address using public key of verifier\n                // Encrypting the message for Verifier.\n                // verifier public key\n\n                // user is sending the message to the verifier \n                // reading Bob key pair from secret key\n                const user_privateKey = Buffer.from(this.state.user.privateKey, \"hex\");\n                // const user_publicKey = Buffer.from(this.state.user.publicKey, \"hex\");\n                const verifier_publicKey = Buffer.from(sending_details.V_publicKey, \"hex\");\n                // generating one time nonce for encryption\n                const nonce = nacl.randomBytes(24)\n                // message for Alice\n                let msg = files[0].hash;\n                // Bob encrypts message for Alice\n                const box = nacl.box(\n                  nacl.util.decodeUTF8(msg),\n                  nonce,\n                  verifier_publicKey,\n                  user_privateKey\n                );\n                // somehow send this message to Alice\n                const message = { box, nonce } \n                console.log(message)\n                let boxHex = arrayBufferToHex(message.box);\n                let nonceHex = arrayBufferToHex(message.nonce);\n                let messageHex = {boxHex,nonceHex,user_publicKey:this.state.user.publicKey};\n                this.setState({ipfsMessage:messageHex});\n                console.log(messageHex)\n                \n\n\n\n                await VerifierSSI_contract.methods\n                  .acceptedByUser(\n                    this.state.sending_details.request_id,\n                    JSON.stringify(messageHex)\n                  )\n                  .send({ from: accounts[0] });\n                // window.location.reload(false);\n            })\n        });\n\n\n    } \n    componentDidMount = async () => {\n        let cookie = document.cookie;\n        let cookieArr = cookie.split('; ');\n        let value = [];\n        cookieArr.forEach(arr => {\n            let content = arr.split('=');\n            value[content[0]] = content[1];\n            \n        });\n\n        this.setState({\n            user: {\n                name: value[\"name\"],\n                email: value[\"email\"],\n                phone: value[\"phone\"],\n                address: value[\"address\"],\n                did: value[\"did\"],\n                privateKey: value[\"privateKey\"],\n                publicKey: value[\"publicKey\"],\n            }\n        });\n        if(value['name']){\n            let ran = value['name'].split(' ');\n            this.setState({demo:ran[0]});\n        }\n\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork_SSI = SSI.networks[networkId];\n            const instance_SSI = new web3.eth.Contract(\n                SSI.abi,\n                deployedNetwork_SSI && deployedNetwork_SSI.address,\n                );\n            const deployedNetwork_VerifierSSI = VerifierSSI.networks[networkId];\n            const instance_VerifierSSI = new web3.eth.Contract(\n                VerifierSSI.abi,\n                deployedNetwork_VerifierSSI && deployedNetwork_VerifierSSI.address,\n            );\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({ web3, accounts, SSI_contract: instance_SSI,VerifierSSI_contract:instance_VerifierSSI });\n            \n            // latest Requests\n            const VerifierSSI_contract = this.state.VerifierSSI_contract;\n            // await VerifierSSI_contract.methods.evaluateRequest(this.state.user.did).send({ from: accounts[0] });\n            let reqIndex = await VerifierSSI_contract.methods.showRequest(this.state.user.did).call();\n            console.log(reqIndex)\n            // if number is greater than 101020304050607080 (after this 09....) then it is \n            // converted to javascript and we could not handle this and gets error (by receiving the other document either not exist or of theres)\n            let show = [];\n            let request_details = [];\n            if (reqIndex > 1) {\n                // we have found documents\n                while (reqIndex >= 100) {\n                    let rem = reqIndex % 100;\n                    show.push(rem);\n                    reqIndex = Math.floor(reqIndex / 100);\n                }\n            }\n            if (show){\n                show.forEach( async id => {\n                    // console.log(await VerifierSSI_contract.methods.getIndividualRequest(id).call());\n                    request_details[0] = (await VerifierSSI_contract.methods.getIndividualRequest(id).call());\n                    request_details[0].request_id = id;\n                    let comp_and_doc = request_details[0].comp_and_doc;\n                    request_details[0].docs = comp_and_doc.split(';')[0];\n                    request_details[0].company = comp_and_doc.split(';')[1];\n                    this.setState({requests:[...this.state.requests,request_details[0]]})\n                });\n                // console.log(request_details['request'])\n            }\n\n            // reading all the users documents from blockchian\n            localStorage.removeItem('documents');\n            let docArray = {}\n            const SSI_contract = this.state.SSI_contract;\n            // await SSI_contract.methods.evaluateRequest(this.state.user.did).send({ from: accounts[0] });\n            let docsIndex = await SSI_contract.methods.showAllDocs(this.state.user.did).call();\n            let allDocs = [];\n            let docs = [];\n            if (docsIndex > 1){\n                // we have found documents\n                while(docsIndex >= 100) {\n                    let rem = docsIndex % 100;\n                    allDocs.push(rem);\n                    docsIndex = Math.floor(docsIndex / 100);\n                }\n            }\n            if(allDocs) {\n                const node = new IPFS()\n                node.once('ready', () => {\n                    allDocs.forEach( async id => {\n                        docs[0] = (await SSI_contract.methods.getDocument(id).call());\n\n                        // read the ipfs\n                        node.cat(docs[0].ipfs, (err, data) => {\n                            if (err) return console.error(err);\n                            // convert Buffer back to string\n                            // let storage = {};\n                            // // console.log(JSON.parse(data));\n                            // storage = JSON.parse(localStorage.getItem(\"documents\"));\n                            // if (!storage) {\n                            //     storage = {};\n                            // }\n                            docArray[JSON.parse(data).title] = JSON.parse(data);\n\n                            // console.log(JSON.parse(localStorage.getItem('ipfsDetails')))\n                        });\n                        docs[0].doc_id = id;\n                        this.setState({ docs: [...this.state.docs, docs[0]] })\n                    })\n                });\n                setTimeout(() => {\n                    localStorage.setItem(\"documents\", JSON.stringify(docArray));\n                    this.setState({ loading: false })\n                }, 1000);\n            }\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n    }\n\n    renderOptions = () => {\n        let storage = JSON.parse(localStorage.getItem('documents'));\n        if (storage && this.state.uploadDoc) {\n            return Object.entries(storage).map((pair, i) => {\n                return (\n                    <option key={i} value={pair[0]}>\n                        {pair[0]}\n                    </option>\n                )\n            })\n        }\n\n\n    }\n    renderDocuments = () => {\n        let storage = JSON.parse(localStorage.getItem('documents'));\n        if(storage && this.state.uploadDoc){\n            return Object.entries(storage).map((pair,i) => {\n                return (\n                    <tr key={i}>\n                        <td><h5>{pair[0]}</h5></td>\n                        <td />\n                        <td>\n                            <button className={pair[1].status ? 'btn btn-success float-right' : 'btn btn-danger float-right'} >{} {(!pair[1].review) ? 'UNVERIFIED' : (pair[1].review && pair[1].status) ? 'Verified' : 'Rejected'}</button>\n                            <button className=\"btn btn-secondary float-right mr-2\" data-toggle=\"modal\" data-target={\"#exampleModal\" + i}>PREVIEW</button>\n                        <div className=\"modal fade\" id={\"exampleModal\"+i} tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div className=\"modal-dialog\" role=\"document\" style={{ maxWidth: '700px' }}>\n                                <div className=\"modal-content\">\n                                    <div className=\"modal-header\">\n                                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">{pair[1].title}</h5>\n                                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                            <span aria-hidden=\"true\">×</span>\n                                        </button>\n                                    </div>\n                                    <div className=\"modal-body\">\n                                        <img className=\"img-responsive\" height=\"600px\" width=\"400px\" src={pair[1].image} alt=\"\"/>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        </td>\n                    </tr>\n                )\n            })\n        }\n\n    }\n    render() {\n        let cookie = document.cookie;\n        let cookieArr = cookie.split('; ');\n        let value = [];\n        cookieArr.forEach(arr => {\n            let content = arr.split('=');\n            value[content[0]] = content[1];\n        });\n        if (!value['did']) {\n            window.location.href = \"http://localhost:3000/\";\n        }\n        return (\n                <div>\n                <div className=\"dash-container\">\n                <div className=\"dash-nav\">\n                    <div>\n                        <h1 className=\"dash-title\">Self Sovereign Identity</h1>\n                    </div>\n                    <div>\n                        <button onClick={this.handleLogout} className=\"dash-logout-btn\">Logout</button>\n                    </div>\n                </div>\n                    <div className=\"dash-profile-container\">\n                        <div className=\"profile-img\"><div className=\"the-image\" /></div>\n                        <div className=\"\">\n                            <table className=\"table\">\n                                <tbody className=\"demo-user\">\n                                    <tr>\n                                        <td><h5>Name:</h5></td>\n                                        <td><p>{this.state.user.name}</p></td>\n                                    </tr>\n                                    <tr>\n                                        <td><h5>Address:</h5></td>\n                                        <td><h6>{this.state.user.address}</h6></td>\n                                    </tr>\n                                    <tr>\n                                        <td><h5>Email:</h5></td>\n                                        <td><h6 style={{textTransform:'lowercase'}}>{this.state.user.email}</h6></td>\n                                    </tr>\n                                    <tr>\n                                        <td><h5>Phone:</h5></td>\n                                        <td><h6>{this.state.user.phone}</h6></td>\n                                    </tr>\n                                    <tr>\n                                        <td><h5>DID:</h5></td>\n                                        <td><h6>{this.state.user.did}</h6></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    {!this.state.send_status && \n                    <div className=\"dash-content-container\">\n                    <div className=\"content-table\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th><h1>Documents</h1></th>\n                                    <th />\n                                        <th><button className=\"dash-add-doc-btn float-right\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={this.handleFormPopUp}><i className=\"fa fa-plus\" style={{ marginRight: '5px' }} />Add New</button></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n\n                                {!this.state.loading &&  this.renderDocuments() }\n                                                        \n                            </tbody>\n                        </table>\n                        <div className=\"modal fade\" id=\"exampleModal\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div className=\"modal-dialog\" role=\"document\">\n                                <div className=\"modal-content\">\n                                    <div className=\"modal-header\">\n                                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Add New Document</h5>\n                                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                            <span aria-hidden=\"true\">×</span>\n                                        </button>\n                                    </div>\n                                    <div className=\"modal-body\">\n                                        <form onSubmit={this.handleForm} encType=\"multipart/form-data\">\n                                        <label htmlFor=\"title\">Document Title</label>\n                                        <input type=\"text\" name=\"title\" onChange={this.handleTitle} className=\"form-control\"/>\n                                            <label htmlFor=\"document\">Select Document File</label>\n                                            <input type=\"file\" name=\"file\" onChange={this.handleFile} className=\"form-control\"/>\n                                        <div className=\"modal-footer\">\n                                                <button type=\"submit\" onClick={this.handleForm} className=\"btn btn-primary\" data-dismiss=\"modal\">Add Document</button>\n                                        </div>\n                                            {this.state.image && <img src={this.state.image} alt=\"\"/> }\n                                    </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                        <div className=\"share-credentials\">\n                            <div className=\"dispflex\">\n                                <div className=\"share-title\"><h1>Recent Requests</h1></div>\n                            </div>\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th><h5>Company</h5></th>\n                                        <th><h5>Requested Documents</h5></th>\n                                        <th><h5>Requested At</h5></th>\n                                        <th />\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <RenderRequests requests={this.state.requests} handleRemove={this.handleRemove} handleClickSend = {this.handleClickSend} />\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    }\n                    {\n                        this.state.send_status && \n                        <div className=\"dash-main-request-container\">\n                            <div className=\"requeted-container\">\n                            <div onClick={this.handleCloseSend} class=\"open-close-button open\" style={{marginTop:'10px'}}></div>\n                            <div className=\"requested-content\">\n                            <p>Company: {this.state.sending_details.company}</p>\n                            <p>Requested For: {this.state.sending_details.docs}</p>\n                            <p>Requested At: <TimeAgo date={this.state.sending_details.req_at} /></p>\n                            <p>Select Your Document to Send:</p>\n                            <select className=\"dash-request-select\" onChange={this.handleChangeSend} name=\"\" id=\"\">\n                            <option value={0}>select</option>\n                                {this.renderOptions()}\n                            </select>\n                                <button className={`dash-request-btn ${!this.state.sending_btn && 'form-btn-disabled'}`} onClick={this.handleDocSend}>Send Document</button>\n                            </div>\n                        </div>\n                        </div>\n                    }\n                    </div>\n                </div>\n\n        )\n    }\n}\n\nexport default Dashboard;\n\n","C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\components\\SignUp.js",[],"C:\\Users\\dd\\Desktop\\Project SSI\\Major Project\\client\\src\\utils\\getWeb3.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":167,"column":27,"nodeType":"45","messageId":"46","endLine":167,"endColumn":29},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]