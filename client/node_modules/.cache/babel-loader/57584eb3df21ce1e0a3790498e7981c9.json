{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar UnixFs = require('ipfs-unixfs');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashes');\n\nvar _require2 = require('./constants'),\n    MFS_ROOT_KEY = _require2.MFS_ROOT_KEY;\n\nvar loadMfsRoot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var cid, buf, node;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return context.repo.datastore.open();\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return context.repo.datastore.get(MFS_ROOT_KEY);\n\n          case 5:\n            buf = _context.sent;\n            cid = new CID(buf);\n            _context.next = 20;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {\n              _context.next = 13;\n              break;\n            }\n\n            throw _context.t0;\n\n          case 13:\n            log('Creating new MFS root');\n            node = DAGNode.create(new UnixFs('directory').marshal());\n            _context.next = 17;\n            return context.ipld.put(node, mc.DAG_PB, {\n              cidVersion: 0,\n              hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n\n            });\n\n          case 17:\n            cid = _context.sent;\n            _context.next = 20;\n            return context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);\n\n          case 20:\n            log(\"Loaded MFS root /ipfs/\".concat(cid));\n            return _context.abrupt(\"return\", cid);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n\n  return function loadMfsRoot(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadMfsRoot;","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs-mfs/src/core/utils/with-mfs-root.js"],"names":["CID","require","UnixFs","DAGNode","log","mc","mh","MFS_ROOT_KEY","loadMfsRoot","context","repo","datastore","open","get","buf","cid","code","node","create","marshal","ipld","put","DAG_PB","cidVersion","hashAlg","names","buffer","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,eAEIA,OAAO,CAAC,aAAD,CAFX;AAAA,IACEE,OADF,YACEA,OADF;;AAGA,IAAMC,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAMK,EAAE,GAAGL,OAAO,CAAC,aAAD,CAAlB;;AAEA,gBAEIA,OAAO,CAAC,aAAD,CAFX;AAAA,IACEM,YADF,aACEA,YADF;;AAIA,IAAMC,WAAW;AAAA,sEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEZA,OAAO,CAACC,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,EAFY;;AAAA;AAAA;AAAA;AAAA,mBAQEH,OAAO,CAACC,IAAR,CAAaC,SAAb,CAAuBE,GAAvB,CAA2BN,YAA3B,CARF;;AAAA;AAQVO,YAAAA,GARU;AAUhBC,YAAAA,GAAG,GAAG,IAAIf,GAAJ,CAAQc,GAAR,CAAN;AAVgB;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAYZ,YAAIE,IAAJ,KAAa,eAZD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgBhBZ,YAAAA,GAAG,CAAC,uBAAD,CAAH;AACMa,YAAAA,IAjBU,GAiBHd,OAAO,CAACe,MAAR,CAAe,IAAIhB,MAAJ,CAAW,WAAX,EAAwBiB,OAAxB,EAAf,CAjBG;AAAA;AAAA,mBAkBJV,OAAO,CAACW,IAAR,CAAaC,GAAb,CAAiBJ,IAAjB,EAAuBZ,EAAE,CAACiB,MAA1B,EAAkC;AAC5CC,cAAAA,UAAU,EAAE,CADgC;AAE5CC,cAAAA,OAAO,EAAElB,EAAE,CAACmB,KAAH,CAAS,UAAT,CAFmC,CAEd;;AAFc,aAAlC,CAlBI;;AAAA;AAkBhBV,YAAAA,GAlBgB;AAAA;AAAA,mBAuBVN,OAAO,CAACC,IAAR,CAAaC,SAAb,CAAuBU,GAAvB,CAA2Bd,YAA3B,EAAyCQ,GAAG,CAACW,MAA7C,CAvBU;;AAAA;AA0BlBtB,YAAAA,GAAG,iCAA0BW,GAA1B,EAAH;AA1BkB,6CA4BXA,GA5BW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXP,WAAW;AAAA;AAAA;AAAA,GAAjB;;AA+BAmB,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst UnixFs = require('ipfs-unixfs')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root')\nconst mc = require('multicodec')\nconst mh = require('multihashes')\n\nconst {\n  MFS_ROOT_KEY\n} = require('./constants')\n\nconst loadMfsRoot = async (context) => {\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = new CID(buf)\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const node = DAGNode.create(new UnixFs('directory').marshal())\n    cid = await context.ipld.put(node, mc.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n    })\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n\nmodule.exports = loadMfsRoot\n"]},"metadata":{},"sourceType":"script"}