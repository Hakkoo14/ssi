{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar asyncMap = require('async/map');\n/**\n * BlockService is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n */\n\n\nvar BlockService = /*#__PURE__*/function () {\n  /**\n   * Create a new BlockService\n   *\n   * @param {IPFSRepo} ipfsRepo\n   */\n  function BlockService(ipfsRepo) {\n    _classCallCheck(this, BlockService);\n\n    this._repo = ipfsRepo;\n    this._bitswap = null;\n  }\n  /**\n   * Add a bitswap instance that communicates with the\n   * network to retreive blocks that are not in the local store.\n   *\n   * If the node is online all requests for blocks first\n   * check locally and afterwards ask the network for the blocks.\n   *\n   * @param {Bitswap} bitswap\n   * @returns {void}\n   */\n\n\n  _createClass(BlockService, [{\n    key: \"setExchange\",\n    value: function setExchange(bitswap) {\n      this._bitswap = bitswap;\n    }\n    /**\n     * Go offline, i.e. drop the reference to bitswap.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unsetExchange\",\n    value: function unsetExchange() {\n      this._bitswap = null;\n    }\n    /**\n     * Is the blockservice online, i.e. is bitswap present.\n     *\n     * @returns {bool}\n     */\n\n  }, {\n    key: \"hasExchange\",\n    value: function hasExchange() {\n      return this._bitswap != null;\n    }\n    /**\n     * Put a block to the underlying datastore.\n     *\n     * @param {Block} block\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(block, callback) {\n      if (this.hasExchange()) {\n        this._bitswap.put(block, callback);\n      } else {\n        this._repo.blocks.put(block, callback);\n      }\n    }\n    /**\n     * Put a multiple blocks to the underlying datastore.\n     *\n     * @param {Array<Block>} blocks\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"putMany\",\n    value: function putMany(blocks, callback) {\n      if (this.hasExchange()) {\n        this._bitswap.putMany(blocks, callback);\n      } else {\n        this._repo.blocks.putMany(blocks, callback);\n      }\n    }\n    /**\n     * Get a block by cid.\n     *\n     * @param {CID} cid\n     * @param {function(Error, Block)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(cid, callback) {\n      if (this.hasExchange()) {\n        this._bitswap.get(cid, callback);\n      } else {\n        this._repo.blocks.get(cid, callback);\n      }\n    }\n    /**\n     * Get multiple blocks back from an array of cids.\n     *\n     * @param {Array<CID>} cids\n     * @param {function(Error, Block)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"getMany\",\n    value: function getMany(cids, callback) {\n      var _this = this;\n\n      if (!Array.isArray(cids)) {\n        callback(new Error('first arg must be an array of cids'));\n      } else if (this.hasExchange()) {\n        this._bitswap.getMany(cids, callback);\n      } else {\n        asyncMap(cids, function (cid, cb) {\n          return _this._repo.blocks.get(cid, cb);\n        }, callback);\n      }\n    }\n    /**\n     * Delete a block from the blockstore.\n     *\n     * @param {CID} cid\n     * @param {function(Error)} callback\n     * @return {void}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(cid, callback) {\n      this._repo.blocks.delete(cid, callback);\n    }\n  }]);\n\n  return BlockService;\n}();\n\nmodule.exports = BlockService;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs-block-service/src/index.js"],"names":["asyncMap","require","BlockService","ipfsRepo","_repo","_bitswap","bitswap","block","callback","hasExchange","put","blocks","putMany","cid","get","cids","Array","isArray","Error","getMany","cb","delete","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;;;IACMC,Y;AACJ;AACF;AACA;AACA;AACA;AACE,wBAAaC,QAAb,EAAuB;AAAA;;AACrB,SAAKC,KAAL,GAAaD,QAAb;AACA,SAAKE,QAAL,GAAgB,IAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,qBAAaC,OAAb,EAAsB;AACpB,WAAKD,QAAL,GAAgBC,OAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,yBAAiB;AACf,WAAKD,QAAL,GAAgB,IAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,uBAAe;AACb,aAAO,KAAKA,QAAL,IAAiB,IAAxB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,aAAKE,KAAL,EAAYC,QAAZ,EAAsB;AACpB,UAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,aAAKJ,QAAL,CAAcK,GAAd,CAAkBH,KAAlB,EAAyBC,QAAzB;AACD,OAFD,MAEO;AACL,aAAKJ,KAAL,CAAWO,MAAX,CAAkBD,GAAlB,CAAsBH,KAAtB,EAA6BC,QAA7B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAASG,MAAT,EAAiBH,QAAjB,EAA2B;AACzB,UAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,aAAKJ,QAAL,CAAcO,OAAd,CAAsBD,MAAtB,EAA8BH,QAA9B;AACD,OAFD,MAEO;AACL,aAAKJ,KAAL,CAAWO,MAAX,CAAkBC,OAAlB,CAA0BD,MAA1B,EAAkCH,QAAlC;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,aAAKK,GAAL,EAAUL,QAAV,EAAoB;AAClB,UAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,aAAKJ,QAAL,CAAcS,GAAd,CAAkBD,GAAlB,EAAuBL,QAAvB;AACD,OAFD,MAEO;AACL,aAAKJ,KAAL,CAAWO,MAAX,CAAkBG,GAAlB,CAAsBD,GAAtB,EAA2BL,QAA3B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAASO,IAAT,EAAeP,QAAf,EAAyB;AAAA;;AACvB,UAAI,CAACQ,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxBP,QAAAA,QAAQ,CAAC,IAAIU,KAAJ,CAAU,oCAAV,CAAD,CAAR;AACD,OAFD,MAEO,IAAI,KAAKT,WAAL,EAAJ,EAAwB;AAC7B,aAAKJ,QAAL,CAAcc,OAAd,CAAsBJ,IAAtB,EAA4BP,QAA5B;AACD,OAFM,MAEA;AACLR,QAAAA,QAAQ,CAACe,IAAD,EAAO,UAACF,GAAD,EAAMO,EAAN;AAAA,iBAAa,KAAI,CAAChB,KAAL,CAAWO,MAAX,CAAkBG,GAAlB,CAAsBD,GAAtB,EAA2BO,EAA3B,CAAb;AAAA,SAAP,EAAoDZ,QAApD,CAAR;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAAQK,GAAR,EAAaL,QAAb,EAAuB;AACrB,WAAKJ,KAAL,CAAWO,MAAX,CAAkBU,MAAlB,CAAyBR,GAAzB,EAA8BL,QAA9B;AACD;;;;;;AAGHc,MAAM,CAACC,OAAP,GAAiBrB,YAAjB","sourcesContent":["'use strict'\n\nconst asyncMap = require('async/map')\n\n/**\n * BlockService is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n */\nclass BlockService {\n  /**\n   * Create a new BlockService\n   *\n   * @param {IPFSRepo} ipfsRepo\n   */\n  constructor (ipfsRepo) {\n    this._repo = ipfsRepo\n    this._bitswap = null\n  }\n\n  /**\n   * Add a bitswap instance that communicates with the\n   * network to retreive blocks that are not in the local store.\n   *\n   * If the node is online all requests for blocks first\n   * check locally and afterwards ask the network for the blocks.\n   *\n   * @param {Bitswap} bitswap\n   * @returns {void}\n   */\n  setExchange (bitswap) {\n    this._bitswap = bitswap\n  }\n\n  /**\n   * Go offline, i.e. drop the reference to bitswap.\n   *\n   * @returns {void}\n   */\n  unsetExchange () {\n    this._bitswap = null\n  }\n\n  /**\n   * Is the blockservice online, i.e. is bitswap present.\n   *\n   * @returns {bool}\n   */\n  hasExchange () {\n    return this._bitswap != null\n  }\n\n  /**\n   * Put a block to the underlying datastore.\n   *\n   * @param {Block} block\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  put (block, callback) {\n    if (this.hasExchange()) {\n      this._bitswap.put(block, callback)\n    } else {\n      this._repo.blocks.put(block, callback)\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore.\n   *\n   * @param {Array<Block>} blocks\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  putMany (blocks, callback) {\n    if (this.hasExchange()) {\n      this._bitswap.putMany(blocks, callback)\n    } else {\n      this._repo.blocks.putMany(blocks, callback)\n    }\n  }\n\n  /**\n   * Get a block by cid.\n   *\n   * @param {CID} cid\n   * @param {function(Error, Block)} callback\n   * @returns {void}\n   */\n  get (cid, callback) {\n    if (this.hasExchange()) {\n      this._bitswap.get(cid, callback)\n    } else {\n      this._repo.blocks.get(cid, callback)\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids.\n   *\n   * @param {Array<CID>} cids\n   * @param {function(Error, Block)} callback\n   * @returns {void}\n   */\n  getMany (cids, callback) {\n    if (!Array.isArray(cids)) {\n      callback(new Error('first arg must be an array of cids'))\n    } else if (this.hasExchange()) {\n      this._bitswap.getMany(cids, callback)\n    } else {\n      asyncMap(cids, (cid, cb) => this._repo.blocks.get(cid, cb), callback)\n    }\n  }\n\n  /**\n   * Delete a block from the blockstore.\n   *\n   * @param {CID} cid\n   * @param {function(Error)} callback\n   * @return {void}\n   */\n  delete (cid, callback) {\n    this._repo.blocks.delete(cid, callback)\n  }\n}\n\nmodule.exports = BlockService\n"]},"metadata":{},"sourceType":"script"}