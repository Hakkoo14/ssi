{"ast":null,"code":"'use strict';\n\nvar waterfall = require('async/waterfall');\n\nvar parallel = require('async/parallel');\n\nvar setImmediate = require('async/setImmediate');\n\nvar promisify = require('promisify-es6');\n\nvar dagPB = require('ipld-dag-pb');\n\nvar DAGNode = dagPB.DAGNode;\nvar DAGLink = dagPB.DAGLink;\n\nvar CID = require('cids');\n\nvar mh = require('multihashes');\n\nvar multicodec = require('multicodec');\n\nvar Unixfs = require('ipfs-unixfs');\n\nvar errCode = require('err-code');\n\nfunction normalizeMultihash(multihash, enc) {\n  if (typeof multihash === 'string') {\n    if (enc === 'base58' || !enc) {\n      return multihash;\n    }\n\n    return Buffer.from(multihash, enc);\n  } else if (Buffer.isBuffer(multihash)) {\n    return multihash;\n  } else if (CID.isCID(multihash)) {\n    return multihash.buffer;\n  } else {\n    throw new Error('unsupported multihash');\n  }\n}\n\nfunction parseBuffer(buf, encoding, callback) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf, callback);\n\n    case 'protobuf':\n      return parseProtoBuffer(buf, callback);\n\n    default:\n      callback(new Error(\"unkown encoding: \".concat(encoding)));\n  }\n}\n\nfunction parseJSONBuffer(buf, callback) {\n  var data;\n  var links;\n\n  try {\n    var parsed = JSON.parse(buf.toString());\n    links = (parsed.Links || []).map(function (link) {\n      return new DAGLink(link.Name || link.name, link.Size || link.size, mh.fromB58String(link.Hash || link.hash || link.multihash));\n    });\n    data = Buffer.from(parsed.Data);\n  } catch (err) {\n    return callback(new Error('failed to parse JSON: ' + err));\n  }\n\n  try {\n    callback(null, DAGNode.create(data, links));\n  } catch (err) {\n    callback(err);\n  }\n}\n\nfunction parseProtoBuffer(buf, callback) {\n  var obj;\n\n  try {\n    obj = dagPB.util.deserialize(buf);\n  } catch (err) {\n    return callback(err);\n  }\n\n  callback(null, obj);\n}\n\nfunction findLinks(node) {\n  var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  for (var key in node) {\n    var val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)));\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val));\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (typeof val === 'object' && !(val instanceof String)) {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n\nmodule.exports = function object(self) {\n  function editAndSave(edit) {\n    return function (multihash, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      waterfall([function (cb) {\n        self.object.get(multihash, options, cb);\n      }, function (node, cb) {\n        // edit applies the edit func passed to\n        // editAndSave\n        edit(node, function (err, node) {\n          if (err) {\n            return cb(err);\n          }\n\n          self._ipld.put(node, multicodec.DAG_PB, {\n            cidVersion: 0,\n            hashAlg: multicodec.SHA2_256\n          }).then(function (cid) {\n            if (options.preload !== false) {\n              self._preload(cid);\n            }\n\n            cb(null, cid);\n          }, function (error) {\n            return cb(error);\n          });\n        });\n      }], callback);\n    };\n  }\n\n  return {\n    new: promisify(function (template, options, callback) {\n      if (typeof template === 'function') {\n        callback = template;\n        template = undefined;\n        options = {};\n      }\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var data;\n\n      if (template) {\n        if (template !== 'unixfs-dir') {\n          return setImmediate(function () {\n            return callback(new Error('unknown template'));\n          });\n        }\n\n        data = new Unixfs('directory').marshal();\n      } else {\n        data = Buffer.alloc(0);\n      }\n\n      var node;\n\n      try {\n        node = DAGNode.create(data);\n      } catch (err) {\n        return callback(err);\n      }\n\n      self._ipld.put(node, multicodec.DAG_PB, {\n        cidVersion: 0,\n        hashAlg: multicodec.SHA2_256\n      }).then(function (cid) {\n        if (options.preload !== false) {\n          self._preload(cid);\n        }\n\n        callback(null, cid);\n      }, function (error) {\n        return callback(error);\n      });\n    }),\n    put: promisify(function (obj, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var encoding = options.enc;\n      var node;\n\n      if (Buffer.isBuffer(obj)) {\n        if (encoding) {\n          parseBuffer(obj, encoding, function (err, _node) {\n            if (err) {\n              return callback(err);\n            }\n\n            node = _node;\n            next();\n          });\n        } else {\n          try {\n            node = DAGNode.create(obj);\n          } catch (err) {\n            return callback(err);\n          }\n\n          next();\n        }\n      } else if (DAGNode.isDAGNode(obj)) {\n        // already a dag node\n        node = obj;\n        next();\n      } else if (typeof obj === 'object') {\n        try {\n          node = DAGNode.create(obj.Data, obj.Links);\n        } catch (err) {\n          return callback(err);\n        }\n\n        next();\n      } else {\n        return callback(new Error('obj not recognized'));\n      }\n\n      function next() {\n        self._ipld.put(node, multicodec.DAG_PB, {\n          cidVersion: 0,\n          hashAlg: multicodec.SHA2_256\n        }).then(function (cid) {\n          if (options.preload !== false) {\n            self._preload(cid);\n          }\n\n          callback(null, cid);\n        }, function (error) {\n          return callback(error);\n        });\n      }\n    }),\n    get: promisify(function (multihash, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var mh, cid;\n\n      try {\n        mh = normalizeMultihash(multihash, options.enc);\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(errCode(err, 'ERR_INVALID_MULTIHASH'));\n        });\n      }\n\n      try {\n        cid = new CID(mh);\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(errCode(err, 'ERR_INVALID_CID'));\n        });\n      }\n\n      if (options.cidVersion === 1) {\n        cid = cid.toV1();\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid);\n      }\n\n      self._ipld.get(cid).then(function (node) {\n        return callback(null, node);\n      }, function (error) {\n        return callback(error);\n      });\n    }),\n    data: promisify(function (multihash, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      self.object.get(multihash, options, function (err, node) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, node.Data);\n      });\n    }),\n    links: promisify(function (multihash, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      var cid = new CID(multihash);\n      self.dag.get(cid, options, function (err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        if (cid.codec === 'raw') {\n          return callback(null, []);\n        }\n\n        if (cid.codec === 'dag-pb') {\n          return callback(null, result.value.Links);\n        }\n\n        if (cid.codec === 'dag-cbor') {\n          var links = findLinks(result);\n          return callback(null, links);\n        }\n\n        callback(new Error(\"Cannot resolve links from codec \".concat(cid.codec)));\n      });\n    }),\n    stat: promisify(function (multihash, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      waterfall([function (cb) {\n        return self.object.get(multihash, options, cb);\n      }, function (node, cb) {\n        cb(null, {\n          node: node,\n          serialized: dagPB.util.serialize(node)\n        });\n      }, function (_ref, cb) {\n        var _node2 = _ref.node,\n            _serialized = _ref.serialized;\n        parallel({\n          serialized: function serialized(next) {\n            return next(null, _serialized);\n          },\n          cid: function cid(next) {\n            return dagPB.util.cid(_serialized, {\n              cidVersion: 0\n            }).then(function (cid) {\n              return next(null, cid);\n            }, next);\n          },\n          node: function node(next) {\n            return next(null, _node2);\n          }\n        }, cb);\n      }], function (err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        var blockSize = result.serialized.length;\n        var linkLength = result.node.Links.reduce(function (a, l) {\n          return a + l.Tsize;\n        }, 0);\n        callback(null, {\n          Hash: result.cid.toBaseEncodedString(),\n          NumLinks: result.node.Links.length,\n          BlockSize: blockSize,\n          LinksSize: blockSize - result.node.Data.length,\n          DataSize: result.node.Data.length,\n          CumulativeSize: blockSize + linkLength\n        });\n      });\n    }),\n    patch: promisify({\n      addLink: function addLink(multihash, link, options, callback) {\n        editAndSave(function (node, cb) {\n          DAGNode.addLink(node, link).then(function (node) {\n            cb(null, node);\n          }, cb);\n        })(multihash, options, callback);\n      },\n      rmLink: function rmLink(multihash, linkRef, options, callback) {\n        editAndSave(function (node, cb) {\n          linkRef = linkRef.Name || linkRef.name;\n\n          try {\n            node = DAGNode.rmLink(node, linkRef);\n          } catch (err) {\n            return cb(err);\n          }\n\n          cb(null, node);\n        })(multihash, options, callback);\n      },\n      appendData: function appendData(multihash, data, options, callback) {\n        editAndSave(function (node, cb) {\n          var newData = Buffer.concat([node.Data, data]);\n\n          try {\n            node = DAGNode.create(newData, node.Links);\n          } catch (err) {\n            return cb(err);\n          }\n\n          cb(null, node);\n        })(multihash, options, callback);\n      },\n      setData: function setData(multihash, data, options, callback) {\n        editAndSave(function (node, cb) {\n          try {\n            node = DAGNode.create(data, node.Links);\n          } catch (err) {\n            return cb(err);\n          }\n\n          cb(null, node);\n        })(multihash, options, callback);\n      }\n    })\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/object.js"],"names":["waterfall","require","parallel","setImmediate","promisify","dagPB","DAGNode","DAGLink","CID","mh","multicodec","Unixfs","errCode","normalizeMultihash","multihash","enc","Buffer","from","isBuffer","isCID","buffer","Error","parseBuffer","buf","encoding","callback","parseJSONBuffer","parseProtoBuffer","data","links","parsed","JSON","parse","toString","Links","map","link","Name","name","Size","size","fromB58String","Hash","hash","Data","err","create","obj","util","deserialize","findLinks","node","key","val","Object","keys","length","push","_","Array","isArray","String","module","exports","object","self","editAndSave","edit","options","cb","get","_ipld","put","DAG_PB","cidVersion","hashAlg","SHA2_256","then","cid","preload","_preload","error","new","template","undefined","marshal","alloc","_node","next","isDAGNode","toV1","dag","result","codec","value","stat","serialized","serialize","blockSize","linkLength","reduce","a","l","Tsize","toBaseEncodedString","NumLinks","BlockSize","LinksSize","DataSize","CumulativeSize","patch","addLink","rmLink","linkRef","appendData","newData","concat","setData"],"mappings":"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","sourcesContent":["'use strict'\n\nconst waterfall = require('async/waterfall')\nconst parallel = require('async/parallel')\nconst setImmediate = require('async/setImmediate')\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst DAGLink = dagPB.DAGLink\nconst CID = require('cids')\nconst mh = require('multihashes')\nconst multicodec = require('multicodec')\nconst Unixfs = require('ipfs-unixfs')\nconst errCode = require('err-code')\n\nfunction normalizeMultihash (multihash, enc) {\n  if (typeof multihash === 'string') {\n    if (enc === 'base58' || !enc) {\n      return multihash\n    }\n\n    return Buffer.from(multihash, enc)\n  } else if (Buffer.isBuffer(multihash)) {\n    return multihash\n  } else if (CID.isCID(multihash)) {\n    return multihash.buffer\n  } else {\n    throw new Error('unsupported multihash')\n  }\n}\n\nfunction parseBuffer (buf, encoding, callback) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf, callback)\n    case 'protobuf':\n      return parseProtoBuffer(buf, callback)\n    default:\n      callback(new Error(`unkown encoding: ${encoding}`))\n  }\n}\n\nfunction parseJSONBuffer (buf, callback) {\n  let data\n  let links\n\n  try {\n    const parsed = JSON.parse(buf.toString())\n\n    links = (parsed.Links || []).map((link) => {\n      return new DAGLink(\n        link.Name || link.name,\n        link.Size || link.size,\n        mh.fromB58String(link.Hash || link.hash || link.multihash)\n      )\n    })\n    data = Buffer.from(parsed.Data)\n  } catch (err) {\n    return callback(new Error('failed to parse JSON: ' + err))\n  }\n\n  try {\n    callback(null, DAGNode.create(data, links))\n  } catch (err) {\n    callback(err)\n  }\n}\n\nfunction parseProtoBuffer (buf, callback) {\n  let obj\n  try {\n    obj = dagPB.util.deserialize(buf)\n  } catch (err) {\n    return callback(err)\n  }\n  callback(null, obj)\n}\n\nfunction findLinks (node, links = []) {\n  for (let key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)))\n        continue\n      } catch (_) {\n        // not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val))\n\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (typeof val === 'object' && !(val instanceof String)) {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\nmodule.exports = function object (self) {\n  function editAndSave (edit) {\n    return (multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      waterfall([\n        (cb) => {\n          self.object.get(multihash, options, cb)\n        },\n        (node, cb) => {\n          // edit applies the edit func passed to\n          // editAndSave\n          edit(node, (err, node) => {\n            if (err) {\n              return cb(err)\n            }\n\n            self._ipld.put(node, multicodec.DAG_PB, {\n              cidVersion: 0,\n              hashAlg: multicodec.SHA2_256\n            }).then(\n              (cid) => {\n                if (options.preload !== false) {\n                  self._preload(cid)\n                }\n\n                cb(null, cid)\n              },\n              (error) => cb(error)\n            )\n          })\n        }\n      ], callback)\n    }\n  }\n\n  return {\n    new: promisify((template, options, callback) => {\n      if (typeof template === 'function') {\n        callback = template\n        template = undefined\n        options = {}\n      }\n\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      let data\n\n      if (template) {\n        if (template !== 'unixfs-dir') {\n          return setImmediate(() => callback(new Error('unknown template')))\n        }\n        data = (new Unixfs('directory')).marshal()\n      } else {\n        data = Buffer.alloc(0)\n      }\n\n      let node\n\n      try {\n        node = DAGNode.create(data)\n      } catch (err) {\n        return callback(err)\n      }\n\n      self._ipld.put(node, multicodec.DAG_PB, {\n        cidVersion: 0,\n        hashAlg: multicodec.SHA2_256\n      }).then(\n        (cid) => {\n          if (options.preload !== false) {\n            self._preload(cid)\n          }\n\n          callback(null, cid)\n        },\n        (error) => callback(error)\n      )\n    }),\n    put: promisify((obj, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      const encoding = options.enc\n      let node\n\n      if (Buffer.isBuffer(obj)) {\n        if (encoding) {\n          parseBuffer(obj, encoding, (err, _node) => {\n            if (err) {\n              return callback(err)\n            }\n            node = _node\n            next()\n          })\n        } else {\n          try {\n            node = DAGNode.create(obj)\n          } catch (err) {\n            return callback(err)\n          }\n\n          next()\n        }\n      } else if (DAGNode.isDAGNode(obj)) {\n        // already a dag node\n        node = obj\n        next()\n      } else if (typeof obj === 'object') {\n        try {\n          node = DAGNode.create(obj.Data, obj.Links)\n        } catch (err) {\n          return callback(err)\n        }\n\n        next()\n      } else {\n        return callback(new Error('obj not recognized'))\n      }\n\n      function next () {\n        self._ipld.put(node, multicodec.DAG_PB, {\n          cidVersion: 0,\n          hashAlg: multicodec.SHA2_256\n        }).then(\n          (cid) => {\n            if (options.preload !== false) {\n              self._preload(cid)\n            }\n\n            callback(null, cid)\n          },\n          (error) => callback(error)\n        )\n      }\n    }),\n\n    get: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      let mh, cid\n\n      try {\n        mh = normalizeMultihash(multihash, options.enc)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_MULTIHASH')))\n      }\n\n      try {\n        cid = new CID(mh)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      if (options.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      self._ipld.get(cid).then(\n        (node) => callback(null, node),\n        (error) => callback(error)\n      )\n    }),\n\n    data: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      self.object.get(multihash, options, (err, node) => {\n        if (err) {\n          return callback(err)\n        }\n\n        callback(null, node.Data)\n      })\n    }),\n\n    links: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      const cid = new CID(multihash)\n\n      self.dag.get(cid, options, (err, result) => {\n        if (err) {\n          return callback(err)\n        }\n\n        if (cid.codec === 'raw') {\n          return callback(null, [])\n        }\n\n        if (cid.codec === 'dag-pb') {\n          return callback(null, result.value.Links)\n        }\n\n        if (cid.codec === 'dag-cbor') {\n          const links = findLinks(result)\n\n          return callback(null, links)\n        }\n\n        callback(new Error(`Cannot resolve links from codec ${cid.codec}`))\n      })\n    }),\n\n    stat: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      waterfall([\n        (cb) => self.object.get(multihash, options, cb),\n        (node, cb) => {\n          cb(null, {\n            node,\n            serialized: dagPB.util.serialize(node)\n          })\n        },\n        ({ node, serialized }, cb) => {\n          parallel({\n            serialized: (next) => next(null, serialized),\n            cid: (next) => dagPB.util.cid(serialized, {\n              cidVersion: 0\n            }).then((cid) => next(null, cid), next),\n            node: (next) => next(null, node)\n          }, cb)\n        }\n      ], (err, result) => {\n        if (err) {\n          return callback(err)\n        }\n\n        const blockSize = result.serialized.length\n        const linkLength = result.node.Links.reduce((a, l) => a + l.Tsize, 0)\n\n        callback(null, {\n          Hash: result.cid.toBaseEncodedString(),\n          NumLinks: result.node.Links.length,\n          BlockSize: blockSize,\n          LinksSize: blockSize - result.node.Data.length,\n          DataSize: result.node.Data.length,\n          CumulativeSize: blockSize + linkLength\n        })\n      })\n    }),\n\n    patch: promisify({\n      addLink (multihash, link, options, callback) {\n        editAndSave((node, cb) => {\n          DAGNode.addLink(node, link).then((node) => {\n            cb(null, node)\n          }, cb)\n        })(multihash, options, callback)\n      },\n\n      rmLink (multihash, linkRef, options, callback) {\n        editAndSave((node, cb) => {\n          linkRef = linkRef.Name || linkRef.name\n\n          try {\n            node = DAGNode.rmLink(node, linkRef)\n          } catch (err) {\n            return cb(err)\n          }\n\n          cb(null, node)\n        })(multihash, options, callback)\n      },\n\n      appendData (multihash, data, options, callback) {\n        editAndSave((node, cb) => {\n          const newData = Buffer.concat([node.Data, data])\n\n          try {\n            node = DAGNode.create(newData, node.Links)\n          } catch (err) {\n            return cb(err)\n          }\n\n          cb(null, node)\n        })(multihash, options, callback)\n      },\n\n      setData (multihash, data, options, callback) {\n        editAndSave((node, cb) => {\n          try {\n            node = DAGNode.create(data, node.Links)\n          } catch (err) {\n            return cb(err)\n          }\n\n          cb(null, node)\n        })(multihash, options, callback)\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}