{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar toMfsPath = require('./to-mfs-path');\n\nfunction toSources(_x, _x2) {\n  return _toSources.apply(this, arguments);\n}\n\nfunction _toSources() {\n  _toSources = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, args) {\n    var sources;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Support weird mfs.mv([source, dest], options, callback) signature\n            if (Array.isArray(args[0])) {\n              args = args[0];\n            }\n\n            sources = args.filter(function (arg) {\n              return typeof arg === 'string';\n            }).map(function (source) {\n              return source.trim();\n            });\n            _context.next = 4;\n            return toMfsPath(context, sources);\n\n          case 4:\n            _context.t0 = _context.sent;\n            return _context.abrupt(\"return\", {\n              sources: _context.t0\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _toSources.apply(this, arguments);\n}\n\nmodule.exports = toSources;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs-mfs/src/core/utils/to-sources.js"],"names":["toMfsPath","require","toSources","context","args","Array","isArray","sources","filter","arg","map","source","trim","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;SAEeC,S;;;;;wEAAf,iBAA0BC,OAA1B,EAAmCC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AACA,gBAAIC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AAC1BA,cAAAA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAX;AACD;;AAEKG,YAAAA,OANR,GAMkBH,IAAI,CACjBI,MADa,CACN,UAAAC,GAAG;AAAA,qBAAI,OAAOA,GAAP,KAAe,QAAnB;AAAA,aADG,EAEbC,GAFa,CAET,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACC,IAAP,EAAJ;AAAA,aAFG,CANlB;AAAA;AAAA,mBAWmBZ,SAAS,CAACG,OAAD,EAAUI,OAAV,CAX5B;;AAAA;AAAA;AAAA;AAWIA,cAAAA,OAXJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeAM,MAAM,CAACC,OAAP,GAAiBZ,SAAjB","sourcesContent":["'use strict'\n\nconst toMfsPath = require('./to-mfs-path')\n\nasync function toSources (context, args) {\n  // Support weird mfs.mv([source, dest], options, callback) signature\n  if (Array.isArray(args[0])) {\n    args = args[0]\n  }\n\n  const sources = args\n    .filter(arg => typeof arg === 'string')\n    .map(source => source.trim())\n\n  return {\n    sources: await toMfsPath(context, sources)\n  }\n}\n\nmodule.exports = toSources\n"]},"metadata":{},"sourceType":"script"}