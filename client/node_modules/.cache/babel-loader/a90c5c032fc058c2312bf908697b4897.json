{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar pull = require('pull-stream');\n\nvar sort = require('pull-sort');\n\nvar isSource = require('is-pull-stream').isSource;\n\nvar validateAddInput = require('ipfs-utils/src/files/add-input-validation');\n\nmodule.exports = function (self) {\n  var add = promisify(function (data, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n\n    try {\n      validateAddInput(data);\n    } catch (err) {\n      return callback(err);\n    }\n\n    pull(pull.values([data]), self.addPullStream(options), sort(function (a, b) {\n      if (a.path < b.path) return 1;\n      if (a.path > b.path) return -1;\n      return 0;\n    }), pull.collect(callback));\n  });\n  return function () {\n    var args = Array.from(arguments); // If we .add(<pull stream>), then promisify thinks the pull stream\n    // is a callback! Add an empty options object in this case so that a\n    // promise is returned.\n\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n\n    return add.apply(null, args);\n  };\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/components/files-regular/add.js"],"names":["promisify","require","pull","sort","isSource","validateAddInput","module","exports","self","add","data","options","callback","err","values","addPullStream","a","b","path","collect","args","Array","from","arguments","length","push","apply"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAApB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,WAAD,CAApB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,gBAAD,CAAP,CAA0BG,QAA3C;;AACA,IAAMC,gBAAgB,GAAGJ,OAAO,CAAC,2CAAD,CAAhC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,MAAMC,GAAG,GAAGT,SAAS,CAAC,UAACU,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,EAA6B;AACjD,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAI;AACFN,MAAAA,gBAAgB,CAACK,IAAD,CAAhB;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,aAAOD,QAAQ,CAACC,GAAD,CAAf;AACD;;AAEDX,IAAAA,IAAI,CACFA,IAAI,CAACY,MAAL,CAAY,CAACJ,IAAD,CAAZ,CADE,EAEFF,IAAI,CAACO,aAAL,CAAmBJ,OAAnB,CAFE,EAGFR,IAAI,CAAC,UAACa,CAAD,EAAIC,CAAJ,EAAU;AACb,UAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAP;AACrB,UAAIF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAC,CAAR;AACrB,aAAO,CAAP;AACD,KAJG,CAHF,EAQFhB,IAAI,CAACiB,OAAL,CAAaP,QAAb,CARE,CAAJ;AAUD,GAxBoB,CAArB;AA0BA,SAAO,YAAY;AACjB,QAAMQ,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAb,CADiB,CAGjB;AACA;AACA;;AACA,QAAIH,IAAI,CAACI,MAAL,KAAgB,CAAhB,IAAqBpB,QAAQ,CAACgB,IAAI,CAAC,CAAD,CAAL,CAAjC,EAA4C;AAC1CA,MAAAA,IAAI,CAACK,IAAL,CAAU,EAAV;AACD;;AAED,WAAOhB,GAAG,CAACiB,KAAJ,CAAU,IAAV,EAAgBN,IAAhB,CAAP;AACD,GAXD;AAYD,CAvCD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream')\nconst sort = require('pull-sort')\nconst isSource = require('is-pull-stream').isSource\nconst validateAddInput = require('ipfs-utils/src/files/add-input-validation')\n\nmodule.exports = function (self) {\n  const add = promisify((data, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n\n    try {\n      validateAddInput(data)\n    } catch (err) {\n      return callback(err)\n    }\n\n    pull(\n      pull.values([data]),\n      self.addPullStream(options),\n      sort((a, b) => {\n        if (a.path < b.path) return 1\n        if (a.path > b.path) return -1\n        return 0\n      }),\n      pull.collect(callback)\n    )\n  })\n\n  return function () {\n    const args = Array.from(arguments)\n\n    // If we .add(<pull stream>), then promisify thinks the pull stream\n    // is a callback! Add an empty options object in this case so that a\n    // promise is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({})\n    }\n\n    return add.apply(null, args)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}