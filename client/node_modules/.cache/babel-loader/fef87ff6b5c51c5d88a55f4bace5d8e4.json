{"ast":null,"code":"'use strict';\n\nvar get = require('dlv');\n\nvar mergeOptions = require('merge-options');\n\nvar ipnsUtils = require('../ipns/routing/utils');\n\nmodule.exports = function libp2p(self, config) {\n  var options = self._options || {};\n  config = config || {}; // Always create libp2p via a bundle function\n\n  var createBundle = typeof options.libp2p === 'function' ? options.libp2p : defaultBundle;\n  var datastore = self._repo.datastore;\n  var peerInfo = self._peerInfo;\n  var peerBook = self._peerInfoBook;\n  var libp2p = createBundle({\n    options: options,\n    config: config,\n    datastore: datastore,\n    peerInfo: peerInfo,\n    peerBook: peerBook\n  });\n  libp2p.on('stop', function () {\n    // Clear our addresses so we can start clean\n    peerInfo.multiaddrs.clear();\n  });\n  libp2p.on('start', function () {\n    peerInfo.multiaddrs.forEach(function (ma) {\n      self._print('Swarm listening on', ma.toString());\n    });\n  });\n  libp2p.on('peer:connect', function (peerInfo) {\n    return peerBook.put(peerInfo);\n  });\n  return libp2p;\n};\n\nfunction defaultBundle(_ref) {\n  var datastore = _ref.datastore,\n      peerInfo = _ref.peerInfo,\n      peerBook = _ref.peerBook,\n      options = _ref.options,\n      config = _ref.config;\n  var libp2pDefaults = {\n    datastore: datastore,\n    peerInfo: peerInfo,\n    peerBook: peerBook,\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get(options, 'config.Discovery.webRTCStar.Enabled', get(config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: get(options, 'config.Bootstrap', get(config, 'Bootstrap', []))\n        }\n      },\n      relay: {\n        enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),\n        hop: {\n          enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),\n          active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        kBucketSize: get(options, 'dht.kBucketSize', 20),\n        // enabled: !get(options, 'offline', false), // disable if offline, on by default\n        enabled: false,\n        randomWalk: {\n          enabled: false // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      EXPERIMENTAL: {\n        pubsub: get(options, 'EXPERIMENTAL.pubsub', false)\n      }\n    },\n    connectionManager: get(options, 'connectionManager', {\n      maxPeers: get(config, 'Swarm.ConnMgr.HighWater'),\n      minPeers: get(config, 'Swarm.ConnMgr.LowWater')\n    })\n  };\n  var libp2pOptions = mergeOptions(libp2pDefaults, get(options, 'libp2p', {})); // Required inline to reduce startup time\n  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n\n  var Node = require('../runtime/libp2p-nodejs');\n\n  return new Node(libp2pOptions);\n}","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/components/libp2p.js"],"names":["get","require","mergeOptions","ipnsUtils","module","exports","libp2p","self","config","options","_options","createBundle","defaultBundle","datastore","_repo","peerInfo","_peerInfo","peerBook","_peerInfoBook","on","multiaddrs","clear","forEach","ma","_print","toString","put","libp2pDefaults","peerDiscovery","mdns","enabled","webRTCStar","bootstrap","list","relay","hop","active","dht","kBucketSize","randomWalk","validators","ipns","validator","selectors","selector","EXPERIMENTAL","pubsub","connectionManager","maxPeers","minPeers","libp2pOptions","Node"],"mappings":"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","sourcesContent":["'use strict'\n\nconst get = require('dlv')\nconst mergeOptions = require('merge-options')\nconst ipnsUtils = require('../ipns/routing/utils')\n\nmodule.exports = function libp2p (self, config) {\n  const options = self._options || {}\n  config = config || {}\n\n  // Always create libp2p via a bundle function\n  const createBundle = typeof options.libp2p === 'function'\n    ? options.libp2p\n    : defaultBundle\n\n  const { datastore } = self._repo\n  const peerInfo = self._peerInfo\n  const peerBook = self._peerInfoBook\n  const libp2p = createBundle({ options, config, datastore, peerInfo, peerBook })\n\n  libp2p.on('stop', () => {\n    // Clear our addresses so we can start clean\n    peerInfo.multiaddrs.clear()\n  })\n\n  libp2p.on('start', () => {\n    peerInfo.multiaddrs.forEach((ma) => {\n      self._print('Swarm listening on', ma.toString())\n    })\n  })\n\n  libp2p.on('peer:connect', peerInfo => peerBook.put(peerInfo))\n\n  return libp2p\n}\n\nfunction defaultBundle ({ datastore, peerInfo, peerBook, options, config }) {\n  const libp2pDefaults = {\n    datastore,\n    peerInfo,\n    peerBook,\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get(options, 'config.Discovery.MDNS.Enabled',\n            get(config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get(options, 'config.Discovery.webRTCStar.Enabled',\n            get(config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: get(options, 'config.Bootstrap',\n            get(config, 'Bootstrap', []))\n        }\n      },\n      relay: {\n        enabled: get(options, 'relay.enabled',\n          get(config, 'relay.enabled', true)),\n        hop: {\n          enabled: get(options, 'relay.hop.enabled',\n            get(config, 'relay.hop.enabled', false)),\n          active: get(options, 'relay.hop.active',\n            get(config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        kBucketSize: get(options, 'dht.kBucketSize', 20),\n        // enabled: !get(options, 'offline', false), // disable if offline, on by default\n        enabled: false,\n        randomWalk: {\n          enabled: false // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      EXPERIMENTAL: {\n        pubsub: get(options, 'EXPERIMENTAL.pubsub', false)\n      }\n    },\n    connectionManager: get(options, 'connectionManager',\n      {\n        maxPeers: get(config, 'Swarm.ConnMgr.HighWater'),\n        minPeers: get(config, 'Swarm.ConnMgr.LowWater')\n      })\n  }\n\n  const libp2pOptions = mergeOptions(libp2pDefaults, get(options, 'libp2p', {}))\n  // Required inline to reduce startup time\n  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n  const Node = require('../runtime/libp2p-nodejs')\n  return new Node(libp2pOptions)\n}\n"]},"metadata":{},"sourceType":"script"}