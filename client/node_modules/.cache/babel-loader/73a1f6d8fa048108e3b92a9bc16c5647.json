{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar promisify = require('promisify-es6');\n\nvar isIpfs = require('is-ipfs');\n\nvar setImmediate = require('async/setImmediate');\n\nvar CID = require('cids');\n\nvar _require = require('../../utils/cid'),\n    cidToString = _require.cidToString;\n\nmodule.exports = function (self) {\n  return promisify( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, opts, cb) {\n      var split, cid, path, results, value, remainderPath, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (typeof opts === 'function') {\n                cb = opts;\n                opts = {};\n              }\n\n              opts = opts || {};\n\n              if (isIpfs.path(name)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setImmediate(function () {\n                return cb(new Error('invalid argument ' + name));\n              }));\n\n            case 4:\n              if (isIpfs.ipfsPath(name)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setImmediate(function () {\n                return cb(new Error('resolve non-IPFS names is not implemented'));\n              }));\n\n            case 6:\n              split = name.split('/'); // ['', 'ipfs', 'hash', ...path]\n\n              cid = new CID(split[2]);\n\n              if (!(split.length === 3)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setImmediate(function () {\n                return cb(null, \"/ipfs/\".concat(cidToString(cid, {\n                  base: opts.cidBase\n                })));\n              }));\n\n            case 10:\n              path = split.slice(3).join('/');\n              results = self._ipld.resolve(cid, path);\n              value = cid;\n              remainderPath = path;\n              _context.prev = 14;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 17;\n              _iterator = _asyncIterator(results);\n\n            case 19:\n              _context.next = 21;\n              return _iterator.next();\n\n            case 21:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 25;\n              return _step.value;\n\n            case 25:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 37;\n                break;\n              }\n\n              result = _value;\n\n              if (!(result.remainderPath === '')) {\n                _context.next = 32;\n                break;\n              }\n\n              // Use values from previous iteration if the value isn't a CID\n              if (CID.isCID(result.value)) {\n                value = result.value;\n                remainderPath = '';\n              }\n\n              if (result.value && CID.isCID(result.value.Hash)) {\n                value = result.value.Hash;\n                remainderPath = '';\n              }\n\n              return _context.abrupt(\"break\", 37);\n\n            case 32:\n              value = result.value;\n              remainderPath = result.remainderPath;\n\n            case 34:\n              _iteratorNormalCompletion = true;\n              _context.next = 19;\n              break;\n\n            case 37:\n              _context.next = 43;\n              break;\n\n            case 39:\n              _context.prev = 39;\n              _context.t0 = _context[\"catch\"](17);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 43:\n              _context.prev = 43;\n              _context.prev = 44;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 48;\n                break;\n              }\n\n              _context.next = 48;\n              return _iterator.return();\n\n            case 48:\n              _context.prev = 48;\n\n              if (!_didIteratorError) {\n                _context.next = 51;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 51:\n              return _context.finish(48);\n\n            case 52:\n              return _context.finish(43);\n\n            case 53:\n              _context.next = 58;\n              break;\n\n            case 55:\n              _context.prev = 55;\n              _context.t1 = _context[\"catch\"](14);\n              return _context.abrupt(\"return\", cb(_context.t1));\n\n            case 58:\n              return _context.abrupt(\"return\", cb(null, \"/ipfs/\".concat(cidToString(value, {\n                base: opts.cidBase\n              })).concat(remainderPath ? '/' + remainderPath : '')));\n\n            case 59:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[14, 55], [17, 39, 43, 53], [44,, 48, 52]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/resolve.js"],"names":["promisify","require","isIpfs","setImmediate","CID","cidToString","module","exports","self","name","opts","cb","path","Error","ipfsPath","split","cid","length","base","cidBase","slice","join","results","_ipld","resolve","value","remainderPath","result","isCID","Hash"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst isIpfs = require('is-ipfs')\nconst setImmediate = require('async/setImmediate')\nconst CID = require('cids')\nconst { cidToString } = require('../../utils/cid')\n\nmodule.exports = (self) => {\n  return promisify(async (name, opts, cb) => {\n    if (typeof opts === 'function') {\n      cb = opts\n      opts = {}\n    }\n\n    opts = opts || {}\n\n    if (!isIpfs.path(name)) {\n      return setImmediate(() => cb(new Error('invalid argument ' + name)))\n    }\n\n    // TODO remove this and update subsequent code when IPNS is implemented\n    if (!isIpfs.ipfsPath(name)) {\n      return setImmediate(() => cb(new Error('resolve non-IPFS names is not implemented')))\n    }\n\n    const split = name.split('/') // ['', 'ipfs', 'hash', ...path]\n    const cid = new CID(split[2])\n\n    if (split.length === 3) {\n      return setImmediate(() => cb(null, `/ipfs/${cidToString(cid, { base: opts.cidBase })}`))\n    }\n\n    const path = split.slice(3).join('/')\n\n    const results = self._ipld.resolve(cid, path)\n    let value = cid\n    let remainderPath = path\n    try {\n      for await (const result of results) {\n        if (result.remainderPath === '') {\n          // Use values from previous iteration if the value isn't a CID\n          if (CID.isCID(result.value)) {\n            value = result.value\n            remainderPath = ''\n          }\n\n          if (result.value && CID.isCID(result.value.Hash)) {\n            value = result.value.Hash\n            remainderPath = ''\n          }\n\n          break\n        }\n\n        value = result.value\n        remainderPath = result.remainderPath\n      }\n    } catch (error) {\n      return cb(error)\n    }\n    return cb(null, `/ipfs/${cidToString(value, { base: opts.cidBase })}${remainderPath ? '/' + remainderPath : ''}`)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}