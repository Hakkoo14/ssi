{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar toPullStream = require('async-iterator-to-pull-stream');\n\nvar errCode = require('err-code');\n\nvar pull = require('pull-stream/pull');\n\nvar map = require('pull-stream/throughs/map');\n\nvar _require = require('./utils'),\n    normalizePath = _require.normalizePath,\n    mapFile = _require.mapFile;\n\nmodule.exports = function (self) {\n  return function (ipfsPath, options) {\n    options = options || {};\n\n    if (options.preload !== false) {\n      var pathComponents;\n\n      try {\n        pathComponents = normalizePath(ipfsPath).split('/');\n      } catch (err) {\n        return pull.error(errCode(err, 'ERR_INVALID_PATH'));\n      }\n\n      self._preload(pathComponents[0]);\n    }\n\n    return pull(toPullStream.source(exporter.recursive(ipfsPath, self._ipld, options)), map(mapFile(_objectSpread(_objectSpread({}, options), {}, {\n      includeContent: true\n    }))));\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/files-regular/get-pull-stream.js"],"names":["exporter","require","toPullStream","errCode","pull","map","normalizePath","mapFile","module","exports","self","ipfsPath","options","preload","pathComponents","split","err","error","_preload","source","recursive","_ipld","includeContent"],"mappings":"AAAA;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAMI,GAAG,GAAGJ,OAAO,CAAC,0BAAD,CAAnB;;AACA,eAAmCA,OAAO,CAAC,SAAD,CAA1C;AAAA,IAAQK,aAAR,YAAQA,aAAR;AAAA,IAAuBC,OAAvB,YAAuBA,OAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,SAAO,UAACC,QAAD,EAAWC,OAAX,EAAuB;AAC5BA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAIA,OAAO,CAACC,OAAR,KAAoB,KAAxB,EAA+B;AAC7B,UAAIC,cAAJ;;AAEA,UAAI;AACFA,QAAAA,cAAc,GAAGR,aAAa,CAACK,QAAD,CAAb,CAAwBI,KAAxB,CAA8B,GAA9B,CAAjB;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAOZ,IAAI,CAACa,KAAL,CAAWd,OAAO,CAACa,GAAD,EAAM,kBAAN,CAAlB,CAAP;AACD;;AAEDN,MAAAA,IAAI,CAACQ,QAAL,CAAcJ,cAAc,CAAC,CAAD,CAA5B;AACD;;AAED,WAAOV,IAAI,CACTF,YAAY,CAACiB,MAAb,CAAoBnB,QAAQ,CAACoB,SAAT,CAAmBT,QAAnB,EAA6BD,IAAI,CAACW,KAAlC,EAAyCT,OAAzC,CAApB,CADS,EAETP,GAAG,CAACE,OAAO,iCACNK,OADM;AAETU,MAAAA,cAAc,EAAE;AAFP,OAAR,CAFM,CAAX;AAOD,GAtBD;AAuBD,CAxBD","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst errCode = require('err-code')\nconst pull = require('pull-stream/pull')\nconst map = require('pull-stream/throughs/map')\nconst { normalizePath, mapFile } = require('./utils')\n\nmodule.exports = function (self) {\n  return (ipfsPath, options) => {\n    options = options || {}\n\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizePath(ipfsPath).split('/')\n      } catch (err) {\n        return pull.error(errCode(err, 'ERR_INVALID_PATH'))\n      }\n\n      self._preload(pathComponents[0])\n    }\n\n    return pull(\n      toPullStream.source(exporter.recursive(ipfsPath, self._ipld, options)),\n      map(mapFile({\n        ...options,\n        includeContent: true\n      }))\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}