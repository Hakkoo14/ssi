{"ast":null,"code":"'use strict';\n\nvar mh = require('multihashes');\n\nvar mc = require('multicodec');\n\nvar persist = function persist(node, ipld, options) {\n  if (!options.codec && node.length) {\n    options.cidVersion = 1;\n    options.codec = 'raw';\n  }\n\n  if (isNaN(options.hashAlg)) {\n    options.hashAlg = mh.names[options.hashAlg];\n  }\n\n  if (options.hashAlg !== mh.names['sha2-256']) {\n    options.cidVersion = 1;\n  }\n\n  if (options.format) {\n    options.codec = options.format;\n  }\n\n  var format = mc[options.codec.toUpperCase().replace(/-/g, '_')];\n  return ipld.put(node, format, options);\n};\n\nmodule.exports = persist;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs-unixfs-importer/src/utils/persist.js"],"names":["mh","require","mc","persist","node","ipld","options","codec","length","cidVersion","isNaN","hashAlg","names","format","toUpperCase","replace","put","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,YAAD,CAAlB;;AAEA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAyB;AACvC,MAAI,CAACA,OAAO,CAACC,KAAT,IAAkBH,IAAI,CAACI,MAA3B,EAAmC;AACjCF,IAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACAH,IAAAA,OAAO,CAACC,KAAR,GAAgB,KAAhB;AACD;;AAED,MAAIG,KAAK,CAACJ,OAAO,CAACK,OAAT,CAAT,EAA4B;AAC1BL,IAAAA,OAAO,CAACK,OAAR,GAAkBX,EAAE,CAACY,KAAH,CAASN,OAAO,CAACK,OAAjB,CAAlB;AACD;;AAED,MAAIL,OAAO,CAACK,OAAR,KAAoBX,EAAE,CAACY,KAAH,CAAS,UAAT,CAAxB,EAA8C;AAC5CN,IAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACD;;AAED,MAAIH,OAAO,CAACO,MAAZ,EAAoB;AAClBP,IAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACO,MAAxB;AACD;;AAED,MAAMA,MAAM,GAAGX,EAAE,CAACI,OAAO,CAACC,KAAR,CAAcO,WAAd,GAA4BC,OAA5B,CAAoC,IAApC,EAA0C,GAA1C,CAAD,CAAjB;AAEA,SAAOV,IAAI,CAACW,GAAL,CAASZ,IAAT,EAAeS,MAAf,EAAuBP,OAAvB,CAAP;AACD,CArBD;;AAuBAW,MAAM,CAACC,OAAP,GAAiBf,OAAjB","sourcesContent":["'use strict'\n\nconst mh = require('multihashes')\nconst mc = require('multicodec')\n\nconst persist = (node, ipld, options) => {\n  if (!options.codec && node.length) {\n    options.cidVersion = 1\n    options.codec = 'raw'\n  }\n\n  if (isNaN(options.hashAlg)) {\n    options.hashAlg = mh.names[options.hashAlg]\n  }\n\n  if (options.hashAlg !== mh.names['sha2-256']) {\n    options.cidVersion = 1\n  }\n\n  if (options.format) {\n    options.codec = options.format\n  }\n\n  const format = mc[options.codec.toUpperCase().replace(/-/g, '_')]\n\n  return ipld.put(node, format, options)\n}\n\nmodule.exports = persist\n"]},"metadata":{},"sourceType":"script"}