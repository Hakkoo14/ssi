{"ast":null,"code":"'use strict';\n\nvar parallel = require('async/parallel');\n\nvar promisify = require('promisify-es6');\n\nmodule.exports = function (self) {\n  return promisify(function (callback) {\n    callback = callback || function noop() {};\n\n    self.log('stop');\n\n    if (self.state.state() === 'stopped') {\n      return callback(new Error('Already stopped'));\n    }\n\n    if (self.state.state() !== 'running') {\n      return callback(new Error('Not able to stop from state: ' + self.state.state()));\n    }\n\n    self.state.stop();\n\n    self._blockService.unsetExchange();\n\n    self._bitswap.stop();\n\n    self._preload.stop();\n\n    parallel([function (cb) {\n      return self._ipns.republisher.stop(cb);\n    }, function (cb) {\n      return self._mfsPreload.stop(cb);\n    }, function (cb) {\n      var libp2p = self.libp2p;\n      self.libp2p = null;\n      libp2p.stop(cb);\n    }], function (err) {\n      self._repo.close(function (closeErr) {\n        if (err || closeErr) {\n          self.emit('error', err || closeErr);\n          return callback(err || closeErr);\n        }\n\n        self.state.stopped();\n        self.emit('stop');\n        callback();\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/stop.js"],"names":["parallel","require","promisify","module","exports","self","callback","noop","log","state","Error","stop","_blockService","unsetExchange","_bitswap","_preload","cb","_ipns","republisher","_mfsPreload","libp2p","err","_repo","close","closeErr","emit","stopped"],"mappings":"AAAA;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOH,SAAS,CAAC,UAACI,QAAD,EAAc;AAC7BA,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,SAASC,IAAT,GAAiB,CAAE,CAA1C;;AAEAF,IAAAA,IAAI,CAACG,GAAL,CAAS,MAAT;;AAEA,QAAIH,IAAI,CAACI,KAAL,CAAWA,KAAX,OAAuB,SAA3B,EAAsC;AACpC,aAAOH,QAAQ,CAAC,IAAII,KAAJ,CAAU,iBAAV,CAAD,CAAf;AACD;;AAED,QAAIL,IAAI,CAACI,KAAL,CAAWA,KAAX,OAAuB,SAA3B,EAAsC;AACpC,aAAOH,QAAQ,CAAC,IAAII,KAAJ,CAAU,kCAAkCL,IAAI,CAACI,KAAL,CAAWA,KAAX,EAA5C,CAAD,CAAf;AACD;;AAEDJ,IAAAA,IAAI,CAACI,KAAL,CAAWE,IAAX;;AACAN,IAAAA,IAAI,CAACO,aAAL,CAAmBC,aAAnB;;AACAR,IAAAA,IAAI,CAACS,QAAL,CAAcH,IAAd;;AACAN,IAAAA,IAAI,CAACU,QAAL,CAAcJ,IAAd;;AAEAX,IAAAA,QAAQ,CAAC,CACP,UAAAgB,EAAE;AAAA,aAAIX,IAAI,CAACY,KAAL,CAAWC,WAAX,CAAuBP,IAAvB,CAA4BK,EAA5B,CAAJ;AAAA,KADK,EAEP,UAAAA,EAAE;AAAA,aAAIX,IAAI,CAACc,WAAL,CAAiBR,IAAjB,CAAsBK,EAAtB,CAAJ;AAAA,KAFK,EAGP,UAAAA,EAAE,EAAI;AACJ,UAAMI,MAAM,GAAGf,IAAI,CAACe,MAApB;AACAf,MAAAA,IAAI,CAACe,MAAL,GAAc,IAAd;AACAA,MAAAA,MAAM,CAACT,IAAP,CAAYK,EAAZ;AACD,KAPM,CAAD,EAQL,UAAAK,GAAG,EAAI;AACRhB,MAAAA,IAAI,CAACiB,KAAL,CAAWC,KAAX,CAAiB,UAAAC,QAAQ,EAAI;AAC3B,YAAIH,GAAG,IAAIG,QAAX,EAAqB;AACnBnB,UAAAA,IAAI,CAACoB,IAAL,CAAU,OAAV,EAAmBJ,GAAG,IAAIG,QAA1B;AACA,iBAAOlB,QAAQ,CAACe,GAAG,IAAIG,QAAR,CAAf;AACD;;AAEDnB,QAAAA,IAAI,CAACI,KAAL,CAAWiB,OAAX;AACArB,QAAAA,IAAI,CAACoB,IAAL,CAAU,MAAV;AACAnB,QAAAA,QAAQ;AACT,OATD;AAUD,KAnBO,CAAR;AAoBD,GAtCe,CAAhB;AAuCD,CAxCD","sourcesContent":["'use strict'\n\nconst parallel = require('async/parallel')\nconst promisify = require('promisify-es6')\n\nmodule.exports = (self) => {\n  return promisify((callback) => {\n    callback = callback || function noop () {}\n\n    self.log('stop')\n\n    if (self.state.state() === 'stopped') {\n      return callback(new Error('Already stopped'))\n    }\n\n    if (self.state.state() !== 'running') {\n      return callback(new Error('Not able to stop from state: ' + self.state.state()))\n    }\n\n    self.state.stop()\n    self._blockService.unsetExchange()\n    self._bitswap.stop()\n    self._preload.stop()\n\n    parallel([\n      cb => self._ipns.republisher.stop(cb),\n      cb => self._mfsPreload.stop(cb),\n      cb => {\n        const libp2p = self.libp2p\n        self.libp2p = null\n        libp2p.stop(cb)\n      }\n    ], err => {\n      self._repo.close(closeErr => {\n        if (err || closeErr) {\n          self.emit('error', err || closeErr)\n          return callback(err || closeErr)\n        }\n\n        self.state.stopped()\n        self.emit('stop')\n        callback()\n      })\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}