{"ast":null,"code":"'use strict';\n\nvar mortice = require('mortice');\n\nvar lock;\n\nmodule.exports = function (repoOwner) {\n  if (lock) {\n    return lock;\n  }\n\n  var mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  });\n  lock = {\n    readLock: function readLock(func) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return mutex.readLock(function () {\n          return func.apply(null, args);\n        });\n      };\n    },\n    writeLock: function writeLock(func) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return mutex.writeLock(function () {\n          return func.apply(null, args);\n        });\n      };\n    }\n  };\n  return lock;\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs-mfs/src/core/utils/create-lock.js"],"names":["mortice","require","lock","module","exports","repoOwner","mutex","singleProcess","readLock","func","args","apply","writeLock"],"mappings":"AAAA;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAIC,IAAJ;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,SAAD,EAAe;AAC9B,MAAIH,IAAJ,EAAU;AACR,WAAOA,IAAP;AACD;;AAED,MAAMI,KAAK,GAAGN,OAAO,CAAC;AACpB;AACA;AACA;AACAO,IAAAA,aAAa,EAAEF;AAJK,GAAD,CAArB;AAOAH,EAAAA,IAAI,GAAG;AACLM,IAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAU;AAClB,aAAO,YAAa;AAAA,0CAATC,IAAS;AAATA,UAAAA,IAAS;AAAA;;AAClB,eAAOJ,KAAK,CAACE,QAAN,CAAe,YAAM;AAC1B,iBAAOC,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBD,IAAjB,CAAP;AACD,SAFM,CAAP;AAGD,OAJD;AAKD,KAPI;AASLE,IAAAA,SAAS,EAAE,mBAACH,IAAD,EAAU;AACnB,aAAO,YAAa;AAAA,2CAATC,IAAS;AAATA,UAAAA,IAAS;AAAA;;AAClB,eAAOJ,KAAK,CAACM,SAAN,CAAgB,YAAM;AAC3B,iBAAOH,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBD,IAAjB,CAAP;AACD,SAFM,CAAP;AAGD,OAJD;AAKD;AAfI,GAAP;AAkBA,SAAOR,IAAP;AACD,CA/BD","sourcesContent":["'use strict'\n\nconst mortice = require('mortice')\n\nlet lock\n\nmodule.exports = (repoOwner) => {\n  if (lock) {\n    return lock\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  })\n\n  lock = {\n    readLock: (func) => {\n      return (...args) => {\n        return mutex.readLock(() => {\n          return func.apply(null, args)\n        })\n      }\n    },\n\n    writeLock: (func) => {\n      return (...args) => {\n        return mutex.writeLock(() => {\n          return func.apply(null, args)\n        })\n      }\n    }\n  }\n\n  return lock\n}\n"]},"metadata":{},"sourceType":"script"}