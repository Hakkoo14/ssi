{"ast":null,"code":"'use strict';\n\nvar defaultConfig = require('../runtime/config-nodejs.js');\n\nvar isMultiaddr = require('mafmt').IPFS.matches;\n\nvar promisify = require('promisify-es6');\n\nfunction isValidMultiaddr(ma) {\n  try {\n    return isMultiaddr(ma);\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction invalidMultiaddrError(ma) {\n  return new Error(\"\".concat(ma, \" is not a valid Multiaddr\"));\n}\n\nmodule.exports = function bootstrap(self) {\n  return {\n    list: promisify(function (callback) {\n      self._repo.config.get(function (err, config) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, {\n          Peers: config.Bootstrap\n        });\n      });\n    }),\n    add: promisify(function (multiaddr, args, callback) {\n      if (typeof args === 'function') {\n        callback = args;\n        args = {\n          default: false\n        };\n      }\n\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(function () {\n          return callback(invalidMultiaddrError(multiaddr));\n        });\n      }\n\n      self._repo.config.get(function (err, config) {\n        if (err) {\n          return callback(err);\n        }\n\n        if (args.default) {\n          config.Bootstrap = defaultConfig().Bootstrap;\n        } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n          config.Bootstrap.push(multiaddr);\n        }\n\n        self._repo.config.set(config, function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, {\n            Peers: args.default ? defaultConfig().Bootstrap : [multiaddr]\n          });\n        });\n      });\n    }),\n    rm: promisify(function (multiaddr, args, callback) {\n      if (typeof args === 'function') {\n        callback = args;\n        args = {\n          all: false\n        };\n      }\n\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(function () {\n          return callback(invalidMultiaddrError(multiaddr));\n        });\n      }\n\n      self._repo.config.get(function (err, config) {\n        if (err) {\n          return callback(err);\n        }\n\n        if (args.all) {\n          config.Bootstrap = [];\n        } else {\n          config.Bootstrap = config.Bootstrap.filter(function (mh) {\n            return mh !== multiaddr;\n          });\n        }\n\n        self._repo.config.set(config, function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          var res = [];\n\n          if (!args.all && multiaddr) {\n            res.push(multiaddr);\n          }\n\n          callback(null, {\n            Peers: res\n          });\n        });\n      });\n    })\n  };\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/components/bootstrap.js"],"names":["defaultConfig","require","isMultiaddr","IPFS","matches","promisify","isValidMultiaddr","ma","err","invalidMultiaddrError","Error","module","exports","bootstrap","self","list","callback","_repo","config","get","Peers","Bootstrap","add","multiaddr","args","default","setImmediate","indexOf","push","set","rm","all","filter","mh","res"],"mappings":"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","sourcesContent":["'use strict'\n\nconst defaultConfig = require('../runtime/config-nodejs.js')\nconst isMultiaddr = require('mafmt').IPFS.matches\nconst promisify = require('promisify-es6')\n\nfunction isValidMultiaddr (ma) {\n  try {\n    return isMultiaddr(ma)\n  } catch (err) {\n    return false\n  }\n}\n\nfunction invalidMultiaddrError (ma) {\n  return new Error(`${ma} is not a valid Multiaddr`)\n}\n\nmodule.exports = function bootstrap (self) {\n  return {\n    list: promisify((callback) => {\n      self._repo.config.get((err, config) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, { Peers: config.Bootstrap })\n      })\n    }),\n    add: promisify((multiaddr, args, callback) => {\n      if (typeof args === 'function') {\n        callback = args\n        args = { default: false }\n      }\n\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(() => callback(invalidMultiaddrError(multiaddr)))\n      }\n\n      self._repo.config.get((err, config) => {\n        if (err) {\n          return callback(err)\n        }\n        if (args.default) {\n          config.Bootstrap = defaultConfig().Bootstrap\n        } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n          config.Bootstrap.push(multiaddr)\n        }\n        self._repo.config.set(config, (err) => {\n          if (err) {\n            return callback(err)\n          }\n\n          callback(null, {\n            Peers: args.default ? defaultConfig().Bootstrap : [multiaddr]\n          })\n        })\n      })\n    }),\n    rm: promisify((multiaddr, args, callback) => {\n      if (typeof args === 'function') {\n        callback = args\n        args = { all: false }\n      }\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(() => callback(invalidMultiaddrError(multiaddr)))\n      }\n\n      self._repo.config.get((err, config) => {\n        if (err) {\n          return callback(err)\n        }\n        if (args.all) {\n          config.Bootstrap = []\n        } else {\n          config.Bootstrap = config.Bootstrap.filter((mh) => mh !== multiaddr)\n        }\n\n        self._repo.config.set(config, (err) => {\n          if (err) {\n            return callback(err)\n          }\n\n          const res = []\n          if (!args.all && multiaddr) {\n            res.push(multiaddr)\n          }\n\n          callback(null, { Peers: res })\n        })\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}