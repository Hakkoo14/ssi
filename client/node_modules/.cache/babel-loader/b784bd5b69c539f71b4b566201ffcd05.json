{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.typical = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\n   * Isomorphic, functional type-checking for Javascript.\n   * @module typical\n   * @typicalname t\n   * @example\n   * const t = require('typical')\n   * const allDefined = array.every(t.isDefined)\n   */\n\n  /**\n   * Returns true if input is a number. It is a more reasonable alternative to `typeof n` which returns `number` for `NaN` and `Infinity`.\n   *\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * > t.isNumber(0)\n   * true\n   * > t.isNumber(1)\n   * true\n   * > t.isNumber(1.1)\n   * true\n   * > t.isNumber(0xff)\n   * true\n   * > t.isNumber(0644)\n   * true\n   * > t.isNumber(6.2e5)\n   * true\n   * > t.isNumber(NaN)\n   * false\n   * > t.isNumber(Infinity)\n   * false\n   */\n\n  function isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  /**\n   * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.\n   *\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * > t.isPlainObject({ something: 'one' })\n   * true\n   * > t.isPlainObject(new Date())\n   * false\n   * > t.isPlainObject([ 0, 1 ])\n   * false\n   * > t.isPlainObject(/test/)\n   * false\n   * > t.isPlainObject(1)\n   * false\n   * > t.isPlainObject('one')\n   * false\n   * > t.isPlainObject(null)\n   * false\n   * > t.isPlainObject((function * () {})())\n   * false\n   * > t.isPlainObject(function * () {})\n   * false\n   */\n\n\n  function isPlainObject(input) {\n    return input !== null && typeof input === 'object' && input.constructor === Object;\n  }\n  /**\n   * An array-like value has all the properties of an array yet is not an array instance. An example is the `arguments` object. Returns `true`` if the input value is an object, not `null`` and has a `length` property set with a numeric value.\n   *\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * function sum(x, y){\n   *   console.log(t.isArrayLike(arguments))\n   *   // prints `true`\n   * }\n   */\n\n\n  function isArrayLike(input) {\n    return isObject(input) && typeof input.length === 'number';\n  }\n  /**\n   * Returns true if the typeof input is `'object'` but not null.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isObject(input) {\n    return typeof input === 'object' && input !== null;\n  }\n  /**\n   * Returns true if the input value is defined.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isDefined(input) {\n    return typeof input !== 'undefined';\n  }\n  /**\n   * Returns true if the input value is undefined.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isUndefined(input) {\n    return !isDefined(input);\n  }\n  /**\n   * Returns true if the input value is null.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isNull(input) {\n    return input === null;\n  }\n  /**\n   * Returns true if the input value is both defined and not null.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isDefinedValue(input) {\n    return isDefined(input) && !isNull(input) && !Number.isNaN(input);\n  }\n  /**\n   * Returns true if the input value is an ES2015 `class`.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isClass(input) {\n    if (typeof input === 'function') {\n      return /^class /.test(Function.prototype.toString.call(input));\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Returns true if the input is a string, number, symbol, boolean, null or undefined value.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isPrimitive(input) {\n    if (input === null) return true;\n\n    switch (typeof input) {\n      case 'string':\n      case 'number':\n      case 'symbol':\n      case 'undefined':\n      case 'boolean':\n        return true;\n\n      default:\n        return false;\n    }\n  }\n  /**\n   * Returns true if the input is a Promise.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isPromise(input) {\n    if (input) {\n      var _isPromise = isDefined(Promise) && input instanceof Promise;\n\n      var isThenable = input.then && typeof input.then === 'function';\n      return !!(_isPromise || isThenable);\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * > t.isIterable('string')\n   * true\n   * > t.isIterable(new Map())\n   * true\n   * > t.isIterable([])\n   * true\n   * > t.isIterable((function * () {})())\n   * true\n   * > t.isIterable(Promise.resolve())\n   * false\n   * > t.isIterable(Promise)\n   * false\n   * > t.isIterable(true)\n   * false\n   * > t.isIterable({})\n   * false\n   * > t.isIterable(0)\n   * false\n   * > t.isIterable(1.1)\n   * false\n   * > t.isIterable(NaN)\n   * false\n   * > t.isIterable(Infinity)\n   * false\n   * > t.isIterable(function () {})\n   * false\n   * > t.isIterable(Date)\n   * false\n   * > t.isIterable()\n   * false\n   * > t.isIterable({ then: function () {} })\n   * false\n   */\n\n\n  function isIterable(input) {\n    if (input === null || !isDefined(input)) {\n      return false;\n    } else {\n      return typeof input[Symbol.iterator] === 'function' || typeof input[Symbol.asyncIterator] === 'function';\n    }\n  }\n  /**\n   * Returns true if the input value is a string. The equivalent of `typeof input === 'string'` for use in funcitonal contexts.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isString(input) {\n    return typeof input === 'string';\n  }\n  /**\n   * Returns true if the input value is a function. The equivalent of `typeof input === 'function'` for use in funcitonal contexts.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n\n\n  function isFunction(input) {\n    return typeof input === 'function';\n  }\n\n  var index = {\n    isNumber: isNumber,\n    isPlainObject: isPlainObject,\n    isArrayLike: isArrayLike,\n    isObject: isObject,\n    isDefined: isDefined,\n    isUndefined: isUndefined,\n    isNull: isNull,\n    isDefinedValue: isDefinedValue,\n    isClass: isClass,\n    isPrimitive: isPrimitive,\n    isPromise: isPromise,\n    isIterable: isIterable,\n    isString: isString,\n    isFunction: isFunction\n  };\n  exports.default = index;\n  exports.isArrayLike = isArrayLike;\n  exports.isClass = isClass;\n  exports.isDefined = isDefined;\n  exports.isDefinedValue = isDefinedValue;\n  exports.isFunction = isFunction;\n  exports.isIterable = isIterable;\n  exports.isNull = isNull;\n  exports.isNumber = isNumber;\n  exports.isObject = isObject;\n  exports.isPlainObject = isPlainObject;\n  exports.isPrimitive = isPrimitive;\n  exports.isPromise = isPromise;\n  exports.isString = isString;\n  exports.isUndefined = isUndefined;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/typical/dist/index.js"],"names":["global","factory","exports","module","define","amd","self","typical","isNumber","n","isNaN","parseFloat","isFinite","isPlainObject","input","constructor","Object","isArrayLike","isObject","length","isDefined","isUndefined","isNull","isDefinedValue","Number","isClass","test","Function","prototype","toString","call","isPrimitive","isPromise","Promise","isThenable","then","isIterable","Symbol","iterator","asyncIterator","isString","isFunction","index","default","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.typical = {}));\n}(this, function (exports) { 'use strict';\n\n  /**\n   * Isomorphic, functional type-checking for Javascript.\n   * @module typical\n   * @typicalname t\n   * @example\n   * const t = require('typical')\n   * const allDefined = array.every(t.isDefined)\n   */\n\n  /**\n   * Returns true if input is a number. It is a more reasonable alternative to `typeof n` which returns `number` for `NaN` and `Infinity`.\n   *\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * > t.isNumber(0)\n   * true\n   * > t.isNumber(1)\n   * true\n   * > t.isNumber(1.1)\n   * true\n   * > t.isNumber(0xff)\n   * true\n   * > t.isNumber(0644)\n   * true\n   * > t.isNumber(6.2e5)\n   * true\n   * > t.isNumber(NaN)\n   * false\n   * > t.isNumber(Infinity)\n   * false\n   */\n  function isNumber (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n)\n  }\n\n  /**\n   * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.\n   *\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * > t.isPlainObject({ something: 'one' })\n   * true\n   * > t.isPlainObject(new Date())\n   * false\n   * > t.isPlainObject([ 0, 1 ])\n   * false\n   * > t.isPlainObject(/test/)\n   * false\n   * > t.isPlainObject(1)\n   * false\n   * > t.isPlainObject('one')\n   * false\n   * > t.isPlainObject(null)\n   * false\n   * > t.isPlainObject((function * () {})())\n   * false\n   * > t.isPlainObject(function * () {})\n   * false\n   */\n  function isPlainObject (input) {\n    return input !== null && typeof input === 'object' && input.constructor === Object\n  }\n\n  /**\n   * An array-like value has all the properties of an array yet is not an array instance. An example is the `arguments` object. Returns `true`` if the input value is an object, not `null`` and has a `length` property set with a numeric value.\n   *\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * function sum(x, y){\n   *   console.log(t.isArrayLike(arguments))\n   *   // prints `true`\n   * }\n   */\n  function isArrayLike (input) {\n    return isObject(input) && typeof input.length === 'number'\n  }\n\n  /**\n   * Returns true if the typeof input is `'object'` but not null.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isObject (input) {\n    return typeof input === 'object' && input !== null\n  }\n\n  /**\n   * Returns true if the input value is defined.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isDefined (input) {\n    return typeof input !== 'undefined'\n  }\n\n  /**\n   * Returns true if the input value is undefined.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isUndefined (input) {\n    return !isDefined(input)\n  }\n\n  /**\n   * Returns true if the input value is null.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isNull (input) {\n   return input === null\n  }\n\n  /**\n   * Returns true if the input value is both defined and not null.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isDefinedValue (input) {\n   return isDefined(input) && !isNull(input) && !Number.isNaN(input)\n  }\n\n  /**\n   * Returns true if the input value is an ES2015 `class`.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isClass (input) {\n    if (typeof input === 'function') {\n      return /^class /.test(Function.prototype.toString.call(input))\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Returns true if the input is a string, number, symbol, boolean, null or undefined value.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isPrimitive (input) {\n    if (input === null) return true\n    switch (typeof input) {\n      case 'string':\n      case 'number':\n      case 'symbol':\n      case 'undefined':\n      case 'boolean':\n        return true\n      default:\n        return false\n    }\n  }\n\n  /**\n   * Returns true if the input is a Promise.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isPromise (input) {\n    if (input) {\n      const isPromise = isDefined(Promise) && input instanceof Promise;\n      const isThenable = input.then && typeof input.then === 'function';\n      return !!(isPromise || isThenable)\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   * @example\n   * > t.isIterable('string')\n   * true\n   * > t.isIterable(new Map())\n   * true\n   * > t.isIterable([])\n   * true\n   * > t.isIterable((function * () {})())\n   * true\n   * > t.isIterable(Promise.resolve())\n   * false\n   * > t.isIterable(Promise)\n   * false\n   * > t.isIterable(true)\n   * false\n   * > t.isIterable({})\n   * false\n   * > t.isIterable(0)\n   * false\n   * > t.isIterable(1.1)\n   * false\n   * > t.isIterable(NaN)\n   * false\n   * > t.isIterable(Infinity)\n   * false\n   * > t.isIterable(function () {})\n   * false\n   * > t.isIterable(Date)\n   * false\n   * > t.isIterable()\n   * false\n   * > t.isIterable({ then: function () {} })\n   * false\n   */\n  function isIterable (input) {\n    if (input === null || !isDefined(input)) {\n      return false\n    } else {\n      return (\n        typeof input[Symbol.iterator] === 'function' ||\n        typeof input[Symbol.asyncIterator] === 'function'\n      )\n    }\n  }\n\n  /**\n   * Returns true if the input value is a string. The equivalent of `typeof input === 'string'` for use in funcitonal contexts.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isString (input) {\n    return typeof input === 'string'\n  }\n\n  /**\n   * Returns true if the input value is a function. The equivalent of `typeof input === 'function'` for use in funcitonal contexts.\n   * @param {*} - the input to test\n   * @returns {boolean}\n   * @static\n   */\n  function isFunction (input) {\n    return typeof input === 'function'\n  }\n\n  var index = {\n    isNumber,\n    isPlainObject,\n    isArrayLike,\n    isObject,\n    isDefined,\n    isUndefined,\n    isNull,\n    isDefinedValue,\n    isClass,\n    isPrimitive,\n    isPromise,\n    isIterable,\n    isString,\n    isFunction\n  };\n\n  exports.default = index;\n  exports.isArrayLike = isArrayLike;\n  exports.isClass = isClass;\n  exports.isDefined = isDefined;\n  exports.isDefinedValue = isDefinedValue;\n  exports.isFunction = isFunction;\n  exports.isIterable = isIterable;\n  exports.isNull = isNull;\n  exports.isNumber = isNumber;\n  exports.isObject = isObject;\n  exports.isPlainObject = isPlainObject;\n  exports.isPrimitive = isPrimitive;\n  exports.isPromise = isPromise;\n  exports.isString = isString;\n  exports.isUndefined = isUndefined;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]},"metadata":{},"sourceType":"script"}