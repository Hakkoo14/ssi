{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar nextTick = require('async/nextTick');\n\nvar Message = require('../types/message');\n\nvar Wantlist = require('../types/wantlist');\n\nvar CONSTANTS = require('../constants');\n\nvar MsgQueue = require('./msg-queue');\n\nvar logger = require('../utils').logger;\n\nmodule.exports = /*#__PURE__*/function () {\n  function WantManager(peerId, network, stats) {\n    _classCallCheck(this, WantManager);\n\n    this.peers = new Map();\n    this.wantlist = new Wantlist(stats);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n\n  _createClass(WantManager, [{\n    key: \"_addEntries\",\n    value: function _addEntries(cids, cancel, force) {\n      var _this = this;\n\n      var entries = cids.map(function (cid, i) {\n        return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, cancel);\n      });\n      entries.forEach(function (e) {\n        // add changes to our wantlist\n        if (e.cancel) {\n          if (force) {\n            _this.wantlist.removeForce(e.cid);\n          } else {\n            _this.wantlist.remove(e.cid);\n          }\n        } else {\n          _this._log('adding to wl');\n\n          _this.wantlist.add(e.cid, e.priority);\n        }\n      }); // broadcast changes\n\n      var _iterator = _createForOfIteratorHelper(this.peers.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          p.addEntries(entries);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_startPeerHandler\",\n    value: function _startPeerHandler(peerId) {\n      var mq = this.peers.get(peerId.toB58String());\n\n      if (mq) {\n        mq.refcnt++;\n        return;\n      }\n\n      mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist\n\n      var fullwantlist = new Message(true);\n\n      var _iterator2 = _createForOfIteratorHelper(this.wantlist.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var entry = _step2.value;\n          fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      mq.addMessage(fullwantlist);\n      this.peers.set(peerId.toB58String(), mq);\n      return mq;\n    }\n  }, {\n    key: \"_stopPeerHandler\",\n    value: function _stopPeerHandler(peerId) {\n      var mq = this.peers.get(peerId.toB58String());\n\n      if (!mq) {\n        return;\n      }\n\n      mq.refcnt--;\n\n      if (mq.refcnt > 0) {\n        return;\n      }\n\n      this.peers.delete(peerId.toB58String());\n    } // add all the cids to the wantlist\n\n  }, {\n    key: \"wantBlocks\",\n    value: function wantBlocks(cids) {\n      this._addEntries(cids, false);\n    } // remove blocks of all the given keys without respecting refcounts\n\n  }, {\n    key: \"unwantBlocks\",\n    value: function unwantBlocks(cids) {\n      this._log('unwant blocks: %s', cids.length);\n\n      this._addEntries(cids, true, true);\n    } // cancel wanting all of the given keys\n\n  }, {\n    key: \"cancelWants\",\n    value: function cancelWants(cids) {\n      this._log('cancel wants: %s', cids.length);\n\n      this._addEntries(cids, true);\n    } // Returns a list of all currently connected peers\n\n  }, {\n    key: \"connectedPeers\",\n    value: function connectedPeers() {\n      return Array.from(this.peers.keys());\n    }\n  }, {\n    key: \"connected\",\n    value: function connected(peerId) {\n      this._startPeerHandler(peerId);\n    }\n  }, {\n    key: \"disconnected\",\n    value: function disconnected(peerId) {\n      this._stopPeerHandler(peerId);\n    }\n  }, {\n    key: \"start\",\n    value: function start(callback) {\n      var _this2 = this;\n\n      // resend entire wantlist every so often\n      this.timer = setInterval(function () {\n        _this2._log('resend full-wantlist');\n\n        var fullwantlist = new Message(true);\n\n        _this2.wantlist.forEach(function (entry) {\n          fullwantlist.addEntry(entry.cid, entry.priority);\n        });\n\n        _this2.peers.forEach(function (p) {\n          return p.addMessage(fullwantlist);\n        });\n      }, 60 * 1000);\n      nextTick(function () {\n        return callback();\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(callback) {\n      var _this3 = this;\n\n      this.peers.forEach(function (mq) {\n        return _this3.disconnected(mq.peerId);\n      });\n      clearInterval(this.timer);\n      nextTick(function () {\n        return callback();\n      });\n    }\n  }]);\n\n  return WantManager;\n}();","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs-bitswap/src/want-manager/index.js"],"names":["nextTick","require","Message","Wantlist","CONSTANTS","MsgQueue","logger","module","exports","peerId","network","stats","peers","Map","wantlist","_stats","_peerId","_log","cids","cancel","force","entries","map","cid","i","Entry","kMaxPriority","forEach","e","removeForce","remove","add","priority","values","p","addEntries","mq","get","toB58String","refcnt","fullwantlist","entry","addEntry","addMessage","set","delete","_addEntries","length","Array","from","keys","_startPeerHandler","_stopPeerHandler","callback","timer","setInterval","disconnected","clearInterval"],"mappings":"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","sourcesContent":["'use strict'\n\nconst nextTick = require('async/nextTick')\nconst Message = require('../types/message')\nconst Wantlist = require('../types/wantlist')\nconst CONSTANTS = require('../constants')\nconst MsgQueue = require('./msg-queue')\nconst logger = require('../utils').logger\n\nmodule.exports = class WantManager {\n  constructor (peerId, network, stats) {\n    this.peers = new Map()\n    this.wantlist = new Wantlist(stats)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid)\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (let p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toB58String())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (let entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toB58String(), mq)\n    return mq\n  }\n\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toB58String())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toB58String())\n  }\n\n  // add all the cids to the wantlist\n  wantBlocks (cids) {\n    this._addEntries(cids, false)\n  }\n\n  // remove blocks of all the given keys without respecting refcounts\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  // cancel wanting all of the given keys\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  // Returns a list of all currently connected peers\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start (callback) {\n    // resend entire wantlist every so often\n    this.timer = setInterval(() => {\n      this._log('resend full-wantlist')\n      const fullwantlist = new Message(true)\n      this.wantlist.forEach((entry) => {\n        fullwantlist.addEntry(entry.cid, entry.priority)\n      })\n\n      this.peers.forEach((p) => p.addMessage(fullwantlist))\n    }, 60 * 1000)\n\n    nextTick(() => callback())\n  }\n\n  stop (callback) {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n\n    clearInterval(this.timer)\n    nextTick(() => callback())\n  }\n}\n"]},"metadata":{},"sourceType":"script"}