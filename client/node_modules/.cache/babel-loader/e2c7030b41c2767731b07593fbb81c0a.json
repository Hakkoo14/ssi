{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar connect = require('pull-ws/client');\n\nvar mafmt = require('mafmt');\n\nvar withIs = require('class-is');\n\nvar Connection = require('interface-connection').Connection;\n\nvar toUri = require('multiaddr-to-uri');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:websockets:dialer');\n\nvar _createListener = require('./listener');\n\nvar WebSockets = /*#__PURE__*/function () {\n  function WebSockets() {\n    _classCallCheck(this, WebSockets);\n  }\n\n  _createClass(WebSockets, [{\n    key: \"dial\",\n    value: function dial(ma, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      callback = callback || function () {};\n\n      var url = toUri(ma);\n      log('dialing %s', url);\n      var socket = connect(url, {\n        binary: true,\n        onConnect: function onConnect(err) {\n          callback(err);\n        }\n      });\n      var conn = new Connection(socket);\n\n      conn.getObservedAddrs = function (cb) {\n        return cb(null, [ma]);\n      };\n\n      conn.close = function (cb) {\n        return socket.close(cb);\n      };\n\n      return conn;\n    }\n  }, {\n    key: \"createListener\",\n    value: function createListener(options, handler) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n\n      return _createListener(options, handler);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      if (!Array.isArray(multiaddrs)) {\n        multiaddrs = [multiaddrs];\n      }\n\n      return multiaddrs.filter(function (ma) {\n        if (ma.protoNames().includes('p2p-circuit')) {\n          return false;\n        }\n\n        if (typeof ma.decapsulateCode === 'function') {\n          ma = ma.decapsulateCode(421); // multiaddr 7\n        } else if (ma.protoNames().includes('ipfs')) {\n          ma = ma.decapsulate('ipfs');\n        }\n\n        return mafmt.WebSockets.matches(ma) || mafmt.WebSocketsSecure.matches(ma);\n      });\n    }\n  }]);\n\n  return WebSockets;\n}();\n\nmodule.exports = withIs(WebSockets, {\n  className: 'WebSockets',\n  symbolName: '@libp2p/js-libp2p-websockets/websockets'\n});","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/libp2p-websockets/src/index.js"],"names":["connect","require","mafmt","withIs","Connection","toUri","debug","log","createListener","WebSockets","ma","options","callback","url","socket","binary","onConnect","err","conn","getObservedAddrs","cb","close","handler","multiaddrs","Array","isArray","filter","protoNames","includes","decapsulateCode","decapsulate","matches","WebSocketsSecure","module","exports","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst connect = require('pull-ws/client')\nconst mafmt = require('mafmt')\nconst withIs = require('class-is')\nconst Connection = require('interface-connection').Connection\n\nconst toUri = require('multiaddr-to-uri')\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:dialer')\n\nconst createListener = require('./listener')\n\nclass WebSockets {\n  dial (ma, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    callback = callback || function () { }\n\n    const url = toUri(ma)\n    log('dialing %s', url)\n    const socket = connect(url, {\n      binary: true,\n      onConnect: (err) => {\n        callback(err)\n      }\n    })\n\n    const conn = new Connection(socket)\n    conn.getObservedAddrs = (cb) => cb(null, [ma])\n    conn.close = (cb) => socket.close(cb)\n\n    return conn\n  }\n\n  createListener (options, handler) {\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    return createListener(options, handler)\n  }\n\n  filter (multiaddrs) {\n    if (!Array.isArray(multiaddrs)) {\n      multiaddrs = [multiaddrs]\n    }\n\n    return multiaddrs.filter((ma) => {\n      if (ma.protoNames().includes('p2p-circuit')) {\n        return false\n      }\n\n      if (typeof ma.decapsulateCode === 'function') {\n        ma = ma.decapsulateCode(421) // multiaddr 7\n      } else if (ma.protoNames().includes('ipfs')) {\n        ma = ma.decapsulate('ipfs')\n      }\n\n      return mafmt.WebSockets.matches(ma) ||\n        mafmt.WebSocketsSecure.matches(ma)\n    })\n  }\n}\n\nmodule.exports = withIs(WebSockets, { className: 'WebSockets', symbolName: '@libp2p/js-libp2p-websockets/websockets' })\n"]},"metadata":{},"sourceType":"script"}