{"ast":null,"code":"'use strict';\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar multiaddr = require('multiaddr');\n/**\n * Helper method to check the data type of peer and convert it to PeerInfo\n *\n * @param {PeerInfo|Multiaddr|PeerId} peer\n * @param {PeerBook} peerBook\n * @throws {InvalidPeerType}\n * @returns {PeerInfo}\n */\n\n\nfunction getPeerInfo(peer, peerBook) {\n  var peerInfo; // Already a PeerInfo instance,\n  // add to the peer book and return the latest value\n\n  if (PeerInfo.isPeerInfo(peer)) {\n    return peerBook.put(peer);\n  } // Attempt to convert from Multiaddr instance (not string)\n\n\n  if (multiaddr.isMultiaddr(peer)) {\n    var peerIdB58Str = peer.getPeerId();\n\n    try {\n      peerInfo = peerBook.get(peerIdB58Str);\n    } catch (err) {\n      peerInfo = new PeerInfo(PeerId.createFromB58String(peerIdB58Str));\n    }\n\n    peerInfo.multiaddrs.add(peer);\n    return peerInfo;\n  } // Attempt to convert from PeerId\n\n\n  if (PeerId.isPeerId(peer)) {\n    var _peerIdB58Str = peer.toB58String();\n\n    try {\n      return peerBook.get(_peerIdB58Str);\n    } catch (err) {\n      throw new Error(\"Couldnt get PeerInfo for \".concat(_peerIdB58Str));\n    }\n  }\n\n  throw new Error('peer type not recognized');\n}\n\nmodule.exports = getPeerInfo;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p-switch/src/get-peer-info.js"],"names":["PeerId","require","PeerInfo","multiaddr","getPeerInfo","peer","peerBook","peerInfo","isPeerInfo","put","isMultiaddr","peerIdB58Str","getPeerId","get","err","createFromB58String","multiaddrs","add","isPeerId","toB58String","Error","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AACpC,MAAIC,QAAJ,CADoC,CAGpC;AACA;;AACA,MAAIL,QAAQ,CAACM,UAAT,CAAoBH,IAApB,CAAJ,EAA+B;AAC7B,WAAOC,QAAQ,CAACG,GAAT,CAAaJ,IAAb,CAAP;AACD,GAPmC,CASpC;;;AACA,MAAIF,SAAS,CAACO,WAAV,CAAsBL,IAAtB,CAAJ,EAAiC;AAC/B,QAAMM,YAAY,GAAGN,IAAI,CAACO,SAAL,EAArB;;AACA,QAAI;AACFL,MAAAA,QAAQ,GAAGD,QAAQ,CAACO,GAAT,CAAaF,YAAb,CAAX;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZP,MAAAA,QAAQ,GAAG,IAAIL,QAAJ,CAAaF,MAAM,CAACe,mBAAP,CAA2BJ,YAA3B,CAAb,CAAX;AACD;;AACDJ,IAAAA,QAAQ,CAACS,UAAT,CAAoBC,GAApB,CAAwBZ,IAAxB;AACA,WAAOE,QAAP;AACD,GAnBmC,CAqBpC;;;AACA,MAAIP,MAAM,CAACkB,QAAP,CAAgBb,IAAhB,CAAJ,EAA2B;AACzB,QAAMM,aAAY,GAAGN,IAAI,CAACc,WAAL,EAArB;;AACA,QAAI;AACF,aAAOb,QAAQ,CAACO,GAAT,CAAaF,aAAb,CAAP;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,YAAM,IAAIM,KAAJ,oCAAsCT,aAAtC,EAAN;AACD;AACF;;AAED,QAAM,IAAIS,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBlB,WAAjB","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst multiaddr = require('multiaddr')\n\n/**\n * Helper method to check the data type of peer and convert it to PeerInfo\n *\n * @param {PeerInfo|Multiaddr|PeerId} peer\n * @param {PeerBook} peerBook\n * @throws {InvalidPeerType}\n * @returns {PeerInfo}\n */\nfunction getPeerInfo (peer, peerBook) {\n  let peerInfo\n\n  // Already a PeerInfo instance,\n  // add to the peer book and return the latest value\n  if (PeerInfo.isPeerInfo(peer)) {\n    return peerBook.put(peer)\n  }\n\n  // Attempt to convert from Multiaddr instance (not string)\n  if (multiaddr.isMultiaddr(peer)) {\n    const peerIdB58Str = peer.getPeerId()\n    try {\n      peerInfo = peerBook.get(peerIdB58Str)\n    } catch (err) {\n      peerInfo = new PeerInfo(PeerId.createFromB58String(peerIdB58Str))\n    }\n    peerInfo.multiaddrs.add(peer)\n    return peerInfo\n  }\n\n  // Attempt to convert from PeerId\n  if (PeerId.isPeerId(peer)) {\n    const peerIdB58Str = peer.toB58String()\n    try {\n      return peerBook.get(peerIdB58Str)\n    } catch (err) {\n      throw new Error(`Couldnt get PeerInfo for ${peerIdB58Str}`)\n    }\n  }\n\n  throw new Error('peer type not recognized')\n}\n\nmodule.exports = getPeerInfo\n"]},"metadata":{},"sourceType":"script"}