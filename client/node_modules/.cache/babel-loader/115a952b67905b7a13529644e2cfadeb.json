{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar pull = require('pull-stream/pull');\n\nmodule.exports = function (source) {\n  return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _read, sink, _yield$_awaitAsyncGen, end, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sink = function sink(read) {\n              _read = function _read() {\n                return new Promise(function (resolve, reject) {\n                  read(null, function (end, data) {\n                    if (end === true) return resolve({\n                      end: end\n                    });\n                    if (end) return reject(end);\n                    resolve({\n                      data: data\n                    });\n                  });\n                });\n              };\n            };\n\n            pull(source, sink);\n\n          case 2:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 5;\n            return _awaitAsyncGenerator(_read());\n\n          case 5:\n            _yield$_awaitAsyncGen = _context.sent;\n            end = _yield$_awaitAsyncGen.end;\n            data = _yield$_awaitAsyncGen.data;\n\n            if (!end) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 14);\n\n          case 10:\n            _context.next = 12;\n            return data;\n\n          case 12:\n            _context.next = 2;\n            break;\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))();\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/pull-stream-to-async-iterator/index.js"],"names":["pull","require","module","exports","source","sink","read","_read","Promise","resolve","reject","end","data"],"mappings":";;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAAC,MAAM,EAAI;AACzB,SAAO,2DAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGAC,YAAAA,IAHA,GAGO,SAAPA,IAAO,CAAAC,IAAI,EAAI;AACnBC,cAAAA,KAAK,GAAG;AAAA,uBAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CJ,kBAAAA,IAAI,CAAC,IAAD,EAAO,UAACK,GAAD,EAAMC,IAAN,EAAe;AACxB,wBAAID,GAAG,KAAK,IAAZ,EAAkB,OAAOF,OAAO,CAAC;AAAEE,sBAAAA,GAAG,EAAHA;AAAF,qBAAD,CAAd;AAClB,wBAAIA,GAAJ,EAAS,OAAOD,MAAM,CAACC,GAAD,CAAb;AACTF,oBAAAA,OAAO,CAAC;AAAEG,sBAAAA,IAAI,EAAJA;AAAF,qBAAD,CAAP;AACD,mBAJG,CAAJ;AAKD,iBANa,CAAN;AAAA,eAAR;AAOD,aAXK;;AAaNZ,YAAAA,IAAI,CAACI,MAAD,EAASC,IAAT,CAAJ;;AAbM;AAAA,iBAeC,IAfD;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAgBwBE,KAAK,EAhB7B;;AAAA;AAAA;AAgBII,YAAAA,GAhBJ,yBAgBIA,GAhBJ;AAgBSC,YAAAA,IAhBT,yBAgBSA,IAhBT;;AAAA,iBAiBAD,GAjBA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAkBJ,mBAAMC,IAAN;;AAlBI;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAAP;AAqBD,CAtBD","sourcesContent":["const pull = require('pull-stream/pull')\n\nmodule.exports = source => {\n  return (async function * () {\n    let _read\n\n    const sink = read => {\n      _read = () => new Promise((resolve, reject) => {\n        read(null, (end, data) => {\n          if (end === true) return resolve({ end })\n          if (end) return reject(end)\n          resolve({ data })\n        })\n      })\n    }\n\n    pull(source, sink)\n\n    while (true) {\n      const { end, data } = await _read()\n      if (end) break\n      yield data\n    }\n  })()\n}\n"]},"metadata":{},"sourceType":"script"}