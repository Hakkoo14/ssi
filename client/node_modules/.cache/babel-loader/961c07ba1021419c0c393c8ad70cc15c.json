{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errCode = require('err-code');\n\nvar updateTree = require('./utils/update-tree');\n\nvar updateMfsRoot = require('./utils/update-mfs-root');\n\nvar toSources = require('./utils/to-sources');\n\nvar removeLink = require('./utils/remove-link');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar toTrail = require('./utils/to-trail');\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar _require = require('./utils/constants'),\n    FILE_SEPARATOR = _require.FILE_SEPARATOR;\n\nvar defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  format: 'dag-pb',\n  flush: true\n};\n\nmodule.exports = function (context) {\n  return /*#__PURE__*/function () {\n    var _mfsRm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var args,\n          _yield$toSources,\n          sources,\n          options,\n          _iterator,\n          _step,\n          source,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              args = Array.from(_args);\n              _context.next = 3;\n              return toSources(context, args, defaultOptions);\n\n            case 3:\n              _yield$toSources = _context.sent;\n              sources = _yield$toSources.sources;\n              options = applyDefaultOptions(args, defaultOptions);\n\n              if (sources.length) {\n                _context.next = 8;\n                break;\n              }\n\n              throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');\n\n            case 8:\n              sources.forEach(function (source) {\n                if (source.path === FILE_SEPARATOR) {\n                  throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');\n                }\n              });\n              _iterator = _createForOfIteratorHelper(sources);\n              _context.prev = 10;\n\n              _iterator.s();\n\n            case 12:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 18;\n                break;\n              }\n\n              source = _step.value;\n              _context.next = 16;\n              return removePath(context, source.path, options);\n\n            case 16:\n              _context.next = 12;\n              break;\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](10);\n\n              _iterator.e(_context.t0);\n\n            case 23:\n              _context.prev = 23;\n\n              _iterator.f();\n\n              return _context.finish(23);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[10, 20, 23, 26]]);\n    }));\n\n    function mfsRm() {\n      return _mfsRm.apply(this, arguments);\n    }\n\n    return mfsRm;\n  }();\n};\n\nvar removePath = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context, path, options) {\n    var mfsPath, trail, child, parent, _yield$removeLink, cid, newRootCid;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return toMfsPath(context, path);\n\n          case 2:\n            mfsPath = _context2.sent;\n            _context2.next = 5;\n            return toTrail(context, mfsPath.mfsPath, options);\n\n          case 5:\n            trail = _context2.sent;\n            child = trail.pop();\n            parent = trail[trail.length - 1];\n\n            if (parent) {\n              _context2.next = 10;\n              break;\n            }\n\n            throw errCode(new Error(\"\".concat(path, \" does not exist\")), 'ERR_NOT_FOUND');\n\n          case 10:\n            if (!(child.type === 'directory' && !options.recursive)) {\n              _context2.next = 12;\n              break;\n            }\n\n            throw errCode(new Error(\"\".concat(path, \" is a directory, use -r to remove directories\")), 'ERR_WAS_DIR');\n\n          case 12:\n            _context2.next = 14;\n            return removeLink(context, {\n              parentCid: parent.cid,\n              name: child.name,\n              format: options.format,\n              hashAlg: options.hashAlg,\n              cidVersion: options.cidVersion,\n              flush: options.flush\n            });\n\n          case 14:\n            _yield$removeLink = _context2.sent;\n            cid = _yield$removeLink.cid;\n            parent.cid = cid; // update the tree with the new child\n\n            _context2.next = 19;\n            return updateTree(context, trail, options);\n\n          case 19:\n            newRootCid = _context2.sent;\n            _context2.next = 22;\n            return updateMfsRoot(context, newRootCid);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function removePath(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs-mfs/src/core/rm.js"],"names":["errCode","require","updateTree","updateMfsRoot","toSources","removeLink","toMfsPath","toTrail","applyDefaultOptions","FILE_SEPARATOR","defaultOptions","recursive","cidVersion","hashAlg","format","flush","module","exports","context","args","Array","from","sources","options","length","Error","forEach","source","path","removePath","mfsRm","mfsPath","trail","child","pop","parent","type","parentCid","cid","name","newRootCid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst toSources = require('./utils/to-sources')\nconst removeLink = require('./utils/remove-link')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst toTrail = require('./utils/to-trail')\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst {\n  FILE_SEPARATOR\n} = require('./utils/constants')\n\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  format: 'dag-pb',\n  flush: true\n}\n\nmodule.exports = (context) => {\n  return async function mfsRm () {\n    const args = Array.from(arguments)\n\n    const {\n      sources\n    } = await toSources(context, args, defaultOptions)\n    const options = applyDefaultOptions(args, defaultOptions)\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS')\n    }\n\n    sources.forEach(source => {\n      if (source.path === FILE_SEPARATOR) {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS')\n      }\n    })\n\n    for (const source of sources) {\n      await removePath(context, source.path, options)\n    }\n  }\n}\n\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path)\n  const trail = await toTrail(context, mfsPath.mfsPath, options)\n  const child = trail.pop()\n  const parent = trail[trail.length - 1]\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR')\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    format: options.format,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush\n  })\n\n  parent.cid = cid\n\n  // update the tree with the new child\n  const newRootCid = await updateTree(context, trail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid)\n}\n"]},"metadata":{},"sourceType":"script"}