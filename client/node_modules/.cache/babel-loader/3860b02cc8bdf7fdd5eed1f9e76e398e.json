{"ast":null,"code":"'use strict';\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar multiaddr = require('multiaddr');\n\nvar errCode = require('err-code');\n\nmodule.exports = function (node) {\n  /*\n   * Helper method to check the data type of peer and convert it to PeerInfo\n   */\n  return function (peer, callback) {\n    var p; // PeerInfo\n\n    if (PeerInfo.isPeerInfo(peer)) {\n      p = peer; // Multiaddr instance or Multiaddr String\n    } else if (multiaddr.isMultiaddr(peer) || typeof peer === 'string') {\n      if (typeof peer === 'string') {\n        try {\n          peer = multiaddr(peer);\n        } catch (err) {\n          return callback(errCode(err, 'ERR_INVALID_MULTIADDR'));\n        }\n      }\n\n      var peerIdB58Str = peer.getPeerId();\n\n      if (!peerIdB58Str) {\n        return callback(errCode(new Error('peer multiaddr instance or string must include peerId'), 'ERR_INVALID_MULTIADDR'));\n      }\n\n      try {\n        p = node.peerBook.get(peerIdB58Str);\n      } catch (err) {\n        p = new PeerInfo(PeerId.createFromB58String(peerIdB58Str));\n      }\n\n      p.multiaddrs.add(peer); // PeerId\n    } else if (PeerId.isPeerId(peer)) {\n      var _peerIdB58Str = peer.toB58String();\n\n      try {\n        p = node.peerBook.get(_peerIdB58Str);\n      } catch (err) {\n        return node.peerRouting.findPeer(peer, callback);\n      }\n    } else {\n      return callback(errCode(new Error(\"\".concat(p, \" is not a valid peer type\")), 'ERR_INVALID_PEER_TYPE'));\n    }\n\n    callback(null, p);\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p/src/get-peer-info.js"],"names":["PeerId","require","PeerInfo","multiaddr","errCode","module","exports","node","peer","callback","p","isPeerInfo","isMultiaddr","err","peerIdB58Str","getPeerId","Error","peerBook","get","createFromB58String","multiaddrs","add","isPeerId","toB58String","peerRouting","findPeer"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB;AACF;AACA;AACE,SAAO,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AAC/B,QAAIC,CAAJ,CAD+B,CAE/B;;AACA,QAAIR,QAAQ,CAACS,UAAT,CAAoBH,IAApB,CAAJ,EAA+B;AAC7BE,MAAAA,CAAC,GAAGF,IAAJ,CAD6B,CAE/B;AACC,KAHD,MAGO,IAAIL,SAAS,CAACS,WAAV,CAAsBJ,IAAtB,KAA+B,OAAOA,IAAP,KAAgB,QAAnD,EAA6D;AAClE,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAI;AACFA,UAAAA,IAAI,GAAGL,SAAS,CAACK,IAAD,CAAhB;AACD,SAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,iBAAOJ,QAAQ,CACbL,OAAO,CAACS,GAAD,EAAM,uBAAN,CADM,CAAf;AAGD;AACF;;AAED,UAAMC,YAAY,GAAGN,IAAI,CAACO,SAAL,EAArB;;AAEA,UAAI,CAACD,YAAL,EAAmB;AACjB,eAAOL,QAAQ,CACbL,OAAO,CACL,IAAIY,KAAJ,CAAU,uDAAV,CADK,EAEL,uBAFK,CADM,CAAf;AAMD;;AAED,UAAI;AACFN,QAAAA,CAAC,GAAGH,IAAI,CAACU,QAAL,CAAcC,GAAd,CAAkBJ,YAAlB,CAAJ;AACD,OAFD,CAEE,OAAOD,GAAP,EAAY;AACZH,QAAAA,CAAC,GAAG,IAAIR,QAAJ,CAAaF,MAAM,CAACmB,mBAAP,CAA2BL,YAA3B,CAAb,CAAJ;AACD;;AACDJ,MAAAA,CAAC,CAACU,UAAF,CAAaC,GAAb,CAAiBb,IAAjB,EA3BkE,CA6BlE;AACD,KA9BM,MA8BA,IAAIR,MAAM,CAACsB,QAAP,CAAgBd,IAAhB,CAAJ,EAA2B;AAChC,UAAMM,aAAY,GAAGN,IAAI,CAACe,WAAL,EAArB;;AACA,UAAI;AACFb,QAAAA,CAAC,GAAGH,IAAI,CAACU,QAAL,CAAcC,GAAd,CAAkBJ,aAAlB,CAAJ;AACD,OAFD,CAEE,OAAOD,GAAP,EAAY;AACZ,eAAON,IAAI,CAACiB,WAAL,CAAiBC,QAAjB,CAA0BjB,IAA1B,EAAgCC,QAAhC,CAAP;AACD;AACF,KAPM,MAOA;AACL,aAAOA,QAAQ,CACbL,OAAO,CACL,IAAIY,KAAJ,WAAaN,CAAb,+BADK,EAEL,uBAFK,CADM,CAAf;AAMD;;AAEDD,IAAAA,QAAQ,CAAC,IAAD,EAAOC,CAAP,CAAR;AACD,GArDD;AAsDD,CA1DD","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst multiaddr = require('multiaddr')\nconst errCode = require('err-code')\n\nmodule.exports = (node) => {\n  /*\n   * Helper method to check the data type of peer and convert it to PeerInfo\n   */\n  return function (peer, callback) {\n    let p\n    // PeerInfo\n    if (PeerInfo.isPeerInfo(peer)) {\n      p = peer\n    // Multiaddr instance or Multiaddr String\n    } else if (multiaddr.isMultiaddr(peer) || typeof peer === 'string') {\n      if (typeof peer === 'string') {\n        try {\n          peer = multiaddr(peer)\n        } catch (err) {\n          return callback(\n            errCode(err, 'ERR_INVALID_MULTIADDR')\n          )\n        }\n      }\n\n      const peerIdB58Str = peer.getPeerId()\n\n      if (!peerIdB58Str) {\n        return callback(\n          errCode(\n            new Error('peer multiaddr instance or string must include peerId'),\n            'ERR_INVALID_MULTIADDR'\n          )\n        )\n      }\n\n      try {\n        p = node.peerBook.get(peerIdB58Str)\n      } catch (err) {\n        p = new PeerInfo(PeerId.createFromB58String(peerIdB58Str))\n      }\n      p.multiaddrs.add(peer)\n\n      // PeerId\n    } else if (PeerId.isPeerId(peer)) {\n      const peerIdB58Str = peer.toB58String()\n      try {\n        p = node.peerBook.get(peerIdB58Str)\n      } catch (err) {\n        return node.peerRouting.findPeer(peer, callback)\n      }\n    } else {\n      return callback(\n        errCode(\n          new Error(`${p} is not a valid peer type`),\n          'ERR_INVALID_PEER_TYPE'\n        )\n      )\n    }\n\n    callback(null, p)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}