{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar BufferList = require('bl');\n\nvar _require = require('rabin-wasm'),\n    create = _require.create;\n\nvar errcode = require('err-code');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _rabinChunker = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, options) {\n    var rabin, min, max, avg, sizepow, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            rabin = jsRabin();\n\n            if (!(options.minChunkSize && options.maxChunkSize && options.avgChunkSize)) {\n              _context.next = 7;\n              break;\n            }\n\n            avg = options.avgChunkSize;\n            min = options.minChunkSize;\n            max = options.maxChunkSize;\n            _context.next = 14;\n            break;\n\n          case 7:\n            if (options.avgChunkSize) {\n              _context.next = 11;\n              break;\n            }\n\n            throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');\n\n          case 11:\n            avg = options.avgChunkSize;\n            min = avg / 3;\n            max = avg + avg / 2;\n\n          case 14:\n            if (!(min < 16)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');\n\n          case 16:\n            if (max < min) {\n              max = min;\n            }\n\n            if (avg < min) {\n              avg = min;\n            }\n\n            sizepow = Math.floor(Math.log2(avg));\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 21;\n            _iterator = _asyncIterator(rabin(source, {\n              min: min,\n              max: max,\n              bits: sizepow,\n              window: options.window,\n              polynomial: options.polynomial\n            }));\n\n          case 23:\n            _context.next = 25;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 25:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 29;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 29:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 37;\n              break;\n            }\n\n            chunk = _value;\n            _context.next = 34;\n            return chunk;\n\n          case 34:\n            _iteratorNormalCompletion = true;\n            _context.next = 23;\n            break;\n\n          case 37:\n            _context.next = 43;\n            break;\n\n          case 39:\n            _context.prev = 39;\n            _context.t0 = _context[\"catch\"](21);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 43:\n            _context.prev = 43;\n            _context.prev = 44;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 48;\n              break;\n            }\n\n            _context.next = 48;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 48:\n            _context.prev = 48;\n\n            if (!_didIteratorError) {\n              _context.next = 51;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 51:\n            return _context.finish(48);\n\n          case 52:\n            return _context.finish(43);\n\n          case 53:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[21, 39, 43, 53], [44,, 48, 52]]);\n  }));\n\n  function rabinChunker(_x, _x2) {\n    return _rabinChunker.apply(this, arguments);\n  }\n\n  return rabinChunker;\n}();\n\nvar jsRabin = function jsRabin() {\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source, options) {\n      var r, buffers, pending, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk, sizes, i, size, buf;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _awaitAsyncGenerator(create(options.bits, options.min, options.max, options.window));\n\n            case 2:\n              r = _context2.sent;\n              buffers = new BufferList();\n              pending = [];\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context2.prev = 7;\n              _iterator2 = _asyncIterator(source);\n\n            case 9:\n              _context2.next = 11;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 11:\n              _step2 = _context2.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context2.next = 15;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 15:\n              _value2 = _context2.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context2.next = 35;\n                break;\n              }\n\n              chunk = _value2;\n              buffers.append(chunk);\n              pending.push(chunk);\n              sizes = r.fingerprint(Buffer.concat(pending));\n              pending = [];\n              i = 0;\n\n            case 23:\n              if (!(i < sizes.length)) {\n                _context2.next = 32;\n                break;\n              }\n\n              size = sizes[i];\n              buf = buffers.slice(0, size);\n              buffers.consume(size);\n              _context2.next = 29;\n              return buf;\n\n            case 29:\n              i++;\n              _context2.next = 23;\n              break;\n\n            case 32:\n              _iteratorNormalCompletion2 = true;\n              _context2.next = 9;\n              break;\n\n            case 35:\n              _context2.next = 41;\n              break;\n\n            case 37:\n              _context2.prev = 37;\n              _context2.t0 = _context2[\"catch\"](7);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t0;\n\n            case 41:\n              _context2.prev = 41;\n              _context2.prev = 42;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context2.next = 46;\n                break;\n              }\n\n              _context2.next = 46;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 46:\n              _context2.prev = 46;\n\n              if (!_didIteratorError2) {\n                _context2.next = 49;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 49:\n              return _context2.finish(46);\n\n            case 50:\n              return _context2.finish(41);\n\n            case 51:\n              if (!buffers.length) {\n                _context2.next = 54;\n                break;\n              }\n\n              _context2.next = 54;\n              return buffers.slice(0);\n\n            case 54:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[7, 37, 41, 51], [42,, 46, 50]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs-unixfs-importer/src/chunker/rabin.js"],"names":["BufferList","require","create","errcode","module","exports","source","options","rabin","jsRabin","minChunkSize","maxChunkSize","avgChunkSize","avg","min","max","Error","sizepow","Math","floor","log2","bits","window","polynomial","chunk","rabinChunker","r","buffers","pending","append","push","sizes","fingerprint","Buffer","concat","i","length","size","buf","slice","consume"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,IAAD,CAA1B;;AACA,eAAmBA,OAAO,CAAC,YAAD,CAA1B;AAAA,IAAQC,MAAR,YAAQA,MAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP;AAAA,iFAAiB,iBAA+BC,MAA/B,EAAuCC,OAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,KADS,GACDC,OAAO,EADN;;AAAA,kBAKXF,OAAO,CAACG,YAAR,IAAwBH,OAAO,CAACI,YAAhC,IAAgDJ,OAAO,CAACK,YAL7C;AAAA;AAAA;AAAA;;AAMbC,YAAAA,GAAG,GAAGN,OAAO,CAACK,YAAd;AACAE,YAAAA,GAAG,GAAGP,OAAO,CAACG,YAAd;AACAK,YAAAA,GAAG,GAAGR,OAAO,CAACI,YAAd;AARa;AAAA;;AAAA;AAAA,gBASHJ,OAAO,CAACK,YATL;AAAA;AAAA;AAAA;;AAAA,kBAUPT,OAAO,CAAC,IAAIa,KAAJ,CAAU,sCAAV,CAAD,EAAoD,4BAApD,CAVA;;AAAA;AAYbH,YAAAA,GAAG,GAAGN,OAAO,CAACK,YAAd;AACAE,YAAAA,GAAG,GAAGD,GAAG,GAAG,CAAZ;AACAE,YAAAA,GAAG,GAAGF,GAAG,GAAIA,GAAG,GAAG,CAAnB;;AAda;AAAA,kBAkBXC,GAAG,GAAG,EAlBK;AAAA;AAAA;AAAA;;AAAA,kBAmBPX,OAAO,CAAC,IAAIa,KAAJ,CAAU,mCAAV,CAAD,EAAiD,4BAAjD,CAnBA;;AAAA;AAsBf,gBAAID,GAAG,GAAGD,GAAV,EAAe;AACbC,cAAAA,GAAG,GAAGD,GAAN;AACD;;AAED,gBAAID,GAAG,GAAGC,GAAV,EAAe;AACbD,cAAAA,GAAG,GAAGC,GAAN;AACD;;AAEKG,YAAAA,OA9BS,GA8BCC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUP,GAAV,CAAX,CA9BD;AAAA;AAAA;AAAA;AAAA,uCAgCWL,KAAK,CAACF,MAAD,EAAS;AACtCQ,cAAAA,GAAG,EAAEA,GADiC;AAEtCC,cAAAA,GAAG,EAAEA,GAFiC;AAGtCM,cAAAA,IAAI,EAAEJ,OAHgC;AAItCK,cAAAA,MAAM,EAAEf,OAAO,CAACe,MAJsB;AAKtCC,cAAAA,UAAU,EAAEhB,OAAO,CAACgB;AALkB,aAAT,CAhChB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAgCEC,YAAAA,KAhCF;AAAA;AAuCb,mBAAMA,KAAN;;AAvCa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAkCC,YAAlC;AAAA;AAAA;;AAAA,SAAkCA,YAAlC;AAAA;;AA2CA,IAAMhB,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB;AAAA,0EAAO,kBAAkBH,MAAlB,EAA0BC,OAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACWL,MAAM,CAACK,OAAO,CAACc,IAAT,EAAed,OAAO,CAACO,GAAvB,EAA4BP,OAAO,CAACQ,GAApC,EAAyCR,OAAO,CAACe,MAAjD,CADjB;;AAAA;AACCI,cAAAA,CADD;AAECC,cAAAA,OAFD,GAEW,IAAI3B,UAAJ,EAFX;AAGD4B,cAAAA,OAHC,GAGS,EAHT;AAAA;AAAA;AAAA;AAAA,0CAKqBtB,MALrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAKYkB,cAAAA,KALZ;AAMHG,cAAAA,OAAO,CAACE,MAAR,CAAeL,KAAf;AACAI,cAAAA,OAAO,CAACE,IAAR,CAAaN,KAAb;AAEMO,cAAAA,KATH,GASWL,CAAC,CAACM,WAAF,CAAcC,MAAM,CAACC,MAAP,CAAcN,OAAd,CAAd,CATX;AAUHA,cAAAA,OAAO,GAAG,EAAV;AAESO,cAAAA,CAZN,GAYU,CAZV;;AAAA;AAAA,oBAYaA,CAAC,GAAGJ,KAAK,CAACK,MAZvB;AAAA;AAAA;AAAA;;AAaGC,cAAAA,IAbH,GAaUN,KAAK,CAACI,CAAD,CAbf;AAcGG,cAAAA,GAdH,GAcSX,OAAO,CAACY,KAAR,CAAc,CAAd,EAAiBF,IAAjB,CAdT;AAeDV,cAAAA,OAAO,CAACa,OAAR,CAAgBH,IAAhB;AAfC;AAiBD,qBAAMC,GAAN;;AAjBC;AAY+BH,cAAAA,CAAC,EAZhC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,mBAqBDR,OAAO,CAACS,MArBP;AAAA;AAAA;AAAA;;AAAA;AAsBH,qBAAMT,OAAO,CAACY,KAAR,CAAc,CAAd,CAAN;;AAtBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAyBD,CA1BD","sourcesContent":["'use strict'\n\nconst BufferList = require('bl')\nconst { create } = require('rabin-wasm')\nconst errcode = require('err-code')\n\nmodule.exports = async function * rabinChunker (source, options) {\n  const rabin = jsRabin()\n\n  let min, max, avg\n\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize\n    min = options.minChunkSize\n    max = options.maxChunkSize\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE')\n  } else {\n    avg = options.avgChunkSize\n    min = avg / 3\n    max = avg + (avg / 2)\n  }\n\n  // validate min/max/avg in the same way as go\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE')\n  }\n\n  if (max < min) {\n    max = min\n  }\n\n  if (avg < min) {\n    avg = min\n  }\n\n  const sizepow = Math.floor(Math.log2(avg))\n\n  for await (const chunk of rabin(source, {\n    min: min,\n    max: max,\n    bits: sizepow,\n    window: options.window,\n    polynomial: options.polynomial\n  })) {\n    yield chunk\n  }\n}\n\nconst jsRabin = () => {\n  return async function * (source, options) {\n    const r = await create(options.bits, options.min, options.max, options.window)\n    const buffers = new BufferList()\n    let pending = []\n\n    for await (const chunk of source) {\n      buffers.append(chunk)\n      pending.push(chunk)\n\n      const sizes = r.fingerprint(Buffer.concat(pending))\n      pending = []\n\n      for (let i = 0; i < sizes.length; i++) {\n        var size = sizes[i]\n        var buf = buffers.slice(0, size)\n        buffers.consume(size)\n\n        yield buf\n      }\n    }\n\n    if (buffers.length) {\n      yield buffers.slice(0)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}