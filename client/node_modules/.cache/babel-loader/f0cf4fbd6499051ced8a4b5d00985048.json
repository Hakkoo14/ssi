{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar CONSTANTS = require('./constants');\n\nvar logger = require('./utils').logger;\n\nvar unwantEvent = function unwantEvent(c) {\n  return \"unwant:\".concat(c);\n};\n\nvar blockEvent = function blockEvent(c) {\n  return \"block:\".concat(c);\n};\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\n\n\nvar Notifications = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Notifications, _EventEmitter);\n\n  var _super = _createSuper(Notifications);\n\n  function Notifications(peerId) {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _super.call(this);\n\n    _this.setMaxListeners(CONSTANTS.maxListeners);\n\n    _this._log = logger(peerId, 'notif');\n    _this._unwantListeners = {};\n    _this._blockListeners = {};\n    return _this;\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n\n\n  _createClass(Notifications, [{\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      var str = \"block:\".concat(block.cid.buffer.toString());\n\n      this._log(str);\n\n      this.emit(str, block);\n    }\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     *\n     * @param {CID} cid\n     * @param {function(Block)} onBlock - called when the block is received\n     * @param {function()} onUnwant - called when the block is unwanted\n     * @returns {void}\n     */\n\n  }, {\n    key: \"wantBlock\",\n    value: function wantBlock(cid, onBlock, onUnwant) {\n      var _this2 = this;\n\n      var cidStr = cid.buffer.toString();\n\n      this._log(\"wantBlock:\".concat(cidStr));\n\n      this._unwantListeners[cidStr] = function () {\n        _this2._log(\"manual unwant: \".concat(cidStr));\n\n        _this2._cleanup(cidStr);\n\n        onUnwant();\n      };\n\n      this._blockListeners[cidStr] = function (block) {\n        _this2._cleanup(cidStr);\n\n        onBlock(block);\n      };\n\n      this.once(unwantEvent(cidStr), this._unwantListeners[cidStr]);\n      this.once(blockEvent(cidStr), this._blockListeners[cidStr]);\n    }\n    /**\n     * Signal that the block is not wanted anymore.\n     *\n     * @param {CID} cid - the CID of the block that is not wanted anymore.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unwantBlock\",\n    value: function unwantBlock(cid) {\n      var str = \"unwant:\".concat(cid.buffer.toString());\n\n      this._log(str);\n\n      this.emit(str);\n    }\n    /**\n     * Internal method to clean up once a block was received or unwanted.\n     *\n     * @private\n     * @param  {string} cidStr\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_cleanup\",\n    value: function _cleanup(cidStr) {\n      if (this._unwantListeners[cidStr]) {\n        this.removeListener(unwantEvent(cidStr), this._unwantListeners[cidStr]);\n        delete this._unwantListeners[cidStr];\n      }\n\n      if (this._blockListeners[cidStr]) {\n        this.removeListener(blockEvent(cidStr), this._blockListeners[cidStr]);\n        delete this._blockListeners[cidStr];\n      }\n    }\n  }]);\n\n  return Notifications;\n}(EventEmitter);\n\nmodule.exports = Notifications;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs-bitswap/src/notifications.js"],"names":["EventEmitter","require","CONSTANTS","logger","unwantEvent","c","blockEvent","Notifications","peerId","setMaxListeners","maxListeners","_log","_unwantListeners","_blockListeners","block","str","cid","buffer","toString","emit","onBlock","onUnwant","cidStr","_cleanup","once","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\n\nconst CONSTANTS = require('./constants')\nconst logger = require('./utils').logger\n\nconst unwantEvent = (c) => `unwant:${c}`\nconst blockEvent = (c) => `block:${c}`\n\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\nclass Notifications extends EventEmitter {\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n\n    this._unwantListeners = {}\n    this._blockListeners = {}\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n  hasBlock (block) {\n    const str = `block:${block.cid.buffer.toString()}`\n    this._log(str)\n    this.emit(str, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   *\n   * @param {CID} cid\n   * @param {function(Block)} onBlock - called when the block is received\n   * @param {function()} onUnwant - called when the block is unwanted\n   * @returns {void}\n   */\n  wantBlock (cid, onBlock, onUnwant) {\n    const cidStr = cid.buffer.toString()\n    this._log(`wantBlock:${cidStr}`)\n\n    this._unwantListeners[cidStr] = () => {\n      this._log(`manual unwant: ${cidStr}`)\n      this._cleanup(cidStr)\n      onUnwant()\n    }\n\n    this._blockListeners[cidStr] = (block) => {\n      this._cleanup(cidStr)\n      onBlock(block)\n    }\n\n    this.once(\n      unwantEvent(cidStr),\n      this._unwantListeners[cidStr]\n    )\n    this.once(\n      blockEvent(cidStr),\n      this._blockListeners[cidStr]\n    )\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const str = `unwant:${cid.buffer.toString()}`\n    this._log(str)\n    this.emit(str)\n  }\n\n  /**\n   * Internal method to clean up once a block was received or unwanted.\n   *\n   * @private\n   * @param  {string} cidStr\n   * @returns {void}\n   */\n  _cleanup (cidStr) {\n    if (this._unwantListeners[cidStr]) {\n      this.removeListener(\n        unwantEvent(cidStr),\n        this._unwantListeners[cidStr]\n      )\n      delete this._unwantListeners[cidStr]\n    }\n\n    if (this._blockListeners[cidStr]) {\n      this.removeListener(\n        blockEvent(cidStr),\n        this._blockListeners[cidStr]\n      )\n      delete this._blockListeners[cidStr]\n    }\n  }\n}\n\nmodule.exports = Notifications\n"]},"metadata":{},"sourceType":"script"}