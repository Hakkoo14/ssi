{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar debug = require('debug');\n\nvar nextTick = require('async/nextTick');\n\nvar log = debug('libp2p:bootstrap');\nlog.error = debug('libp2p:bootstrap:error');\n\nfunction isIPFS(addr) {\n  try {\n    return mafmt.IPFS.matches(addr);\n  } catch (e) {\n    return false;\n  }\n}\n\nvar Bootstrap = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Bootstrap, _EventEmitter);\n\n  var _super = _createSuper(Bootstrap);\n\n  function Bootstrap(options) {\n    var _this;\n\n    _classCallCheck(this, Bootstrap);\n\n    _this = _super.call(this);\n    _this._list = options.list;\n    _this._interval = options.interval || 10000;\n    _this._timer = null;\n    return _this;\n  }\n\n  _createClass(Bootstrap, [{\n    key: \"start\",\n    value: function start(callback) {\n      var _this2 = this;\n\n      if (this._timer) {\n        return nextTick(function () {\n          return callback();\n        });\n      }\n\n      this._timer = setInterval(function () {\n        return _this2._discoverBootstrapPeers();\n      }, this._interval);\n      nextTick(function () {\n        callback();\n\n        _this2._discoverBootstrapPeers();\n      });\n    }\n  }, {\n    key: \"_discoverBootstrapPeers\",\n    value: function _discoverBootstrapPeers() {\n      var _this3 = this;\n\n      this._list.forEach(function (candidate) {\n        if (!isIPFS(candidate)) {\n          return log.error('Invalid multiaddr');\n        }\n\n        var ma = multiaddr(candidate);\n        var peerId = PeerId.createFromB58String(ma.getPeerId());\n        PeerInfo.create(peerId, function (err, peerInfo) {\n          if (err) {\n            return log.error('Invalid bootstrap peer id', err);\n          }\n\n          peerInfo.multiaddrs.add(ma);\n\n          _this3.emit('peer', peerInfo);\n        });\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(callback) {\n      nextTick(callback);\n\n      if (this._timer) {\n        clearInterval(this._timer);\n        this._timer = null;\n      }\n    }\n  }]);\n\n  return Bootstrap;\n}(EventEmitter);\n\nexports = module.exports = Bootstrap;\nexports.tag = 'bootstrap';","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/libp2p-bootstrap/src/index.js"],"names":["PeerId","require","PeerInfo","multiaddr","mafmt","EventEmitter","debug","nextTick","log","error","isIPFS","addr","IPFS","matches","e","Bootstrap","options","_list","list","_interval","interval","_timer","callback","setInterval","_discoverBootstrapPeers","forEach","candidate","ma","peerId","createFromB58String","getPeerId","create","err","peerInfo","multiaddrs","add","emit","clearInterval","exports","module","tag"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMI,YAAY,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBI,YAAvC;;AACA,IAAMC,KAAK,GAAGL,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMM,QAAQ,GAAGN,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAMO,GAAG,GAAGF,KAAK,CAAC,kBAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,wBAAD,CAAjB;;AAEA,SAASI,MAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAI;AACF,WAAOP,KAAK,CAACQ,IAAN,CAAWC,OAAX,CAAmBF,IAAnB,CAAP;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;IAEKC,S;;;;;AACJ,qBAAaC,OAAb,EAAsB;AAAA;;AAAA;;AACpB;AACA,UAAKC,KAAL,GAAaD,OAAO,CAACE,IAArB;AACA,UAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAR,IAAoB,KAArC;AACA,UAAKC,MAAL,GAAc,IAAd;AAJoB;AAKrB;;;;WAED,eAAOC,QAAP,EAAiB;AAAA;;AACf,UAAI,KAAKD,MAAT,EAAiB;AACf,eAAOd,QAAQ,CAAC;AAAA,iBAAMe,QAAQ,EAAd;AAAA,SAAD,CAAf;AACD;;AAED,WAAKD,MAAL,GAAcE,WAAW,CAAC;AAAA,eAAM,MAAI,CAACC,uBAAL,EAAN;AAAA,OAAD,EAAuC,KAAKL,SAA5C,CAAzB;AAEAZ,MAAAA,QAAQ,CAAC,YAAM;AACbe,QAAAA,QAAQ;;AACR,QAAA,MAAI,CAACE,uBAAL;AACD,OAHO,CAAR;AAID;;;WAED,mCAA2B;AAAA;;AACzB,WAAKP,KAAL,CAAWQ,OAAX,CAAmB,UAACC,SAAD,EAAe;AAChC,YAAI,CAAChB,MAAM,CAACgB,SAAD,CAAX,EAAwB;AAAE,iBAAOlB,GAAG,CAACC,KAAJ,CAAU,mBAAV,CAAP;AAAuC;;AAEjE,YAAMkB,EAAE,GAAGxB,SAAS,CAACuB,SAAD,CAApB;AAEA,YAAME,MAAM,GAAG5B,MAAM,CAAC6B,mBAAP,CAA2BF,EAAE,CAACG,SAAH,EAA3B,CAAf;AAEA5B,QAAAA,QAAQ,CAAC6B,MAAT,CAAgBH,MAAhB,EAAwB,UAACI,GAAD,EAAMC,QAAN,EAAmB;AACzC,cAAID,GAAJ,EAAS;AAAE,mBAAOxB,GAAG,CAACC,KAAJ,CAAU,2BAAV,EAAuCuB,GAAvC,CAAP;AAAoD;;AAC/DC,UAAAA,QAAQ,CAACC,UAAT,CAAoBC,GAApB,CAAwBR,EAAxB;;AACA,UAAA,MAAI,CAACS,IAAL,CAAU,MAAV,EAAkBH,QAAlB;AACD,SAJD;AAKD,OAZD;AAaD;;;WAED,cAAMX,QAAN,EAAgB;AACdf,MAAAA,QAAQ,CAACe,QAAD,CAAR;;AAEA,UAAI,KAAKD,MAAT,EAAiB;AACfgB,QAAAA,aAAa,CAAC,KAAKhB,MAAN,CAAb;AACA,aAAKA,MAAL,GAAc,IAAd;AACD;AACF;;;;EA5CqBhB,Y;;AA+CxBiC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBvB,SAA3B;AACAuB,OAAO,CAACE,GAAR,GAAc,WAAd","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst EventEmitter = require('events').EventEmitter\nconst debug = require('debug')\nconst nextTick = require('async/nextTick')\n\nconst log = debug('libp2p:bootstrap')\nlog.error = debug('libp2p:bootstrap:error')\n\nfunction isIPFS (addr) {\n  try {\n    return mafmt.IPFS.matches(addr)\n  } catch (e) {\n    return false\n  }\n}\n\nclass Bootstrap extends EventEmitter {\n  constructor (options) {\n    super()\n    this._list = options.list\n    this._interval = options.interval || 10000\n    this._timer = null\n  }\n\n  start (callback) {\n    if (this._timer) {\n      return nextTick(() => callback())\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval)\n\n    nextTick(() => {\n      callback()\n      this._discoverBootstrapPeers()\n    })\n  }\n\n  _discoverBootstrapPeers () {\n    this._list.forEach((candidate) => {\n      if (!isIPFS(candidate)) { return log.error('Invalid multiaddr') }\n\n      const ma = multiaddr(candidate)\n\n      const peerId = PeerId.createFromB58String(ma.getPeerId())\n\n      PeerInfo.create(peerId, (err, peerInfo) => {\n        if (err) { return log.error('Invalid bootstrap peer id', err) }\n        peerInfo.multiaddrs.add(ma)\n        this.emit('peer', peerInfo)\n      })\n    })\n  }\n\n  stop (callback) {\n    nextTick(callback)\n\n    if (this._timer) {\n      clearInterval(this._timer)\n      this._timer = null\n    }\n  }\n}\n\nexports = module.exports = Bootstrap\nexports.tag = 'bootstrap'\n"]},"metadata":{},"sourceType":"script"}