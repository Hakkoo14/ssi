{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar Big = require('bignumber.js');\n\nvar MovingAverage = require('moving-average');\n\nvar Stats = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Stats, _EventEmitter);\n\n  var _super = _createSuper(Stats);\n\n  function Stats(initialCounters, options) {\n    var _this;\n\n    _classCallCheck(this, Stats);\n\n    _this = _super.call(this);\n    _this._options = options;\n    _this._queue = [];\n    _this._stats = {};\n    _this._frequencyLastTime = Date.now();\n    _this._frequencyAccumulators = {};\n    _this._movingAverages = {};\n    _this._update = _this._update.bind(_assertThisInitialized(_this));\n    initialCounters.forEach(function (key) {\n      _this._stats[key] = Big(0);\n      _this._movingAverages[key] = {};\n\n      _this._options.movingAverageIntervals.forEach(function (interval) {\n        var ma = _this._movingAverages[key][interval] = MovingAverage(interval);\n        ma.push(_this._frequencyLastTime, 0);\n      });\n    });\n    _this._enabled = _this._options.enabled;\n    return _this;\n  }\n\n  _createClass(Stats, [{\n    key: \"enable\",\n    value: function enable() {\n      this._enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this._disabled = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return Object.assign({}, this._stats);\n    }\n  }, {\n    key: \"movingAverages\",\n    get: function get() {\n      return Object.assign({}, this._movingAverages);\n    }\n  }, {\n    key: \"push\",\n    value: function push(counter, inc) {\n      if (this._enabled) {\n        this._queue.push([counter, inc, Date.now()]);\n\n        this._resetComputeTimeout();\n      }\n    }\n  }, {\n    key: \"_resetComputeTimeout\",\n    value: function _resetComputeTimeout() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(this._update, this._nextTimeout());\n    }\n  }, {\n    key: \"_nextTimeout\",\n    value: function _nextTimeout() {\n      // calculate the need for an update, depending on the queue length\n      var urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n      return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._timeout = null;\n\n      if (this._queue.length) {\n        var last;\n\n        while (this._queue.length) {\n          var op = last = this._queue.shift();\n\n          this._applyOp(op);\n        }\n\n        this._updateFrequency(last[2]); // contains timestamp of last op\n\n\n        this.emit('update', this._stats);\n      }\n    }\n  }, {\n    key: \"_updateFrequency\",\n    value: function _updateFrequency(latestTime) {\n      var _this2 = this;\n\n      var timeDiff = latestTime - this._frequencyLastTime;\n      Object.keys(this._stats).forEach(function (key) {\n        _this2._updateFrequencyFor(key, timeDiff, latestTime);\n      });\n      this._frequencyLastTime = latestTime;\n    }\n  }, {\n    key: \"_updateFrequencyFor\",\n    value: function _updateFrequencyFor(key, timeDiffMS, latestTime) {\n      var count = this._frequencyAccumulators[key] || 0;\n      this._frequencyAccumulators[key] = 0;\n      var hz = count / timeDiffMS * 1000;\n      var movingAverages = this._movingAverages[key];\n\n      if (!movingAverages) {\n        movingAverages = this._movingAverages[key] = {};\n      }\n\n      this._options.movingAverageIntervals.forEach(function (movingAverageInterval) {\n        var movingAverage = movingAverages[movingAverageInterval];\n\n        if (!movingAverage) {\n          movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n        }\n\n        movingAverage.push(latestTime, hz);\n      });\n    }\n  }, {\n    key: \"_applyOp\",\n    value: function _applyOp(op) {\n      var key = op[0];\n      var inc = op[1];\n\n      if (typeof inc !== 'number') {\n        throw new Error('invalid increment number:', inc);\n      }\n\n      var n;\n\n      if (!this._stats.hasOwnProperty(key)) {\n        n = this._stats[key] = Big(0);\n      } else {\n        n = this._stats[key];\n      }\n\n      this._stats[key] = n.plus(inc);\n\n      if (!this._frequencyAccumulators[key]) {\n        this._frequencyAccumulators[key] = 0;\n      }\n\n      this._frequencyAccumulators[key] += inc;\n    }\n  }]);\n\n  return Stats;\n}(EventEmitter);\n\nmodule.exports = Stats;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs-bitswap/src/stats/stat.js"],"names":["EventEmitter","require","Big","MovingAverage","Stats","initialCounters","options","_options","_queue","_stats","_frequencyLastTime","Date","now","_frequencyAccumulators","_movingAverages","_update","bind","forEach","key","movingAverageIntervals","interval","ma","push","_enabled","enabled","_disabled","_timeout","clearTimeout","Object","assign","counter","inc","_resetComputeTimeout","setTimeout","_nextTimeout","urgency","length","computeThrottleMaxQueueSize","Math","max","computeThrottleTimeout","last","op","shift","_applyOp","_updateFrequency","emit","latestTime","timeDiff","keys","_updateFrequencyFor","timeDiffMS","count","hz","movingAverages","movingAverageInterval","movingAverage","Error","n","hasOwnProperty","plus","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\nconst Big = require('bignumber.js')\nconst MovingAverage = require('moving-average')\n\nclass Stats extends EventEmitter {\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    this._queue = []\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    this._frequencyAccumulators = {}\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    initialCounters.forEach((key) => {\n      this._stats[key] = Big(0)\n      this._movingAverages[key] = {}\n      this._options.movingAverageIntervals.forEach((interval) => {\n        const ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      })\n    })\n\n    this._enabled = this._options.enabled\n  }\n\n  enable () {\n    this._enabled = true\n  }\n\n  disable () {\n    this._disabled = true\n  }\n\n  stop () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n  }\n\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  push (counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()])\n      this._resetComputeTimeout()\n    }\n  }\n\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n    this._timeout = setTimeout(this._update, this._nextTimeout())\n  }\n\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n  }\n\n  _update () {\n    this._timeout = null\n    if (this._queue.length) {\n      let last\n      while (this._queue.length) {\n        const op = last = this._queue.shift()\n        this._applyOp(op)\n      }\n\n      this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    Object.keys(this._stats).forEach((key) => {\n      this._updateFrequencyFor(key, timeDiff, latestTime)\n    })\n\n    this._frequencyLastTime = latestTime\n  }\n\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    const hz = (count / timeDiffMS) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n    this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n      let movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    })\n  }\n\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error('invalid increment number:', inc)\n    }\n\n    let n\n\n    if (!this._stats.hasOwnProperty(key)) {\n      n = this._stats[key] = Big(0)\n    } else {\n      n = this._stats[key]\n    }\n    this._stats[key] = n.plus(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n\nmodule.exports = Stats\n"]},"metadata":{},"sourceType":"script"}