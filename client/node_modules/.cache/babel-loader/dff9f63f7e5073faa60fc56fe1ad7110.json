{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error');\n\nmodule.exports = function preload(url, callback) {\n  log(url);\n  var controller = new AbortController();\n  var signal = controller.signal;\n  fetch(url, {\n    signal: signal\n  }).then(function (res) {\n    if (!res.ok) {\n      log.error('failed to preload', url, res.status, res.statusText);\n      throw new Error(\"failed to preload \".concat(url));\n    }\n\n    return res.text();\n  }).then(function () {\n    return callback();\n  }).catch(callback);\n  return {\n    cancel: function cancel() {\n      return controller.abort();\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/runtime/preload-browser.js"],"names":["debug","require","log","error","module","exports","preload","url","callback","controller","AbortController","signal","fetch","then","res","ok","status","statusText","Error","text","catch","cancel","abort"],"mappings":"AAAA;AACA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,GAAG,GAAGF,KAAK,CAAC,cAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,oBAAD,CAAjB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAkBC,GAAlB,EAAuBC,QAAvB,EAAiC;AAChDN,EAAAA,GAAG,CAACK,GAAD,CAAH;AAEA,MAAME,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,MAAMC,MAAM,GAAGF,UAAU,CAACE,MAA1B;AAEAC,EAAAA,KAAK,CAACL,GAAD,EAAM;AAAEI,IAAAA,MAAM,EAANA;AAAF,GAAN,CAAL,CACGE,IADH,CACQ,UAAAC,GAAG,EAAI;AACX,QAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACXb,MAAAA,GAAG,CAACC,KAAJ,CAAU,mBAAV,EAA+BI,GAA/B,EAAoCO,GAAG,CAACE,MAAxC,EAAgDF,GAAG,CAACG,UAApD;AACA,YAAM,IAAIC,KAAJ,6BAA+BX,GAA/B,EAAN;AACD;;AACD,WAAOO,GAAG,CAACK,IAAJ,EAAP;AACD,GAPH,EAQGN,IARH,CAQQ;AAAA,WAAML,QAAQ,EAAd;AAAA,GARR,EASGY,KATH,CASSZ,QATT;AAWA,SAAO;AACLa,IAAAA,MAAM,EAAE;AAAA,aAAMZ,UAAU,CAACa,KAAX,EAAN;AAAA;AADH,GAAP;AAGD,CApBD","sourcesContent":["/* eslint-env browser */\n'use strict'\n\nconst debug = require('debug')\n\nconst log = debug('ipfs:preload')\nlog.error = debug('ipfs:preload:error')\n\nmodule.exports = function preload (url, callback) {\n  log(url)\n\n  const controller = new AbortController()\n  const signal = controller.signal\n\n  fetch(url, { signal })\n    .then(res => {\n      if (!res.ok) {\n        log.error('failed to preload', url, res.status, res.statusText)\n        throw new Error(`failed to preload ${url}`)\n      }\n      return res.text()\n    })\n    .then(() => callback())\n    .catch(callback)\n\n  return {\n    cancel: () => controller.abort()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}