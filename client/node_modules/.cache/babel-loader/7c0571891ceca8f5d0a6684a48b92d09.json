{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar bs58 = require('bs58');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar Multiaddr = require('multiaddr');\n\nfunction getB58Str(peer) {\n  var b58Str;\n\n  if (typeof peer === 'string') {\n    if (peer.startsWith('/')) {\n      b58Str = Multiaddr(peer).getPeerId();\n    } else {\n      b58Str = peer;\n    }\n  } else if (Buffer.isBuffer(peer)) {\n    b58Str = bs58.encode(peer).toString();\n  } else if (PeerId.isPeerId(peer)) {\n    b58Str = peer.toB58String();\n  } else if (PeerInfo.isPeerInfo(peer)) {\n    b58Str = peer.id.toB58String();\n  } else if (Multiaddr.isMultiaddr(peer)) {\n    b58Str = peer.getPeerId();\n  } else {\n    throw new Error('not valid PeerId or PeerInfo, or B58Str');\n  }\n\n  return b58Str;\n}\n\nvar PeerBook = /*#__PURE__*/function () {\n  function PeerBook() {\n    _classCallCheck(this, PeerBook);\n\n    this._peers = {};\n  } // checks if peer exists\n  // peer can be PeerId, b58String or PeerInfo\n\n\n  _createClass(PeerBook, [{\n    key: \"has\",\n    value: function has(peer) {\n      var b58Str = getB58Str(peer);\n      return Boolean(this._peers[b58Str]);\n    }\n    /**\n     * Stores a peerInfo, if already exist, merges the new into the old.\n     *\n     * @param {PeerInfo} peerInfo\n     * @param {Boolean} replace\n     * @returns {PeerInfo}\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(peerInfo, replace) {\n      var localPeerInfo = this._peers[peerInfo.id.toB58String()]; // insert if doesn't exist or replace if replace flag is true\n\n\n      if (!localPeerInfo || replace) {\n        this._peers[peerInfo.id.toB58String()] = peerInfo;\n        return peerInfo;\n      } // peerInfo.replace merges by default if none to replace are passed\n\n\n      peerInfo.multiaddrs.forEach(function (ma) {\n        return localPeerInfo.multiaddrs.add(ma);\n      }); // pass active connection state\n\n      var ma = peerInfo.isConnected();\n\n      if (ma) {\n        localPeerInfo.connect(ma);\n      } // pass known protocols\n\n\n      peerInfo.protocols.forEach(function (p) {\n        return localPeerInfo.protocols.add(p);\n      });\n\n      if (!localPeerInfo.id.privKey && peerInfo.id.privKey) {\n        localPeerInfo.id.privKey = peerInfo.id.privKey;\n      }\n\n      if (!localPeerInfo.id.pubKey && peerInfo.id.pubKey) {\n        localPeerInfo.id.pubKey = peerInfo.id.pubKey;\n      }\n\n      return localPeerInfo;\n    }\n    /**\n     * Get the info to the given PeerId, PeerInfo or b58Str id\n     *\n     * @param {PeerId} peer\n     * @returns {PeerInfo}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peer) {\n      var b58Str = getB58Str(peer);\n      var peerInfo = this._peers[b58Str];\n\n      if (peerInfo) {\n        return peerInfo;\n      }\n\n      throw new Error('PeerInfo not found');\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this._peers;\n    }\n  }, {\n    key: \"getAllArray\",\n    value: function getAllArray() {\n      return Object.values(this._peers);\n    }\n  }, {\n    key: \"getMultiaddrs\",\n    value: function getMultiaddrs(peer) {\n      var info = this.get(peer);\n      return info.multiaddrs.toArray();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(peer) {\n      var b58Str = getB58Str(peer);\n\n      if (this._peers[b58Str]) {\n        delete this._peers[b58Str];\n      }\n    }\n  }]);\n\n  return PeerBook;\n}();\n\nmodule.exports = PeerBook;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/peer-book/src/index.js"],"names":["bs58","require","PeerId","PeerInfo","Multiaddr","getB58Str","peer","b58Str","startsWith","getPeerId","Buffer","isBuffer","encode","toString","isPeerId","toB58String","isPeerInfo","id","isMultiaddr","Error","PeerBook","_peers","Boolean","peerInfo","replace","localPeerInfo","multiaddrs","forEach","ma","add","isConnected","connect","protocols","p","privKey","pubKey","Object","values","info","get","toArray","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst bs58 = require('bs58')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst Multiaddr = require('multiaddr')\n\nfunction getB58Str (peer) {\n  let b58Str\n\n  if (typeof peer === 'string') {\n    if (peer.startsWith('/')) {\n      b58Str = Multiaddr(peer).getPeerId()\n    } else {\n      b58Str = peer\n    }\n  } else if (Buffer.isBuffer(peer)) {\n    b58Str = bs58.encode(peer).toString()\n  } else if (PeerId.isPeerId(peer)) {\n    b58Str = peer.toB58String()\n  } else if (PeerInfo.isPeerInfo(peer)) {\n    b58Str = peer.id.toB58String()\n  } else if (Multiaddr.isMultiaddr(peer)) {\n    b58Str = peer.getPeerId()\n  } else {\n    throw new Error('not valid PeerId or PeerInfo, or B58Str')\n  }\n\n  return b58Str\n}\n\nclass PeerBook {\n  constructor () {\n    this._peers = {}\n  }\n\n  // checks if peer exists\n  // peer can be PeerId, b58String or PeerInfo\n  has (peer) {\n    const b58Str = getB58Str(peer)\n    return Boolean(this._peers[b58Str])\n  }\n\n  /**\n   * Stores a peerInfo, if already exist, merges the new into the old.\n   *\n   * @param {PeerInfo} peerInfo\n   * @param {Boolean} replace\n   * @returns {PeerInfo}\n   */\n  put (peerInfo, replace) {\n    const localPeerInfo = this._peers[peerInfo.id.toB58String()]\n\n    // insert if doesn't exist or replace if replace flag is true\n    if (!localPeerInfo || replace) {\n      this._peers[peerInfo.id.toB58String()] = peerInfo\n      return peerInfo\n    }\n\n    // peerInfo.replace merges by default if none to replace are passed\n    peerInfo.multiaddrs.forEach((ma) => localPeerInfo.multiaddrs.add(ma))\n\n    // pass active connection state\n    const ma = peerInfo.isConnected()\n    if (ma) {\n      localPeerInfo.connect(ma)\n    }\n\n    // pass known protocols\n    peerInfo.protocols.forEach((p) => localPeerInfo.protocols.add(p))\n\n    if (!localPeerInfo.id.privKey && peerInfo.id.privKey) {\n      localPeerInfo.id.privKey = peerInfo.id.privKey\n    }\n\n    if (!localPeerInfo.id.pubKey && peerInfo.id.pubKey) {\n      localPeerInfo.id.pubKey = peerInfo.id.pubKey\n    }\n\n    return localPeerInfo\n  }\n\n  /**\n   * Get the info to the given PeerId, PeerInfo or b58Str id\n   *\n   * @param {PeerId} peer\n   * @returns {PeerInfo}\n   */\n  get (peer) {\n    const b58Str = getB58Str(peer)\n\n    const peerInfo = this._peers[b58Str]\n\n    if (peerInfo) {\n      return peerInfo\n    }\n    throw new Error('PeerInfo not found')\n  }\n\n  getAll () {\n    return this._peers\n  }\n\n  getAllArray () {\n    return Object.values(this._peers)\n  }\n\n  getMultiaddrs (peer) {\n    const info = this.get(peer)\n    return info.multiaddrs.toArray()\n  }\n\n  remove (peer) {\n    const b58Str = getB58Str(peer)\n\n    if (this._peers[b58Str]) {\n      delete this._peers[b58Str]\n    }\n  }\n}\n\nmodule.exports = PeerBook\n"]},"metadata":{},"sourceType":"script"}