{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('iso-url'),\n    URL = _require.URL;\n\nvar fetch = require('../../runtime/fetch-nodejs');\n\nmodule.exports = function (self) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options, callback) {\n      var files, parsedUrl, res, content, path;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n\n              _context.prev = 1;\n              parsedUrl = new URL(url);\n              _context.next = 5;\n              return fetch(url);\n\n            case 5:\n              res = _context.sent;\n\n              if (res.ok) {\n                _context.next = 8;\n                break;\n              }\n\n              throw new Error('unexpected status code: ' + res.status);\n\n            case 8:\n              _context.t0 = Buffer;\n              _context.next = 11;\n              return res.arrayBuffer();\n\n            case 11:\n              _context.t1 = _context.sent;\n              content = _context.t0.from.call(_context.t0, _context.t1);\n              path = decodeURIComponent(parsedUrl.pathname.split('/').pop());\n              _context.next = 16;\n              return self.add({\n                content: content,\n                path: path\n              }, options);\n\n            case 16:\n              files = _context.sent;\n              _context.next = 24;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t2 = _context[\"catch\"](1);\n\n              if (!callback) {\n                _context.next = 23;\n                break;\n              }\n\n              return _context.abrupt(\"return\", callback(_context.t2));\n\n            case 23:\n              throw _context.t2;\n\n            case 24:\n              if (callback) {\n                callback(null, files);\n              }\n\n              return _context.abrupt(\"return\", files);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 19]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/files-regular/add-from-url.js"],"names":["require","URL","fetch","module","exports","self","url","options","callback","parsedUrl","res","ok","Error","status","Buffer","arrayBuffer","content","from","path","decodeURIComponent","pathname","split","pop","add","files"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,SAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,KAAK,GAAGF,OAAO,CAAC,4BAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB;AAAA,wEAAO,iBAAOC,GAAP,EAAYC,OAAZ,EAAqBC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,kBAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,gBAAAA,QAAQ,GAAGD,OAAX;AACAA,gBAAAA,OAAO,GAAG,EAAV;AACD;;AAJI;AASGE,cAAAA,SATH,GASe,IAAIR,GAAJ,CAAQK,GAAR,CATf;AAAA;AAAA,qBAUeJ,KAAK,CAACI,GAAD,CAVpB;;AAAA;AAUGI,cAAAA,GAVH;;AAAA,kBAYEA,GAAG,CAACC,EAZN;AAAA;AAAA;AAAA;;AAAA,oBAaK,IAAIC,KAAJ,CAAU,6BAA6BF,GAAG,CAACG,MAA3C,CAbL;;AAAA;AAAA,4BAiBaC,MAjBb;AAAA;AAAA,qBAiB+BJ,GAAG,CAACK,WAAJ,EAjB/B;;AAAA;AAAA;AAiBGC,cAAAA,OAjBH,eAiBoBC,IAjBpB;AAkBGC,cAAAA,IAlBH,GAkBUC,kBAAkB,CAACV,SAAS,CAACW,QAAV,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8BC,GAA9B,EAAD,CAlB5B;AAAA;AAAA,qBAoBWjB,IAAI,CAACkB,GAAL,CAAS;AAAEP,gBAAAA,OAAO,EAAPA,OAAF;AAAWE,gBAAAA,IAAI,EAAJA;AAAX,eAAT,EAA4BX,OAA5B,CApBX;;AAAA;AAoBHiB,cAAAA,KApBG;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,mBAsBChB,QAtBD;AAAA;AAAA;AAAA;;AAAA,+CAuBMA,QAAQ,aAvBd;;AAAA;AAAA;;AAAA;AA4BL,kBAAIA,QAAJ,EAAc;AACZA,gBAAAA,QAAQ,CAAC,IAAD,EAAOgB,KAAP,CAAR;AACD;;AA9BI,+CAgCEA,KAhCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkCD,CAnCD","sourcesContent":["'use strict'\n\nconst { URL } = require('iso-url')\nconst fetch = require('../../runtime/fetch-nodejs')\n\nmodule.exports = (self) => {\n  return async (url, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    let files\n\n    try {\n      const parsedUrl = new URL(url)\n      const res = await fetch(url)\n\n      if (!res.ok) {\n        throw new Error('unexpected status code: ' + res.status)\n      }\n\n      // TODO: use res.body when supported\n      const content = Buffer.from(await res.arrayBuffer())\n      const path = decodeURIComponent(parsedUrl.pathname.split('/').pop())\n\n      files = await self.add({ content, path }, options)\n    } catch (err) {\n      if (callback) {\n        return callback(err)\n      }\n      throw err\n    }\n\n    if (callback) {\n      callback(null, files)\n    }\n\n    return files\n  }\n}\n"]},"metadata":{},"sourceType":"script"}