{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar whole = /^((\\d+(\\.\\d+)*)(ns|ms|us|µs|m|s|h))+$/;\nvar pieces = /((\\d+(\\.\\d+)*)(ns|ms|us|µs|m|s|h))/g;\nvar measure = /(ns|ms|us|µs|m|s|h)/g;\nvar multipliers = {\n  ns: 1e-6,\n  us: 0.001,\n  µs: 0.001,\n  ms: 1,\n  s: 1000,\n  m: 60000,\n  h: 3.6e+6\n};\n\nfunction analyse(time) {\n  var unit = time.match(measure)[0];\n  time = time.substring(0, time.length - unit.length);\n  return parseFloat(time) * multipliers[unit];\n}\n\nmodule.exports = promisify(function (time, callback) {\n  if (typeof time !== 'string') {\n    return callback(new Error('the first argument must be a string'));\n  }\n\n  if (!whole.test(time)) {\n    return callback(new Error('invalid time'));\n  }\n\n  callback(null, time.match(pieces).reduce(function (sum, currentVal) {\n    return sum + analyse(currentVal);\n  }, 0));\n});","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/human-to-milliseconds/src/index.js"],"names":["promisify","require","whole","pieces","measure","multipliers","ns","us","µs","ms","s","m","h","analyse","time","unit","match","substring","length","parseFloat","module","exports","callback","Error","test","reduce","sum","currentVal"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAMC,KAAK,GAAG,uCAAd;AACA,IAAMC,MAAM,GAAG,qCAAf;AACA,IAAMC,OAAO,GAAG,sBAAhB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EAAE,IADc;AAElBC,EAAAA,EAAE,EAAE,KAFc;AAGlBC,EAAAA,EAAE,EAAE,KAHc;AAIlBC,EAAAA,EAAE,EAAE,CAJc;AAKlBC,EAAAA,CAAC,EAAE,IALe;AAMlBC,EAAAA,CAAC,EAAE,KANe;AAOlBC,EAAAA,CAAC,EAAE;AAPe,CAApB;;AAUA,SAASC,OAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIC,IAAI,GAAGD,IAAI,CAACE,KAAL,CAAWZ,OAAX,EAAoB,CAApB,CAAX;AACAU,EAAAA,IAAI,GAAGA,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBH,IAAI,CAACI,MAAL,GAAcH,IAAI,CAACG,MAArC,CAAP;AAEA,SAAOC,UAAU,CAACL,IAAD,CAAV,GAAmBT,WAAW,CAACU,IAAD,CAArC;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBrB,SAAS,CAAC,UAAUc,IAAV,EAAgBQ,QAAhB,EAA0B;AACnD,MAAI,OAAOR,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOQ,QAAQ,CAAC,IAAIC,KAAJ,CAAU,qCAAV,CAAD,CAAf;AACD;;AAED,MAAI,CAACrB,KAAK,CAACsB,IAAN,CAAWV,IAAX,CAAL,EAAuB;AACrB,WAAOQ,QAAQ,CAAC,IAAIC,KAAJ,CAAU,cAAV,CAAD,CAAf;AACD;;AAEDD,EAAAA,QAAQ,CAAC,IAAD,EAAOR,IAAI,CAACE,KAAL,CAAWb,MAAX,EAAmBsB,MAAnB,CAA0B,UAACC,GAAD,EAAMC,UAAN,EAAqB;AAC5D,WAAOD,GAAG,GAAGb,OAAO,CAACc,UAAD,CAApB;AACD,GAFc,EAEZ,CAFY,CAAP,CAAR;AAGD,CAZyB,CAA1B","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\n\nconst whole = /^((\\d+(\\.\\d+)*)(ns|ms|us|µs|m|s|h))+$/\nconst pieces = /((\\d+(\\.\\d+)*)(ns|ms|us|µs|m|s|h))/g\nconst measure = /(ns|ms|us|µs|m|s|h)/g\n\nconst multipliers = {\n  ns: 1e-6,\n  us: 0.001,\n  µs: 0.001,\n  ms: 1,\n  s: 1000,\n  m: 60000,\n  h: 3.6e+6\n}\n\nfunction analyse (time) {\n  let unit = time.match(measure)[0]\n  time = time.substring(0, time.length - unit.length)\n\n  return parseFloat(time) * multipliers[unit]\n}\n\nmodule.exports = promisify(function (time, callback) {\n  if (typeof time !== 'string') {\n    return callback(new Error('the first argument must be a string'))\n  }\n\n  if (!whole.test(time)) {\n    return callback(new Error('invalid time'))\n  }\n\n  callback(null, time.match(pieces).reduce((sum, currentVal) => {\n    return sum + analyse(currentVal)\n  }, 0))\n})\n"]},"metadata":{},"sourceType":"script"}