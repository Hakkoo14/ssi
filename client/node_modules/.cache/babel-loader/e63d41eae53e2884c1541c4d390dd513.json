{"ast":null,"code":"'use strict';\n\nvar debug = require('debug');\n\nvar waterfall = require('async/waterfall');\n\nvar support = require('../support');\n\nvar crypto = require('./crypto');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 2. Exchange\n// -- exchange (signed) ephemeral keys. verify signatures.\n\nmodule.exports = function exchange(state, callback) {\n  log('2. exchange - start');\n  log('2. exchange - writing exchange');\n  waterfall([function (cb) {\n    return crypto.createExchange(state, cb);\n  }, function (ex, cb) {\n    support.write(state, ex);\n    support.read(state.shake, cb);\n  }, function (msg, cb) {\n    log('2. exchange - reading exchange');\n    crypto.verify(state, msg, cb);\n  }, function (cb) {\n    return crypto.generateKeys(state, cb);\n  }], function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    log('2. exchange - finish');\n    callback();\n  });\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/libp2p-secio/src/handshake/exchange.js"],"names":["debug","require","waterfall","support","crypto","log","error","module","exports","exchange","state","callback","cb","createExchange","ex","write","read","shake","msg","verify","generateKeys","err"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AAEA,IAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMI,GAAG,GAAGL,KAAK,CAAC,cAAD,CAAjB;AACAK,GAAG,CAACC,KAAJ,GAAYN,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACAO,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;AACnDN,EAAAA,GAAG,CAAC,qBAAD,CAAH;AAEAA,EAAAA,GAAG,CAAC,gCAAD,CAAH;AACAH,EAAAA,SAAS,CAAC,CACR,UAACU,EAAD;AAAA,WAAQR,MAAM,CAACS,cAAP,CAAsBH,KAAtB,EAA6BE,EAA7B,CAAR;AAAA,GADQ,EAER,UAACE,EAAD,EAAKF,EAAL,EAAY;AACVT,IAAAA,OAAO,CAACY,KAAR,CAAcL,KAAd,EAAqBI,EAArB;AACAX,IAAAA,OAAO,CAACa,IAAR,CAAaN,KAAK,CAACO,KAAnB,EAA0BL,EAA1B;AACD,GALO,EAMR,UAACM,GAAD,EAAMN,EAAN,EAAa;AACXP,IAAAA,GAAG,CAAC,gCAAD,CAAH;AACAD,IAAAA,MAAM,CAACe,MAAP,CAAcT,KAAd,EAAqBQ,GAArB,EAA0BN,EAA1B;AACD,GATO,EAUR,UAACA,EAAD;AAAA,WAAQR,MAAM,CAACgB,YAAP,CAAoBV,KAApB,EAA2BE,EAA3B,CAAR;AAAA,GAVQ,CAAD,EAWN,UAACS,GAAD,EAAS;AACV,QAAIA,GAAJ,EAAS;AAAE,aAAOV,QAAQ,CAACU,GAAD,CAAf;AAAsB;;AAEjChB,IAAAA,GAAG,CAAC,sBAAD,CAAH;AACAM,IAAAA,QAAQ;AACT,GAhBQ,CAAT;AAiBD,CArBD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst waterfall = require('async/waterfall')\n\nconst support = require('../support')\nconst crypto = require('./crypto')\n\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\n// step 2. Exchange\n// -- exchange (signed) ephemeral keys. verify signatures.\nmodule.exports = function exchange (state, callback) {\n  log('2. exchange - start')\n\n  log('2. exchange - writing exchange')\n  waterfall([\n    (cb) => crypto.createExchange(state, cb),\n    (ex, cb) => {\n      support.write(state, ex)\n      support.read(state.shake, cb)\n    },\n    (msg, cb) => {\n      log('2. exchange - reading exchange')\n      crypto.verify(state, msg, cb)\n    },\n    (cb) => crypto.generateKeys(state, cb)\n  ], (err) => {\n    if (err) { return callback(err) }\n\n    log('2. exchange - finish')\n    callback()\n  })\n}\n"]},"metadata":{},"sourceType":"script"}