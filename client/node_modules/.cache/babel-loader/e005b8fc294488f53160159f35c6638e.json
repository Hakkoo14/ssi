{"ast":null,"code":"'use strict';\n\nvar setImmediate = require('async/setImmediate');\n\nvar multihashing = require('multihashing-async');\n/**\n * Validator for publick key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n *\n * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).\n * @param {function(Error)} callback\n * @returns {undefined}\n */\n\n\nvar validatePublicKeyRecord = function validatePublicKeyRecord(key, publicKey, callback) {\n  var done = function done(err) {\n    return setImmediate(function () {\n      return callback(err);\n    });\n  };\n\n  if (!Buffer.isBuffer(key)) {\n    return done(new Error('\"key\" must be a Buffer'));\n  }\n\n  if (key.length < 3) {\n    return done(new Error('invalid public key record'));\n  }\n\n  var prefix = key.slice(0, 4).toString();\n\n  if (prefix !== '/pk/') {\n    return done(new Error('key was not prefixed with /pk/'));\n  }\n\n  var keyhash = key.slice(4);\n  multihashing(publicKey, 'sha2-256', function (err, publicKeyHash) {\n    if (err) {\n      return done(err);\n    }\n\n    if (!keyhash.equals(publicKeyHash)) {\n      return done(new Error('public key does not match passed in key'));\n    }\n\n    done();\n  });\n};\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p-record/src/validators/public-key.js"],"names":["setImmediate","require","multihashing","validatePublicKeyRecord","key","publicKey","callback","done","err","Buffer","isBuffer","Error","length","prefix","slice","toString","keyhash","publicKeyHash","equals","module","exports","func","sign"],"mappings":"AAAA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,GAAD,EAAMC,SAAN,EAAiBC,QAAjB,EAA8B;AAC5D,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD;AAAA,WAASR,YAAY,CAAC;AAAA,aAAMM,QAAQ,CAACE,GAAD,CAAd;AAAA,KAAD,CAArB;AAAA,GAAb;;AAEA,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBN,GAAhB,CAAL,EAA2B;AACzB,WAAOG,IAAI,CAAC,IAAII,KAAJ,CAAU,wBAAV,CAAD,CAAX;AACD;;AAED,MAAIP,GAAG,CAACQ,MAAJ,GAAa,CAAjB,EAAoB;AAClB,WAAOL,IAAI,CAAC,IAAII,KAAJ,CAAU,2BAAV,CAAD,CAAX;AACD;;AAED,MAAME,MAAM,GAAGT,GAAG,CAACU,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgBC,QAAhB,EAAf;;AAEA,MAAIF,MAAM,KAAK,MAAf,EAAuB;AACrB,WAAON,IAAI,CAAC,IAAII,KAAJ,CAAU,gCAAV,CAAD,CAAX;AACD;;AAED,MAAMK,OAAO,GAAGZ,GAAG,CAACU,KAAJ,CAAU,CAAV,CAAhB;AAEAZ,EAAAA,YAAY,CAACG,SAAD,EAAY,UAAZ,EAAwB,UAACG,GAAD,EAAMS,aAAN,EAAwB;AAC1D,QAAIT,GAAJ,EAAS;AACP,aAAOD,IAAI,CAACC,GAAD,CAAX;AACD;;AAED,QAAI,CAACQ,OAAO,CAACE,MAAR,CAAeD,aAAf,CAAL,EAAoC;AAClC,aAAOV,IAAI,CAAC,IAAII,KAAJ,CAAU,yCAAV,CAAD,CAAX;AACD;;AAEDJ,IAAAA,IAAI;AACL,GAVW,CAAZ;AAWD,CA9BD;;AAgCAY,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAElB,uBADS;AAEfmB,EAAAA,IAAI,EAAE;AAFS,CAAjB","sourcesContent":["'use strict'\n\nconst setImmediate = require('async/setImmediate')\nconst multihashing = require('multihashing-async')\n\n/**\n * Validator for publick key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n *\n * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).\n * @param {function(Error)} callback\n * @returns {undefined}\n */\nconst validatePublicKeyRecord = (key, publicKey, callback) => {\n  const done = (err) => setImmediate(() => callback(err))\n\n  if (!Buffer.isBuffer(key)) {\n    return done(new Error('\"key\" must be a Buffer'))\n  }\n\n  if (key.length < 3) {\n    return done(new Error('invalid public key record'))\n  }\n\n  const prefix = key.slice(0, 4).toString()\n\n  if (prefix !== '/pk/') {\n    return done(new Error('key was not prefixed with /pk/'))\n  }\n\n  const keyhash = key.slice(4)\n\n  multihashing(publicKey, 'sha2-256', (err, publicKeyHash) => {\n    if (err) {\n      return done(err)\n    }\n\n    if (!keyhash.equals(publicKeyHash)) {\n      return done(new Error('public key does not match passed in key'))\n    }\n\n    done()\n  })\n}\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n}\n"]},"metadata":{},"sourceType":"script"}