{"ast":null,"code":"'use strict';\n\nvar peerId = require('peer-id');\n\nvar mergeOptions = require('merge-options');\n\nvar waterfall = require('async/waterfall');\n\nvar parallel = require('async/parallel');\n\nvar promisify = require('promisify-es6');\n\nvar defaultConfig = require('../runtime/config-nodejs.js');\n\nvar Keychain = require('libp2p-keychain');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar UnixFs = require('ipfs-unixfs');\n\nvar multicodec = require('multicodec');\n\nvar IPNS = require('../ipns');\n\nvar OfflineDatastore = require('../ipns/routing/offline-datastore');\n\nvar addDefaultAssets = require('./init-assets');\n\nmodule.exports = function init(self) {\n  return promisify(function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    var done = function done(err, res) {\n      if (err) {\n        self.emit('error', err);\n        return callback(err);\n      }\n\n      self.preStart(function (err) {\n        if (err) {\n          self.emit('error', err);\n          return callback(err);\n        }\n\n        self.state.initialized();\n        self.emit('init');\n        callback(null, res);\n      });\n    };\n\n    if (self.state.state() !== 'uninitialized') {\n      return done(new Error('Not able to init from state: ' + self.state.state()));\n    }\n\n    self.state.init();\n    self.log('init'); // An initialized, open repo was passed, use this one!\n\n    if (opts.repo) {\n      self._repo = opts.repo;\n      return done(null, true);\n    }\n\n    opts.emptyRepo = opts.emptyRepo || false;\n    opts.bits = Number(opts.bits) || 2048;\n\n    opts.log = opts.log || function () {};\n\n    var config = mergeOptions(defaultConfig(), self._options.config);\n    var privateKey;\n    waterfall([// Verify repo does not yet exist.\n    function (cb) {\n      return self._repo.exists(cb);\n    }, function (exists, cb) {\n      self.log('repo exists?', exists);\n\n      if (exists === true) {\n        return cb(new Error('repo already exists'));\n      }\n\n      if (opts.privateKey) {\n        self.log('using user-supplied private-key');\n\n        if (typeof opts.privateKey === 'object') {\n          cb(null, opts.privateKey);\n        } else {\n          peerId.createFromPrivKey(Buffer.from(opts.privateKey, 'base64'), cb);\n        }\n      } else {\n        // Generate peer identity keypair + transform to desired format + add to config.\n        opts.log(\"generating \".concat(opts.bits, \"-bit RSA keypair...\"), false);\n        self.log('generating peer id: %s bits', opts.bits);\n        peerId.create({\n          bits: opts.bits\n        }, cb);\n      }\n    }, function (peerId, cb) {\n      self.log('identity generated');\n      config.Identity = {\n        PeerID: peerId.toB58String(),\n        PrivKey: peerId.privKey.bytes.toString('base64')\n      };\n      privateKey = peerId.privKey;\n\n      if (opts.pass) {\n        config.Keychain = Keychain.generateOptions();\n      }\n\n      opts.log('done');\n      opts.log('peer identity: ' + config.Identity.PeerID);\n\n      self._repo.init(config, cb);\n    }, function (_, cb) {\n      return self._repo.open(cb);\n    }, function (cb) {\n      self.log('repo opened');\n\n      if (opts.pass) {\n        self.log('creating keychain');\n        var keychainOptions = Object.assign({\n          passPhrase: opts.pass\n        }, config.Keychain);\n        self._keychain = new Keychain(self._repo.keys, keychainOptions);\n\n        self._keychain.importPeer('self', {\n          privKey: privateKey\n        }, cb);\n      } else {\n        cb(null, true);\n      }\n    }, // Setup the offline routing for IPNS.\n    // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n    function (_, cb) {\n      var offlineDatastore = new OfflineDatastore(self._repo);\n      self._ipns = new IPNS(offlineDatastore, self._repo.datastore, self._peerInfo, self._keychain, self._options);\n      cb(null, true);\n    }, // add empty unixfs dir object (go-ipfs assumes this exists)\n    function (_, cb) {\n      if (opts.emptyRepo) {\n        return cb(null, true);\n      }\n\n      var tasks = [function (cb) {\n        waterfall([function (cb) {\n          try {\n            cb(null, DAGNode.create(new UnixFs('directory').marshal()));\n          } catch (err) {\n            cb(err);\n          }\n        }, function (node, cb) {\n          return self.dag.put(node, {\n            version: 0,\n            format: multicodec.DAG_PB,\n            hashAlg: multicodec.SHA2_256\n          }).then(function (cid) {\n            return cb(null, cid);\n          }, function (error) {\n            return cb(error);\n          });\n        }, function (cid, cb) {\n          return self._ipns.initializeKeyspace(privateKey, cid.toBaseEncodedString(), cb);\n        }], cb);\n      }];\n\n      if (typeof addDefaultAssets === 'function') {\n        // addDefaultAssets is undefined on browsers.\n        // See package.json browser config\n        tasks.push(function (cb) {\n          return addDefaultAssets(self, opts.log, cb);\n        });\n      }\n\n      self.log('adding assets');\n      parallel(tasks, function (err) {\n        if (err) {\n          cb(err);\n        } else {\n          cb(null, true);\n        }\n      });\n    }], done);\n  });\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/components/init.js"],"names":["peerId","require","mergeOptions","waterfall","parallel","promisify","defaultConfig","Keychain","DAGNode","UnixFs","multicodec","IPNS","OfflineDatastore","addDefaultAssets","module","exports","init","self","opts","callback","done","err","res","emit","preStart","state","initialized","Error","log","repo","_repo","emptyRepo","bits","Number","config","_options","privateKey","cb","exists","createFromPrivKey","Buffer","from","create","Identity","PeerID","toB58String","PrivKey","privKey","bytes","toString","pass","generateOptions","_","open","keychainOptions","Object","assign","passPhrase","_keychain","keys","importPeer","offlineDatastore","_ipns","datastore","_peerInfo","tasks","marshal","node","dag","put","version","format","DAG_PB","hashAlg","SHA2_256","then","cid","error","initializeKeyspace","toBaseEncodedString","push"],"mappings":"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","sourcesContent":["'use strict'\n\nconst peerId = require('peer-id')\nconst mergeOptions = require('merge-options')\nconst waterfall = require('async/waterfall')\nconst parallel = require('async/parallel')\nconst promisify = require('promisify-es6')\nconst defaultConfig = require('../runtime/config-nodejs.js')\nconst Keychain = require('libp2p-keychain')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst UnixFs = require('ipfs-unixfs')\nconst multicodec = require('multicodec')\n\nconst IPNS = require('../ipns')\nconst OfflineDatastore = require('../ipns/routing/offline-datastore')\n\nconst addDefaultAssets = require('./init-assets')\n\nmodule.exports = function init (self) {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const done = (err, res) => {\n      if (err) {\n        self.emit('error', err)\n        return callback(err)\n      }\n\n      self.preStart((err) => {\n        if (err) {\n          self.emit('error', err)\n          return callback(err)\n        }\n\n        self.state.initialized()\n        self.emit('init')\n        callback(null, res)\n      })\n    }\n\n    if (self.state.state() !== 'uninitialized') {\n      return done(new Error('Not able to init from state: ' + self.state.state()))\n    }\n\n    self.state.init()\n    self.log('init')\n\n    // An initialized, open repo was passed, use this one!\n    if (opts.repo) {\n      self._repo = opts.repo\n      return done(null, true)\n    }\n\n    opts.emptyRepo = opts.emptyRepo || false\n    opts.bits = Number(opts.bits) || 2048\n    opts.log = opts.log || function () {}\n\n    const config = mergeOptions(defaultConfig(), self._options.config)\n    let privateKey\n\n    waterfall([\n      // Verify repo does not yet exist.\n      (cb) => self._repo.exists(cb),\n      (exists, cb) => {\n        self.log('repo exists?', exists)\n        if (exists === true) {\n          return cb(new Error('repo already exists'))\n        }\n\n        if (opts.privateKey) {\n          self.log('using user-supplied private-key')\n          if (typeof opts.privateKey === 'object') {\n            cb(null, opts.privateKey)\n          } else {\n            peerId.createFromPrivKey(Buffer.from(opts.privateKey, 'base64'), cb)\n          }\n        } else {\n          // Generate peer identity keypair + transform to desired format + add to config.\n          opts.log(`generating ${opts.bits}-bit RSA keypair...`, false)\n          self.log('generating peer id: %s bits', opts.bits)\n          peerId.create({ bits: opts.bits }, cb)\n        }\n      },\n      (peerId, cb) => {\n        self.log('identity generated')\n        config.Identity = {\n          PeerID: peerId.toB58String(),\n          PrivKey: peerId.privKey.bytes.toString('base64')\n        }\n        privateKey = peerId.privKey\n        if (opts.pass) {\n          config.Keychain = Keychain.generateOptions()\n        }\n        opts.log('done')\n        opts.log('peer identity: ' + config.Identity.PeerID)\n\n        self._repo.init(config, cb)\n      },\n      (_, cb) => self._repo.open(cb),\n      (cb) => {\n        self.log('repo opened')\n        if (opts.pass) {\n          self.log('creating keychain')\n          const keychainOptions = Object.assign({ passPhrase: opts.pass }, config.Keychain)\n          self._keychain = new Keychain(self._repo.keys, keychainOptions)\n          self._keychain.importPeer('self', { privKey: privateKey }, cb)\n        } else {\n          cb(null, true)\n        }\n      },\n      // Setup the offline routing for IPNS.\n      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n      (_, cb) => {\n        const offlineDatastore = new OfflineDatastore(self._repo)\n\n        self._ipns = new IPNS(offlineDatastore, self._repo.datastore, self._peerInfo, self._keychain, self._options)\n        cb(null, true)\n      },\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      (_, cb) => {\n        if (opts.emptyRepo) {\n          return cb(null, true)\n        }\n\n        const tasks = [\n          (cb) => {\n            waterfall([\n              (cb) => {\n                try {\n                  cb(null, DAGNode.create(new UnixFs('directory').marshal()))\n                } catch (err) {\n                  cb(err)\n                }\n              },\n              (node, cb) => self.dag.put(node, {\n                version: 0,\n                format: multicodec.DAG_PB,\n                hashAlg: multicodec.SHA2_256\n              }).then(\n                (cid) => cb(null, cid),\n                (error) => cb(error)\n              ),\n              (cid, cb) => self._ipns.initializeKeyspace(privateKey, cid.toBaseEncodedString(), cb)\n            ], cb)\n          }\n        ]\n\n        if (typeof addDefaultAssets === 'function') {\n          // addDefaultAssets is undefined on browsers.\n          // See package.json browser config\n          tasks.push((cb) => addDefaultAssets(self, opts.log, cb))\n        }\n\n        self.log('adding assets')\n        parallel(tasks, (err) => {\n          if (err) {\n            cb(err)\n          } else {\n            cb(null, true)\n          }\n        })\n      }\n    ], done)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}