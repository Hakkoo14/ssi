{"ast":null,"code":"/* @flow */\n'use strict';\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar pull = require('pull-stream');\n/* ::\nimport type {Key, Datastore, Batch, Query, QueryResult, Callback} from 'interface-datastore'\n*/\n\n/**\n * An object with a pair of functions for (invertibly) transforming keys\n */\n\n/* ::\ntype KeyTransform = {\n  convert: KeyMapping,\n  invert: KeyMapping\n}\n*/\n\n/**\n * Map one key onto another key.\n */\n\n/* ::\ntype KeyMapping = (Key) => Key\n*/\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\n\n\nvar KeyTransformDatastore\n/* :: <Value> */\n= /*#__PURE__*/function () {\n  /* :: child: Datastore<Value> */\n\n  /* :: transform: KeyTransform */\n  function KeyTransformDatastore(child\n  /* : Datastore<Value> */\n  , transform\n  /* : KeyTransform */\n  ) {\n    _classCallCheck(this, KeyTransformDatastore);\n\n    this.child = child;\n    this.transform = transform;\n  }\n\n  _createClass(KeyTransformDatastore, [{\n    key: \"open\",\n    value: function open(callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.open(callback);\n    }\n  }, {\n    key: \"put\",\n    value: function put(key\n    /* : Key */\n    , val\n    /* : Value */\n    , callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.put(this.transform.convert(key), val, callback);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key\n    /* : Key */\n    , callback\n    /* : Callback<Value> */\n    )\n    /* : void */\n    {\n      this.child.get(this.transform.convert(key), callback);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key\n    /* : Key */\n    , callback\n    /* : Callback<bool> */\n    )\n    /* : void */\n    {\n      this.child.has(this.transform.convert(key), callback);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key\n    /* : Key */\n    , callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.delete(this.transform.convert(key), callback);\n    }\n  }, {\n    key: \"batch\",\n    value: function batch()\n    /* : Batch<Value> */\n    {\n      var _this = this;\n\n      var b = this.child.batch();\n      return {\n        put: function put(key\n        /* : Key */\n        , value\n        /* : Value */\n        )\n        /* : void */\n        {\n          b.put(_this.transform.convert(key), value);\n        },\n        delete: function _delete(key\n        /* : Key */\n        )\n        /* : void */\n        {\n          b.delete(_this.transform.convert(key));\n        },\n        commit: function commit(callback\n        /* : Callback<void> */\n        )\n        /* : void */\n        {\n          b.commit(callback);\n        }\n      };\n    }\n  }, {\n    key: \"query\",\n    value: function query(q\n    /* : Query<Value> */\n    )\n    /* : QueryResult<Value> */\n    {\n      var _this2 = this;\n\n      return pull(this.child.query(q), pull.map(function (e) {\n        e.key = _this2.transform.invert(e.key);\n        return e;\n      }));\n    }\n  }, {\n    key: \"close\",\n    value: function close(callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.close(callback);\n    }\n  }]);\n\n  return KeyTransformDatastore;\n}();\n\nmodule.exports = KeyTransformDatastore;","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/datastore-core/src/keytransform.js"],"names":["pull","require","KeyTransformDatastore","child","transform","callback","open","key","val","put","convert","get","has","delete","b","batch","value","commit","q","query","map","e","invert","close","module","exports"],"mappings":"AAAA;AACA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;IACMC;AAAsB;;AAC1B;;AACA;AAEA,iCAAaC;AAAM;AAAnB,IAA6CC;AAAU;AAAvD,IAA6E;AAAA;;AAC3E,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;;;WAED,cAAMC;AAAS;AAAf;AAAuC;AAAa;AAClD,WAAKF,KAAL,CAAWG,IAAX,CAAgBD,QAAhB;AACD;;;WAED,aAAKE;AAAI;AAAT,MAAsBC;AAAI;AAA1B,MAAyCH;AAAS;AAAlD;AAA0E;AAAa;AACrF,WAAKF,KAAL,CAAWM,GAAX,CAAe,KAAKL,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CC,GAA5C,EAAiDH,QAAjD;AACD;;;WAED,aAAKE;AAAI;AAAT,MAAsBF;AAAS;AAA/B;AAAwD;AAAa;AACnE,WAAKF,KAAL,CAAWQ,GAAX,CAAe,KAAKP,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CF,QAA5C;AACD;;;WAED,aAAKE;AAAI;AAAT,MAAsBF;AAAS;AAA/B;AAAuD;AAAa;AAClE,WAAKF,KAAL,CAAWS,GAAX,CAAe,KAAKR,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CF,QAA5C;AACD;;;WAED,iBAAQE;AAAI;AAAZ,MAAyBF;AAAS;AAAlC;AAA0D;AAAa;AACrE,WAAKF,KAAL,CAAWU,MAAX,CAAkB,KAAKT,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAlB,EAA+CF,QAA/C;AACD;;;WAED;AAAS;AAAqB;AAAA;;AAC5B,UAAMS,CAAC,GAAG,KAAKX,KAAL,CAAWY,KAAX,EAAV;AACA,aAAO;AACLN,QAAAA,GAAG,EAAE,aAACF;AAAI;AAAL,UAAkBS;AAAM;AAAxB;AAAuC;AAAgB;AAC1DF,UAAAA,CAAC,CAACL,GAAF,CAAM,KAAI,CAACL,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAN,EAAmCS,KAAnC;AACD,SAHI;AAILH,QAAAA,MAAM,EAAE,iBAACN;AAAI;AAAL;AAAkB;AAAgB;AACxCO,UAAAA,CAAC,CAACD,MAAF,CAAS,KAAI,CAACT,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAT;AACD,SANI;AAOLU,QAAAA,MAAM,EAAE,gBAACZ;AAAS;AAAV;AAAkC;AAAgB;AACxDS,UAAAA,CAAC,CAACG,MAAF,CAASZ,QAAT;AACD;AATI,OAAP;AAWD;;;WAED,eAAOa;AAAE;AAAT;AAA+B;AAA2B;AAAA;;AACxD,aAAOlB,IAAI,CACT,KAAKG,KAAL,CAAWgB,KAAX,CAAiBD,CAAjB,CADS,EAETlB,IAAI,CAACoB,GAAL,CAAS,UAAAC,CAAC,EAAI;AACZA,QAAAA,CAAC,CAACd,GAAF,GAAQ,MAAI,CAACH,SAAL,CAAekB,MAAf,CAAsBD,CAAC,CAACd,GAAxB,CAAR;AACA,eAAOc,CAAP;AACD,OAHD,CAFS,CAAX;AAOD;;;WAED,eAAOhB;AAAS;AAAhB;AAAwC;AAAa;AACnD,WAAKF,KAAL,CAAWoB,KAAX,CAAiBlB,QAAjB;AACD;;;;;;AAGHmB,MAAM,CAACC,OAAP,GAAiBvB,qBAAjB","sourcesContent":["/* @flow */\n'use strict'\n\nconst pull = require('pull-stream')\n\n/* ::\nimport type {Key, Datastore, Batch, Query, QueryResult, Callback} from 'interface-datastore'\n*/\n\n/**\n * An object with a pair of functions for (invertibly) transforming keys\n */\n/* ::\ntype KeyTransform = {\n  convert: KeyMapping,\n  invert: KeyMapping\n}\n*/\n\n/**\n * Map one key onto another key.\n */\n/* ::\ntype KeyMapping = (Key) => Key\n*/\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\nclass KeyTransformDatastore /* :: <Value> */ {\n  /* :: child: Datastore<Value> */\n  /* :: transform: KeyTransform */\n\n  constructor (child /* : Datastore<Value> */, transform /* : KeyTransform */) {\n    this.child = child\n    this.transform = transform\n  }\n\n  open (callback /* : Callback<void> */) /* : void */ {\n    this.child.open(callback)\n  }\n\n  put (key /* : Key */, val /* : Value */, callback /* : Callback<void> */) /* : void */ {\n    this.child.put(this.transform.convert(key), val, callback)\n  }\n\n  get (key /* : Key */, callback /* : Callback<Value> */) /* : void */ {\n    this.child.get(this.transform.convert(key), callback)\n  }\n\n  has (key /* : Key */, callback /* : Callback<bool> */) /* : void */ {\n    this.child.has(this.transform.convert(key), callback)\n  }\n\n  delete (key /* : Key */, callback /* : Callback<void> */) /* : void */ {\n    this.child.delete(this.transform.convert(key), callback)\n  }\n\n  batch () /* : Batch<Value> */ {\n    const b = this.child.batch()\n    return {\n      put: (key /* : Key */, value /* : Value */) /* : void */ => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key /* : Key */) /* : void */ => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: (callback /* : Callback<void> */) /* : void */ => {\n        b.commit(callback)\n      }\n    }\n  }\n\n  query (q /* : Query<Value> */) /* : QueryResult<Value> */ {\n    return pull(\n      this.child.query(q),\n      pull.map(e => {\n        e.key = this.transform.invert(e.key)\n        return e\n      })\n    )\n  }\n\n  close (callback /* : Callback<void> */) /* : void */ {\n    this.child.close(callback)\n  }\n}\n\nmodule.exports = KeyTransformDatastore\n"]},"metadata":{},"sourceType":"script"}