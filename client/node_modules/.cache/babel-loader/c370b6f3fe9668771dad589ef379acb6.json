{"ast":null,"code":"'use strict';\n\nvar series = require('async/series');\n\nvar Bitswap = require('ipfs-bitswap');\n\nvar setImmediate = require('async/setImmediate');\n\nvar promisify = require('promisify-es6');\n\nvar IPNS = require('../ipns');\n\nvar routingConfig = require('../ipns/routing/config');\n\nvar createLibp2pBundle = require('./libp2p');\n\nmodule.exports = function (self) {\n  return promisify(function (callback) {\n    var done = function done(err) {\n      if (err) {\n        setImmediate(function () {\n          return self.emit('error', err);\n        });\n        return callback(err);\n      }\n\n      self.state.started();\n      setImmediate(function () {\n        return self.emit('start');\n      });\n      callback();\n    };\n\n    if (self.state.state() !== 'stopped') {\n      return done(new Error(\"Not able to start from state: \".concat(self.state.state())));\n    }\n\n    self.log('starting');\n    self.state.start();\n    series([function (cb) {\n      // The repo may be closed if previously stopped\n      self._repo.closed ? self._repo.open(cb) : cb();\n    }, function (cb) {\n      self._repo.config.get(function (err, config) {\n        if (err) return cb(err);\n        var libp2p = createLibp2pBundle(self, config);\n        libp2p.start(function (err) {\n          if (err) return cb(err);\n          self.libp2p = libp2p;\n          cb();\n        });\n      });\n    }, function (cb) {\n      var ipnsRouting = routingConfig(self);\n      self._ipns = new IPNS(ipnsRouting, self._repo.datastore, self._peerInfo, self._keychain, self._options);\n      self._bitswap = new Bitswap(self.libp2p, self._repo.blocks, {\n        statsEnabled: true\n      });\n\n      self._bitswap.start();\n\n      self._blockService.setExchange(self._bitswap);\n\n      self._preload.start();\n\n      self._ipns.republisher.start();\n\n      self._mfsPreload.start(cb);\n    }], done);\n  });\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/start.js"],"names":["series","require","Bitswap","setImmediate","promisify","IPNS","routingConfig","createLibp2pBundle","module","exports","self","callback","done","err","emit","state","started","Error","log","start","cb","_repo","closed","open","config","get","libp2p","ipnsRouting","_ipns","datastore","_peerInfo","_keychain","_options","_bitswap","blocks","statsEnabled","_blockService","setExchange","_preload","republisher","_mfsPreload"],"mappings":"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","sourcesContent":["'use strict'\n\nconst series = require('async/series')\nconst Bitswap = require('ipfs-bitswap')\nconst setImmediate = require('async/setImmediate')\nconst promisify = require('promisify-es6')\n\nconst IPNS = require('../ipns')\nconst routingConfig = require('../ipns/routing/config')\nconst createLibp2pBundle = require('./libp2p')\n\nmodule.exports = (self) => {\n  return promisify((callback) => {\n    const done = (err) => {\n      if (err) {\n        setImmediate(() => self.emit('error', err))\n        return callback(err)\n      }\n\n      self.state.started()\n      setImmediate(() => self.emit('start'))\n      callback()\n    }\n\n    if (self.state.state() !== 'stopped') {\n      return done(new Error(`Not able to start from state: ${self.state.state()}`))\n    }\n\n    self.log('starting')\n    self.state.start()\n\n    series([\n      (cb) => {\n        // The repo may be closed if previously stopped\n        self._repo.closed\n          ? self._repo.open(cb)\n          : cb()\n      },\n      (cb) => {\n        self._repo.config.get((err, config) => {\n          if (err) return cb(err)\n\n          const libp2p = createLibp2pBundle(self, config)\n\n          libp2p.start(err => {\n            if (err) return cb(err)\n            self.libp2p = libp2p\n            cb()\n          })\n        })\n      },\n      (cb) => {\n        const ipnsRouting = routingConfig(self)\n        self._ipns = new IPNS(ipnsRouting, self._repo.datastore, self._peerInfo, self._keychain, self._options)\n\n        self._bitswap = new Bitswap(\n          self.libp2p,\n          self._repo.blocks,\n          { statsEnabled: true }\n        )\n\n        self._bitswap.start()\n        self._blockService.setExchange(self._bitswap)\n\n        self._preload.start()\n        self._ipns.republisher.start()\n        self._mfsPreload.start(cb)\n      }\n    ], done)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}