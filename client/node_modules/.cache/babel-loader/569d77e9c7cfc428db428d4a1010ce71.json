{"ast":null,"code":"module.exports = Level;\n\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN;\n\nvar util = require('util');\n\nvar Iterator = require('./iterator');\n\nvar xtend = require('xtend');\n\nfunction Level(location) {\n  if (!(this instanceof Level)) return new Level(location);\n  AbstractLevelDOWN.call(this, location);\n}\n\nutil.inherits(Level, AbstractLevelDOWN);\n/**\r\n * Open a database and optionally create if missing.\r\n *\r\n * @param {Object} [options]  storeName and other options passed to indexedDB\r\n *                            open and createObjectStore.\r\n * @param {Function} callback  First parameter will be an error object or null.\r\n */\n\nLevel.prototype._open = function (options, callback) {\n  var self = this; // assume createIfMissing and errorIfExists are initialized by abstract-leveldown\n\n  this._idbOpts = xtend({\n    storeName: this.location,\n    keyEncoding: 'none',\n    valueEncoding: 'none'\n  }, options); // support passing an open database\n\n  if (this._idbOpts.idb) {\n    onsuccess(this._idbOpts.idb);\n  } else {\n    var req = indexedDB.open(this.location); // use the databases current version\n\n    req.onerror = onerror;\n\n    req.onsuccess = function () {\n      onsuccess(req.result);\n    };\n  }\n\n  function onerror(ev) {\n    callback(ev.target.error);\n  } // if the store does not exist and createIfMissing is true, create the object store\n\n\n  function onsuccess(db) {\n    self._db = db;\n\n    var exists = self._db.objectStoreNames.contains(self._idbOpts.storeName);\n\n    if (options.errorIfExists && exists) {\n      self._db.close();\n\n      callback(new Error('store already exists'));\n      return;\n    }\n\n    if (!options.createIfMissing && !exists) {\n      self._db.close();\n\n      callback(new Error('store does not exist'));\n      return;\n    }\n\n    if (options.createIfMissing && !exists) {\n      self._db.close();\n\n      var req2 = indexedDB.open(self.location, self._db.version + 1);\n\n      req2.onerror = function (ev) {\n        callback(ev.target.error);\n      };\n\n      req2.onupgradeneeded = function () {\n        var db = req2.result;\n        db.createObjectStore(self._idbOpts.storeName, self._idbOpts);\n      };\n\n      req2.onsuccess = function () {\n        self._db = req2.result;\n        callback(null, self);\n      };\n\n      return;\n    }\n\n    callback(null, self);\n  }\n};\n\nLevel.prototype._get = function (key, options, callback) {\n  options = xtend(this._idbOpts, options);\n  var origKey = key; // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\n\n  if (options.keyEncoding === 'binary' && !Array.isArray(key)) key = Array.prototype.slice.call(key);\n\n  var tx = this._db.transaction(this._idbOpts.storeName);\n\n  var req = tx.objectStore(this._idbOpts.storeName).openCursor(IDBKeyRange.only(key));\n\n  tx.onabort = function () {\n    callback(tx.error);\n  };\n\n  req.onsuccess = function () {\n    var cursor = req.result;\n\n    if (cursor) {\n      var value = cursor.value; // automatically convert Uint8Array values to Buffer\n\n      if (value instanceof Uint8Array) value = new Buffer(value);\n      if (options.valueEncoding === 'binary' && !Buffer.isBuffer(value)) value = new Buffer(value);\n\n      if (options.asBuffer && !Buffer.isBuffer(value)) {\n        if (value == null) value = new Buffer(0);else if (typeof value === 'string') value = new Buffer(value); // defaults to utf8, should the encoding be utf16? (DOMString)\n        else if (typeof value === 'boolean') value = new Buffer(String(value)); // compatible with leveldb\n          else if (typeof value === 'number') value = new Buffer(String(value)); // compatible with leveldb\n            else if (Array.isArray(value)) value = new Buffer(String(value)); // compatible with leveldb\n              else if (value instanceof Uint8Array) value = new Buffer(value);else return void callback(new TypeError('can\\'t coerce `' + value.constructor.name + '` into a Buffer'));\n      }\n\n      return void callback(null, value, origKey);\n    } else {\n      // 'NotFound' error, consistent with LevelDOWN API\n      return void callback(new Error('NotFound'));\n    }\n  };\n};\n\nLevel.prototype._del = function (key, options, callback) {\n  options = xtend(this._idbOpts, options); // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\n\n  if (options.keyEncoding === 'binary' && !Array.isArray(key)) key = Array.prototype.slice.call(key);\n  var mode = 'readwrite';\n\n  if (options.sync === true) {\n    mode = 'readwriteflush'; // only supported in Firefox (with \"dom.indexedDB.experimental\" pref set to true)\n  }\n\n  var tx = this._db.transaction(this._idbOpts.storeName, mode);\n\n  var req = tx.objectStore(this._idbOpts.storeName).delete(key);\n\n  tx.onabort = function () {\n    callback(tx.error);\n  };\n\n  tx.oncomplete = function () {\n    callback();\n  };\n};\n\nLevel.prototype._put = function (key, value, options, callback) {\n  options = xtend(this._idbOpts, options); // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\n\n  if (options.keyEncoding === 'binary' && !Array.isArray(key)) key = Array.prototype.slice.call(key);\n  var mode = 'readwrite';\n\n  if (options.sync === true) {\n    mode = 'readwriteflush'; // only supported in Firefox (with \"dom.indexedDB.experimental\" pref set to true)\n  }\n\n  var tx = this._db.transaction(this._idbOpts.storeName, mode);\n\n  var req = tx.objectStore(this._idbOpts.storeName).put(value, key);\n\n  tx.onabort = function () {\n    callback(tx.error);\n  };\n\n  tx.oncomplete = function () {\n    callback();\n  };\n};\n\nLevel.prototype._iterator = function (options) {\n  return new Iterator(this, options);\n}; // only support sync: true on batch level, not operation level\n\n\nLevel.prototype._batch = function (array, options, callback) {\n  if (array.length === 0) return process.nextTick(callback);\n  var mode = 'readwrite';\n\n  if (options.sync === true) {\n    mode = 'readwriteflush'; // only supported in Firefox (with \"dom.indexedDB.experimental\" pref set to true)\n  }\n\n  var tx = this._db.transaction(this._idbOpts.storeName, mode);\n\n  var store = tx.objectStore(this._idbOpts.storeName);\n\n  tx.onabort = function () {\n    callback(tx.error);\n  };\n\n  tx.oncomplete = function () {\n    callback();\n  };\n\n  array.forEach(function (currentOp) {\n    var opts = xtend(options, currentOp); // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\n\n    if (opts.keyEncoding === 'binary' && !Array.isArray(currentOp.key)) currentOp.key = Array.prototype.slice.call(currentOp.key);\n\n    if (currentOp.type === 'del') {\n      store.delete(currentOp.key);\n    } else {\n      store.put(currentOp.value, currentOp.key);\n    }\n  });\n};\n\nLevel.prototype._close = function (callback) {\n  this._db.close();\n\n  process.nextTick(callback);\n};\n\nLevel.prototype._approximateSize = function (start, end, callback) {\n  var err = new Error('Not implemented');\n  if (callback) return void process.nextTick(function () {\n    callback(err);\n  });\n  throw err;\n};\n/**\r\n * Destroy the object store and the database if no other object stores exist.\r\n *\r\n * @param {String|Object} location  Name of the database or a database instance.\r\n */\n\n\nLevel.destroy = function (db, callback) {\n  var idbOpts;\n\n  if (db != null && typeof db === 'object') {\n    idbOpts = xtend({\n      location: db.location,\n      storeName: db.location\n    }, db._idbOpts);\n  } else if (typeof db === 'string') {\n    idbOpts = {\n      location: db,\n      storeName: db\n    };\n  } else {\n    throw new TypeError('location must be a string or an object');\n  }\n\n  if (typeof idbOpts.location !== 'string') throw new TypeError('location must be a string');\n  if (typeof idbOpts.storeName !== 'string') throw new TypeError('db.storeName must be a string');\n  var req = indexedDB.open(idbOpts.location); // use the databases current version\n\n  req.onerror = function (ev) {\n    callback(ev.target.error);\n  }; // if the database contains no other stores, delete the database as well\n\n\n  req.onsuccess = function () {\n    var db = req.result;\n\n    function deleteDatabase(name) {\n      var req2 = indexedDB.deleteDatabase(name);\n\n      req2.onerror = function (ev) {\n        callback(ev.target.error);\n      };\n\n      req2.onsuccess = function () {\n        callback();\n      };\n    }\n\n    db.close();\n    if (db.objectStoreNames.length === 0) return void deleteDatabase(idbOpts.location);\n    if (!db.objectStoreNames.contains(idbOpts.storeName)) return void callback(); // delete object store, and if no object stores remain, delete database\n\n    var req2 = indexedDB.open(idbOpts.location, db.version + 1);\n\n    req2.onerror = function (ev) {\n      callback(ev.target.error);\n    };\n\n    req2.onupgradeneeded = function () {\n      db = req2.result;\n      db.deleteObjectStore(idbOpts.storeName);\n    };\n\n    req2.onsuccess = function () {\n      db = req2.result;\n      db.close();\n      if (db.objectStoreNames.length === 0) deleteDatabase(idbOpts.location);else callback();\n    };\n  };\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/datastore-level/node_modules/level-js/index.js"],"names":["module","exports","Level","AbstractLevelDOWN","require","util","Iterator","xtend","location","call","inherits","prototype","_open","options","callback","self","_idbOpts","storeName","keyEncoding","valueEncoding","idb","onsuccess","req","indexedDB","open","onerror","result","ev","target","error","db","_db","exists","objectStoreNames","contains","errorIfExists","close","Error","createIfMissing","req2","version","onupgradeneeded","createObjectStore","_get","key","origKey","Array","isArray","slice","tx","transaction","objectStore","openCursor","IDBKeyRange","only","onabort","cursor","value","Uint8Array","Buffer","isBuffer","asBuffer","String","TypeError","constructor","name","_del","mode","sync","delete","oncomplete","_put","put","_iterator","_batch","array","length","process","nextTick","store","forEach","currentOp","opts","type","_close","_approximateSize","start","end","err","destroy","idbOpts","deleteDatabase","deleteObjectStore"],"mappings":"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","sourcesContent":["module.exports = Level\r\n\r\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN\r\nvar util = require('util')\r\nvar Iterator = require('./iterator')\r\nvar xtend = require('xtend')\r\n\r\nfunction Level(location) {\r\n  if (!(this instanceof Level)) return new Level(location)\r\n\r\n  AbstractLevelDOWN.call(this, location)\r\n}\r\n\r\nutil.inherits(Level, AbstractLevelDOWN)\r\n\r\n/**\r\n * Open a database and optionally create if missing.\r\n *\r\n * @param {Object} [options]  storeName and other options passed to indexedDB\r\n *                            open and createObjectStore.\r\n * @param {Function} callback  First parameter will be an error object or null.\r\n */\r\nLevel.prototype._open = function(options, callback) {\r\n  var self = this\r\n\r\n  // assume createIfMissing and errorIfExists are initialized by abstract-leveldown\r\n  this._idbOpts = xtend({\r\n    storeName: this.location,\r\n    keyEncoding: 'none',\r\n    valueEncoding: 'none'\r\n  }, options)\r\n\r\n  // support passing an open database\r\n  if (this._idbOpts.idb) {\r\n    onsuccess(this._idbOpts.idb)\r\n  } else {\r\n    var req = indexedDB.open(this.location) // use the databases current version\r\n    req.onerror = onerror\r\n    req.onsuccess = function() {\r\n      onsuccess(req.result)\r\n    }\r\n  }\r\n\r\n  function onerror(ev) {\r\n    callback(ev.target.error)\r\n  }\r\n\r\n  // if the store does not exist and createIfMissing is true, create the object store\r\n  function onsuccess(db) {\r\n    self._db = db\r\n\r\n    var exists = self._db.objectStoreNames.contains(self._idbOpts.storeName)\r\n\r\n    if (options.errorIfExists && exists) {\r\n      self._db.close()\r\n      callback(new Error('store already exists'))\r\n      return\r\n    }\r\n\r\n    if (!options.createIfMissing && !exists) {\r\n      self._db.close()\r\n      callback(new Error('store does not exist'))\r\n      return\r\n    }\r\n\r\n    if (options.createIfMissing && !exists) {\r\n      self._db.close()\r\n\r\n      var req2 = indexedDB.open(self.location, self._db.version + 1)\r\n\r\n      req2.onerror = function(ev) {\r\n        callback(ev.target.error)\r\n      }\r\n\r\n      req2.onupgradeneeded = function() {\r\n        var db = req2.result\r\n        db.createObjectStore(self._idbOpts.storeName, self._idbOpts)\r\n      }\r\n\r\n      req2.onsuccess = function() {\r\n        self._db = req2.result\r\n        callback(null, self)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    callback(null, self)\r\n  }\r\n}\r\n\r\nLevel.prototype._get = function(key, options, callback) {\r\n  options = xtend(this._idbOpts, options)\r\n\r\n  var origKey = key\r\n\r\n  // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\r\n  if (options.keyEncoding === 'binary' && !Array.isArray(key)) key = Array.prototype.slice.call(key)\r\n\r\n  var tx = this._db.transaction(this._idbOpts.storeName)\r\n  var req = tx.objectStore(this._idbOpts.storeName).openCursor(IDBKeyRange.only(key))\r\n\r\n  tx.onabort = function() {\r\n    callback(tx.error)\r\n  }\r\n\r\n  req.onsuccess = function() {\r\n    var cursor = req.result\r\n    if (cursor) {\r\n      var value = cursor.value\r\n\r\n      // automatically convert Uint8Array values to Buffer\r\n      if (value instanceof Uint8Array) value = new Buffer(value)\r\n      if (options.valueEncoding === 'binary' && !Buffer.isBuffer(value)) value = new Buffer(value)\r\n\r\n      if (options.asBuffer && !Buffer.isBuffer(value)) {\r\n        if (value == null)                     value = new Buffer(0)\r\n        else if (typeof value === 'string')    value = new Buffer(value) // defaults to utf8, should the encoding be utf16? (DOMString)\r\n        else if (typeof value === 'boolean')   value = new Buffer(String(value)) // compatible with leveldb\r\n        else if (typeof value === 'number')    value = new Buffer(String(value)) // compatible with leveldb\r\n        else if (Array.isArray(value))         value = new Buffer(String(value)) // compatible with leveldb\r\n        else if (value instanceof Uint8Array)  value = new Buffer(value)\r\n        else return void callback(new TypeError('can\\'t coerce `' + value.constructor.name + '` into a Buffer'))\r\n      }\r\n      return void callback(null, value, origKey)\r\n    } else {\r\n      // 'NotFound' error, consistent with LevelDOWN API\r\n      return void callback(new Error('NotFound'))\r\n    }\r\n  }\r\n}\r\n\r\nLevel.prototype._del = function(key, options, callback) {\r\n  options = xtend(this._idbOpts, options)\r\n\r\n  // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\r\n  if (options.keyEncoding === 'binary' && !Array.isArray(key)) key = Array.prototype.slice.call(key)\r\n\r\n  var mode = 'readwrite'\r\n  if (options.sync === true) {\r\n    mode = 'readwriteflush' // only supported in Firefox (with \"dom.indexedDB.experimental\" pref set to true)\r\n  }\r\n  var tx = this._db.transaction(this._idbOpts.storeName, mode)\r\n  var req = tx.objectStore(this._idbOpts.storeName).delete(key)\r\n\r\n  tx.onabort = function() {\r\n    callback(tx.error)\r\n  }\r\n\r\n  tx.oncomplete = function() {\r\n    callback()\r\n  }\r\n}\r\n\r\nLevel.prototype._put = function(key, value, options, callback) {\r\n  options = xtend(this._idbOpts, options)\r\n\r\n  // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\r\n  if (options.keyEncoding === 'binary' && !Array.isArray(key)) key = Array.prototype.slice.call(key)\r\n\r\n  var mode = 'readwrite'\r\n  if (options.sync === true) {\r\n    mode = 'readwriteflush' // only supported in Firefox (with \"dom.indexedDB.experimental\" pref set to true)\r\n  }\r\n  var tx = this._db.transaction(this._idbOpts.storeName, mode)\r\n  var req = tx.objectStore(this._idbOpts.storeName).put(value, key)\r\n\r\n  tx.onabort = function() {\r\n    callback(tx.error)\r\n  }\r\n\r\n  tx.oncomplete = function() {\r\n    callback()\r\n  }\r\n}\r\n\r\nLevel.prototype._iterator = function(options) {\r\n  return new Iterator(this, options)\r\n}\r\n\r\n// only support sync: true on batch level, not operation level\r\nLevel.prototype._batch = function(array, options, callback) {\r\n  if (array.length === 0) return process.nextTick(callback)\r\n\r\n  var mode = 'readwrite'\r\n  if (options.sync === true) {\r\n    mode = 'readwriteflush' // only supported in Firefox (with \"dom.indexedDB.experimental\" pref set to true)\r\n  }\r\n  var tx = this._db.transaction(this._idbOpts.storeName, mode)\r\n  var store = tx.objectStore(this._idbOpts.storeName)\r\n\r\n  tx.onabort = function() {\r\n    callback(tx.error)\r\n  }\r\n\r\n  tx.oncomplete = function() {\r\n    callback()\r\n  }\r\n\r\n  array.forEach(function(currentOp) {\r\n    var opts = xtend(options, currentOp)\r\n\r\n    // support binary keys for any iterable type via array (ArrayBuffers as keys are only supported in IndexedDB Second Edition)\r\n    if (opts.keyEncoding === 'binary' && !Array.isArray(currentOp.key)) currentOp.key = Array.prototype.slice.call(currentOp.key)\r\n\r\n    if (currentOp.type === 'del') {\r\n      store.delete(currentOp.key)\r\n    } else {\r\n      store.put(currentOp.value, currentOp.key)\r\n    }\r\n  })\r\n}\r\n\r\nLevel.prototype._close = function (callback) {\r\n  this._db.close()\r\n  process.nextTick(callback)\r\n}\r\n\r\nLevel.prototype._approximateSize = function (start, end, callback) {\r\n  var err = new Error('Not implemented')\r\n  if (callback)\r\n    return void process.nextTick(function() {\r\n      callback(err)\r\n    })\r\n\r\n  throw err\r\n}\r\n\r\n/**\r\n * Destroy the object store and the database if no other object stores exist.\r\n *\r\n * @param {String|Object} location  Name of the database or a database instance.\r\n */\r\nLevel.destroy = function(db, callback) {\r\n  var idbOpts\r\n  if (db != null && typeof db === 'object') {\r\n    idbOpts = xtend({\r\n      location: db.location,\r\n      storeName: db.location\r\n    }, db._idbOpts)\r\n  } else if (typeof db === 'string') {\r\n    idbOpts = {\r\n      location: db,\r\n      storeName: db\r\n    }\r\n  } else {\r\n    throw new TypeError('location must be a string or an object')\r\n  }\r\n\r\n  if (typeof idbOpts.location !== 'string') throw new TypeError('location must be a string')\r\n  if (typeof idbOpts.storeName !== 'string') throw new TypeError('db.storeName must be a string')\r\n\r\n  var req = indexedDB.open(idbOpts.location) // use the databases current version\r\n\r\n  req.onerror = function(ev) {\r\n    callback(ev.target.error)\r\n  }\r\n\r\n  // if the database contains no other stores, delete the database as well\r\n  req.onsuccess = function() {\r\n    var db = req.result\r\n\r\n    function deleteDatabase(name) {\r\n      var req2 = indexedDB.deleteDatabase(name)\r\n      req2.onerror = function(ev) {\r\n        callback(ev.target.error)\r\n      }\r\n      req2.onsuccess = function() {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    db.close()\r\n\r\n    if (db.objectStoreNames.length === 0) return void deleteDatabase(idbOpts.location)\r\n    if (!db.objectStoreNames.contains(idbOpts.storeName)) return void callback()\r\n\r\n    // delete object store, and if no object stores remain, delete database\r\n    var req2 = indexedDB.open(idbOpts.location, db.version + 1)\r\n\r\n    req2.onerror = function(ev) {\r\n      callback(ev.target.error)\r\n    }\r\n\r\n    req2.onupgradeneeded = function() {\r\n      db = req2.result\r\n      db.deleteObjectStore(idbOpts.storeName)\r\n    }\r\n\r\n    req2.onsuccess = function() {\r\n      db = req2.result\r\n      db.close()\r\n\r\n      if (db.objectStoreNames.length === 0) deleteDatabase(idbOpts.location)\r\n      else callback()\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}