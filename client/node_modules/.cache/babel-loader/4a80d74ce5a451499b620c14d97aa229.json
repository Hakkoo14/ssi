{"ast":null,"code":"'use strict';\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar deferred = require('pull-defer');\n\nvar toPullStream = require('async-iterator-to-pull-stream');\n\nvar _require = require('./utils'),\n    normalizePath = _require.normalizePath;\n\nmodule.exports = function (self) {\n  return function catPullStream(ipfsPath, options) {\n    if (typeof ipfsPath === 'function') {\n      throw new Error('You must supply an ipfsPath');\n    }\n\n    options = options || {};\n    ipfsPath = normalizePath(ipfsPath);\n    var pathComponents = ipfsPath.split('/');\n\n    if (options.preload !== false) {\n      self._preload(pathComponents[0]);\n    }\n\n    var d = deferred.source();\n    exporter(ipfsPath, self._ipld, options).then(function (file) {\n      // File may not have unixfs prop if small & imported with rawLeaves true\n      if (file.unixfs && file.unixfs.type.includes('dir')) {\n        return d.abort(new Error('this dag node is a directory'));\n      }\n\n      if (!file.content) {\n        return d.abort(new Error('this dag node has no content'));\n      }\n\n      d.resolve(toPullStream.source(file.content(options)));\n    }, function (err) {\n      d.abort(err);\n    });\n    return d;\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/files-regular/cat-pull-stream.js"],"names":["exporter","require","deferred","toPullStream","normalizePath","module","exports","self","catPullStream","ipfsPath","options","Error","pathComponents","split","preload","_preload","d","source","_ipld","then","file","unixfs","type","includes","abort","content","resolve","err"],"mappings":"AAAA;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,+BAAD,CAA5B;;AACA,eAA0BA,OAAO,CAAC,SAAD,CAAjC;AAAA,IAAQG,aAAR,YAAQA,aAAR;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,SAAO,SAASC,aAAT,CAAwBC,QAAxB,EAAkCC,OAAlC,EAA2C;AAChD,QAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAM,IAAIE,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAEDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEAD,IAAAA,QAAQ,GAAGL,aAAa,CAACK,QAAD,CAAxB;AACA,QAAMG,cAAc,GAAGH,QAAQ,CAACI,KAAT,CAAe,GAAf,CAAvB;;AAEA,QAAIH,OAAO,CAACI,OAAR,KAAoB,KAAxB,EAA+B;AAC7BP,MAAAA,IAAI,CAACQ,QAAL,CAAcH,cAAc,CAAC,CAAD,CAA5B;AACD;;AAED,QAAMI,CAAC,GAAGd,QAAQ,CAACe,MAAT,EAAV;AAEAjB,IAAAA,QAAQ,CAACS,QAAD,EAAWF,IAAI,CAACW,KAAhB,EAAuBR,OAAvB,CAAR,CACGS,IADH,CACQ,UAAAC,IAAI,EAAI;AACZ;AACA,UAAIA,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACC,MAAL,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0B,KAA1B,CAAnB,EAAqD;AACnD,eAAOP,CAAC,CAACQ,KAAF,CAAQ,IAAIb,KAAJ,CAAU,8BAAV,CAAR,CAAP;AACD;;AAED,UAAI,CAACS,IAAI,CAACK,OAAV,EAAmB;AACjB,eAAOT,CAAC,CAACQ,KAAF,CAAQ,IAAIb,KAAJ,CAAU,8BAAV,CAAR,CAAP;AACD;;AAEDK,MAAAA,CAAC,CAACU,OAAF,CAAUvB,YAAY,CAACc,MAAb,CAAoBG,IAAI,CAACK,OAAL,CAAaf,OAAb,CAApB,CAAV;AACD,KAZH,EAYK,UAAAiB,GAAG,EAAI;AACRX,MAAAA,CAAC,CAACQ,KAAF,CAAQG,GAAR;AACD,KAdH;AAgBA,WAAOX,CAAP;AACD,GAjCD;AAkCD,CAnCD","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst deferred = require('pull-defer')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst { normalizePath } = require('./utils')\n\nmodule.exports = function (self) {\n  return function catPullStream (ipfsPath, options) {\n    if (typeof ipfsPath === 'function') {\n      throw new Error('You must supply an ipfsPath')\n    }\n\n    options = options || {}\n\n    ipfsPath = normalizePath(ipfsPath)\n    const pathComponents = ipfsPath.split('/')\n\n    if (options.preload !== false) {\n      self._preload(pathComponents[0])\n    }\n\n    const d = deferred.source()\n\n    exporter(ipfsPath, self._ipld, options)\n      .then(file => {\n        // File may not have unixfs prop if small & imported with rawLeaves true\n        if (file.unixfs && file.unixfs.type.includes('dir')) {\n          return d.abort(new Error('this dag node is a directory'))\n        }\n\n        if (!file.content) {\n          return d.abort(new Error('this dag node has no content'))\n        }\n\n        d.resolve(toPullStream.source(file.content(options)))\n      }, err => {\n        d.abort(err)\n      })\n\n    return d\n  }\n}\n"]},"metadata":{},"sourceType":"script"}