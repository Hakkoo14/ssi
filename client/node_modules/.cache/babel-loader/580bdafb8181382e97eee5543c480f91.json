{"ast":null,"code":"var toDataView = require('to-data-view');\n\nvar RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\nvar RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV';\nvar CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\n\nmodule.exports = function base32Encode(data, variant, options) {\n  options = options || {};\n  var alphabet, defaultPadding;\n\n  switch (variant) {\n    case 'RFC3548':\n    case 'RFC4648':\n      alphabet = RFC4648;\n      defaultPadding = true;\n      break;\n\n    case 'RFC4648-HEX':\n      alphabet = RFC4648_HEX;\n      defaultPadding = true;\n      break;\n\n    case 'Crockford':\n      alphabet = CROCKFORD;\n      defaultPadding = false;\n      break;\n\n    default:\n      throw new Error('Unknown base32 variant: ' + variant);\n  }\n\n  var padding = options.padding !== undefined ? options.padding : defaultPadding;\n  var view = toDataView(data);\n  var bits = 0;\n  var value = 0;\n  var output = '';\n\n  for (var i = 0; i < view.byteLength; i++) {\n    value = value << 8 | view.getUint8(i);\n    bits += 8;\n\n    while (bits >= 5) {\n      output += alphabet[value >>> bits - 5 & 31];\n      bits -= 5;\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[value << 5 - bits & 31];\n  }\n\n  if (padding) {\n    while (output.length % 8 !== 0) {\n      output += '=';\n    }\n  }\n\n  return output;\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/base32-encode/index.js"],"names":["toDataView","require","RFC4648","RFC4648_HEX","CROCKFORD","module","exports","base32Encode","data","variant","options","alphabet","defaultPadding","Error","padding","undefined","view","bits","value","output","i","byteLength","getUint8","length"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAIC,OAAO,GAAG,kCAAd;AACA,IAAIC,WAAW,GAAG,kCAAlB;AACA,IAAIC,SAAS,GAAG,kCAAhB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+C;AAC9DA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIC,QAAJ,EAAcC,cAAd;;AAEA,UAAQH,OAAR;AACE,SAAK,SAAL;AACA,SAAK,SAAL;AACEE,MAAAA,QAAQ,GAAGT,OAAX;AACAU,MAAAA,cAAc,GAAG,IAAjB;AACA;;AACF,SAAK,aAAL;AACED,MAAAA,QAAQ,GAAGR,WAAX;AACAS,MAAAA,cAAc,GAAG,IAAjB;AACA;;AACF,SAAK,WAAL;AACED,MAAAA,QAAQ,GAAGP,SAAX;AACAQ,MAAAA,cAAc,GAAG,KAAjB;AACA;;AACF;AACE,YAAM,IAAIC,KAAJ,CAAU,6BAA6BJ,OAAvC,CAAN;AAfJ;;AAkBA,MAAIK,OAAO,GAAIJ,OAAO,CAACI,OAAR,KAAoBC,SAApB,GAAgCL,OAAO,CAACI,OAAxC,GAAkDF,cAAjE;AACA,MAAII,IAAI,GAAGhB,UAAU,CAACQ,IAAD,CAArB;AAEA,MAAIS,IAAI,GAAG,CAAX;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,UAAzB,EAAqCD,CAAC,EAAtC,EAA0C;AACxCF,IAAAA,KAAK,GAAIA,KAAK,IAAI,CAAV,GAAeF,IAAI,CAACM,QAAL,CAAcF,CAAd,CAAvB;AACAH,IAAAA,IAAI,IAAI,CAAR;;AAEA,WAAOA,IAAI,IAAI,CAAf,EAAkB;AAChBE,MAAAA,MAAM,IAAIR,QAAQ,CAAEO,KAAK,KAAMD,IAAI,GAAG,CAAnB,GAAyB,EAA1B,CAAlB;AACAA,MAAAA,IAAI,IAAI,CAAR;AACD;AACF;;AAED,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZE,IAAAA,MAAM,IAAIR,QAAQ,CAAEO,KAAK,IAAK,IAAID,IAAf,GAAwB,EAAzB,CAAlB;AACD;;AAED,MAAIH,OAAJ,EAAa;AACX,WAAQK,MAAM,CAACI,MAAP,GAAgB,CAAjB,KAAwB,CAA/B,EAAkC;AAChCJ,MAAAA,MAAM,IAAI,GAAV;AACD;AACF;;AAED,SAAOA,MAAP;AACD,CAlDD","sourcesContent":["var toDataView = require('to-data-view')\n\nvar RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\nvar RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV'\nvar CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'\n\nmodule.exports = function base32Encode (data, variant, options) {\n  options = options || {}\n  var alphabet, defaultPadding\n\n  switch (variant) {\n    case 'RFC3548':\n    case 'RFC4648':\n      alphabet = RFC4648\n      defaultPadding = true\n      break\n    case 'RFC4648-HEX':\n      alphabet = RFC4648_HEX\n      defaultPadding = true\n      break\n    case 'Crockford':\n      alphabet = CROCKFORD\n      defaultPadding = false\n      break\n    default:\n      throw new Error('Unknown base32 variant: ' + variant)\n  }\n\n  var padding = (options.padding !== undefined ? options.padding : defaultPadding)\n  var view = toDataView(data)\n\n  var bits = 0\n  var value = 0\n  var output = ''\n\n  for (var i = 0; i < view.byteLength; i++) {\n    value = (value << 8) | view.getUint8(i)\n    bits += 8\n\n    while (bits >= 5) {\n      output += alphabet[(value >>> (bits - 5)) & 31]\n      bits -= 5\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[(value << (5 - bits)) & 31]\n  }\n\n  if (padding) {\n    while ((output.length % 8) !== 0) {\n      output += '='\n    }\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"script"}