{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar WantlistEntry = require('../wantlist').Entry;\n\nvar CID = require('cids');\n\nvar assert = require('assert');\n\nmodule.exports = /*#__PURE__*/function () {\n  function BitswapMessageEntry(cid, priority, cancel) {\n    _classCallCheck(this, BitswapMessageEntry);\n\n    assert(CID.isCID(cid), 'needs valid cid');\n    this.entry = new WantlistEntry(cid, priority);\n    this.cancel = Boolean(cancel);\n  }\n\n  _createClass(BitswapMessageEntry, [{\n    key: \"cid\",\n    get: function get() {\n      return this.entry.cid;\n    },\n    set: function set(cid) {\n      this.entry.cid = cid;\n    }\n  }, {\n    key: \"priority\",\n    get: function get() {\n      return this.entry.priority;\n    },\n    set: function set(val) {\n      this.entry.priority = val;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      var cidStr = this.cid.toBaseEncodedString();\n      return \"BitswapMessageEntry \".concat(cidStr, \" <cancel: \").concat(this.cancel, \", priority: \").concat(this.priority, \">\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.cancel === other.cancel && this.entry.equals(other.entry);\n    }\n  }]);\n\n  return BitswapMessageEntry;\n}();","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs-bitswap/src/types/message/entry.js"],"names":["WantlistEntry","require","Entry","CID","assert","module","exports","cid","priority","cancel","isCID","entry","Boolean","val","Symbol","toStringTag","cidStr","toBaseEncodedString","other","equals"],"mappings":"AAAA;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBC,KAA7C;;AACA,IAAMC,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEAI,MAAM,CAACC,OAAP;AACE,+BAAaC,GAAb,EAAkBC,QAAlB,EAA4BC,MAA5B,EAAoC;AAAA;;AAClCL,IAAAA,MAAM,CAACD,GAAG,CAACO,KAAJ,CAAUH,GAAV,CAAD,EAAiB,iBAAjB,CAAN;AACA,SAAKI,KAAL,GAAa,IAAIX,aAAJ,CAAkBO,GAAlB,EAAuBC,QAAvB,CAAb;AACA,SAAKC,MAAL,GAAcG,OAAO,CAACH,MAAD,CAArB;AACD;;AALH;AAAA;AAAA,SAOE,eAAW;AACT,aAAO,KAAKE,KAAL,CAAWJ,GAAlB;AACD,KATH;AAAA,SAWE,aAASA,GAAT,EAAc;AACZ,WAAKI,KAAL,CAAWJ,GAAX,GAAiBA,GAAjB;AACD;AAbH;AAAA;AAAA,SAeE,eAAgB;AACd,aAAO,KAAKI,KAAL,CAAWH,QAAlB;AACD,KAjBH;AAAA,SAmBE,aAAcK,GAAd,EAAmB;AACjB,WAAKF,KAAL,CAAWH,QAAX,GAAsBK,GAAtB;AACD;AArBH;AAAA,SAuBOC,MAAM,CAACC,WAvBd;AAAA,SAuBE,eAA4B;AAC1B,UAAMC,MAAM,GAAG,KAAKT,GAAL,CAASU,mBAAT,EAAf;AAEA,2CAA8BD,MAA9B,uBAAiD,KAAKP,MAAtD,yBAA2E,KAAKD,QAAhF;AACD;AA3BH;AAAA;AAAA,WA6BE,gBAAQU,KAAR,EAAe;AACb,aAAQ,KAAKT,MAAL,KAAgBS,KAAK,CAACT,MAAvB,IACA,KAAKE,KAAL,CAAWQ,MAAX,CAAkBD,KAAK,CAACP,KAAxB,CADP;AAED;AAhCH;;AAAA;AAAA","sourcesContent":["'use strict'\n\nconst WantlistEntry = require('../wantlist').Entry\nconst CID = require('cids')\nconst assert = require('assert')\n\nmodule.exports = class BitswapMessageEntry {\n  constructor (cid, priority, cancel) {\n    assert(CID.isCID(cid), 'needs valid cid')\n    this.entry = new WantlistEntry(cid, priority)\n    this.cancel = Boolean(cancel)\n  }\n\n  get cid () {\n    return this.entry.cid\n  }\n\n  set cid (cid) {\n    this.entry.cid = cid\n  }\n\n  get priority () {\n    return this.entry.priority\n  }\n\n  set priority (val) {\n    this.entry.priority = val\n  }\n\n  get [Symbol.toStringTag] () {\n    const cidStr = this.cid.toBaseEncodedString()\n\n    return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`\n  }\n\n  equals (other) {\n    return (this.cancel === other.cancel) &&\n           this.entry.equals(other.entry)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}