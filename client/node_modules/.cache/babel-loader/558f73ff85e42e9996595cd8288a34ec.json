{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Connection = require('interface-connection').Connection;\n\nvar nextTick = require('async/nextTick');\n\nvar debug = require('debug');\n\nvar MULTIPLEX_CODEC = require('./codec');\n\nvar log = debug('libp2p-mplex:muxer');\nlog.err = debug('libp2p-mplex:muxer:error');\n\nfunction noop() {}\n\nvar MultiplexMuxer = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(MultiplexMuxer, _EventEmitter);\n\n  var _super = _createSuper(MultiplexMuxer);\n\n  /**\n   * @constructor\n   * @param {Connection} conn\n   * @param {Mplex} multiplex\n   */\n  function MultiplexMuxer(conn, multiplex) {\n    var _this;\n\n    _classCallCheck(this, MultiplexMuxer);\n\n    _this = _super.call(this);\n    _this.conn = conn;\n    _this.multiplex = multiplex;\n    _this.multicodec = MULTIPLEX_CODEC;\n    multiplex.on('close', function () {\n      return _this.emit('close');\n    });\n    multiplex.on('error', function (err) {\n      return _this.emit('error', err);\n    });\n    multiplex.on('stream', function (stream) {\n      // install default error handler so that it doesn't throw\n      stream.on('error', function (err) {\n        log.err('receiver stream errored', err);\n      });\n\n      _this.emit('stream', new Connection(stream, _this.conn));\n    });\n    return _this;\n  }\n  /**\n   * Creates a new stream from the `Connection` used in creating the muxer\n   * @param {function(Error, Connection)} callback\n   * @returns {Connection}\n   */\n\n\n  _createClass(MultiplexMuxer, [{\n    key: \"newStream\",\n    value: function newStream(callback) {\n      callback = callback || noop;\n      var stream = this.multiplex.createStream(); // install default error handler so that it doesn't throw\n\n      stream.on('error', function (err) {\n        log.err('initiator stream errored', err);\n      });\n      var conn = new Connection(stream, this.conn);\n      nextTick(callback, null, conn);\n      return conn;\n    }\n    /**\n     * Ends the connection and all of its streams\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"end\",\n    value: function end(callback) {\n      callback = callback || noop;\n\n      if (this.multiplex.destroyed) {\n        return nextTick(callback);\n      }\n\n      this.multiplex.once('close', callback);\n      this.multiplex.close();\n    }\n  }]);\n\n  return MultiplexMuxer;\n}(EventEmitter);\n\nmodule.exports = MultiplexMuxer;","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/pull-mplex/src/muxer.js"],"names":["EventEmitter","require","Connection","nextTick","debug","MULTIPLEX_CODEC","log","err","noop","MultiplexMuxer","conn","multiplex","multicodec","on","emit","stream","callback","createStream","destroyed","once","close","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;AACA,IAAME,UAAU,GAAGD,OAAO,CAAC,sBAAD,CAAP,CAAgCC,UAAnD;;AACA,IAAMC,QAAQ,GAAGF,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMI,eAAe,GAAGJ,OAAO,CAAC,SAAD,CAA/B;;AAEA,IAAMK,GAAG,GAAGF,KAAK,CAAC,oBAAD,CAAjB;AACAE,GAAG,CAACC,GAAJ,GAAUH,KAAK,CAAC,0BAAD,CAAf;;AAEA,SAASI,IAAT,GAAiB,CAAE;;IAEbC,c;;;;;AACJ;AACF;AACA;AACA;AACA;AACE,0BAAaC,IAAb,EAAmBC,SAAnB,EAA8B;AAAA;;AAAA;;AAC5B;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,SAAL,GAAiBA,SAAjB;AACA,UAAKC,UAAL,GAAkBP,eAAlB;AAEAM,IAAAA,SAAS,CAACE,EAAV,CAAa,OAAb,EAAsB;AAAA,aAAM,MAAKC,IAAL,CAAU,OAAV,CAAN;AAAA,KAAtB;AACAH,IAAAA,SAAS,CAACE,EAAV,CAAa,OAAb,EAAsB,UAACN,GAAD;AAAA,aAAS,MAAKO,IAAL,CAAU,OAAV,EAAmBP,GAAnB,CAAT;AAAA,KAAtB;AAEAI,IAAAA,SAAS,CAACE,EAAV,CAAa,QAAb,EAAuB,UAACE,MAAD,EAAY;AACjC;AACAA,MAAAA,MAAM,CAACF,EAAP,CAAU,OAAV,EAAmB,UAACN,GAAD,EAAS;AAC1BD,QAAAA,GAAG,CAACC,GAAJ,CAAQ,yBAAR,EAAmCA,GAAnC;AACD,OAFD;;AAGA,YAAKO,IAAL,CAAU,QAAV,EAAoB,IAAIZ,UAAJ,CAAea,MAAf,EAAuB,MAAKL,IAA5B,CAApB;AACD,KAND;AAT4B;AAgB7B;AAED;AACF;AACA;AACA;AACA;;;;;WACE,mBAAWM,QAAX,EAAqB;AACnBA,MAAAA,QAAQ,GAAGA,QAAQ,IAAIR,IAAvB;AACA,UAAIO,MAAM,GAAG,KAAKJ,SAAL,CAAeM,YAAf,EAAb,CAFmB,CAGnB;;AACAF,MAAAA,MAAM,CAACF,EAAP,CAAU,OAAV,EAAmB,UAACN,GAAD,EAAS;AAC1BD,QAAAA,GAAG,CAACC,GAAJ,CAAQ,0BAAR,EAAoCA,GAApC;AACD,OAFD;AAGA,UAAMG,IAAI,GAAG,IAAIR,UAAJ,CAAea,MAAf,EAAuB,KAAKL,IAA5B,CAAb;AACAP,MAAAA,QAAQ,CAACa,QAAD,EAAW,IAAX,EAAiBN,IAAjB,CAAR;AACA,aAAOA,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,aAAKM,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGA,QAAQ,IAAIR,IAAvB;;AACA,UAAI,KAAKG,SAAL,CAAeO,SAAnB,EAA8B;AAC5B,eAAOf,QAAQ,CAACa,QAAD,CAAf;AACD;;AACD,WAAKL,SAAL,CAAeQ,IAAf,CAAoB,OAApB,EAA6BH,QAA7B;AACA,WAAKL,SAAL,CAAeS,KAAf;AACD;;;;EArD0BpB,Y;;AAwD7BqB,MAAM,CAACC,OAAP,GAAiBb,cAAjB","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst Connection = require('interface-connection').Connection\nconst nextTick = require('async/nextTick')\nconst debug = require('debug')\n\nconst MULTIPLEX_CODEC = require('./codec')\n\nconst log = debug('libp2p-mplex:muxer')\nlog.err = debug('libp2p-mplex:muxer:error')\n\nfunction noop () {}\n\nclass MultiplexMuxer extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Connection} conn\n   * @param {Mplex} multiplex\n   */\n  constructor (conn, multiplex) {\n    super()\n    this.conn = conn\n    this.multiplex = multiplex\n    this.multicodec = MULTIPLEX_CODEC\n\n    multiplex.on('close', () => this.emit('close'))\n    multiplex.on('error', (err) => this.emit('error', err))\n\n    multiplex.on('stream', (stream) => {\n      // install default error handler so that it doesn't throw\n      stream.on('error', (err) => {\n        log.err('receiver stream errored', err)\n      })\n      this.emit('stream', new Connection(stream, this.conn))\n    })\n  }\n\n  /**\n   * Creates a new stream from the `Connection` used in creating the muxer\n   * @param {function(Error, Connection)} callback\n   * @returns {Connection}\n   */\n  newStream (callback) {\n    callback = callback || noop\n    let stream = this.multiplex.createStream()\n    // install default error handler so that it doesn't throw\n    stream.on('error', (err) => {\n      log.err('initiator stream errored', err)\n    })\n    const conn = new Connection(stream, this.conn)\n    nextTick(callback, null, conn)\n    return conn\n  }\n\n  /**\n   * Ends the connection and all of its streams\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  end (callback) {\n    callback = callback || noop\n    if (this.multiplex.destroyed) {\n      return nextTick(callback)\n    }\n    this.multiplex.once('close', callback)\n    this.multiplex.close()\n  }\n}\n\nmodule.exports = MultiplexMuxer\n"]},"metadata":{},"sourceType":"script"}