{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashes');\n\nvar createNode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, type, options) {\n    var format, hashAlg, node, cid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            format = mc[options.format.toUpperCase().replace(/-/g, '_')];\n            hashAlg = mh.names[options.hashAlg];\n            node = DAGNode.create(new UnixFS(type).marshal());\n            _context.next = 5;\n            return context.ipld.put(node, format, {\n              cidVersion: options.cidVersion,\n              hashAlg: hashAlg\n            });\n\n          case 5:\n            cid = _context.sent;\n            return _context.abrupt(\"return\", {\n              cid: cid,\n              node: node\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createNode(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createNode;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs-mfs/src/core/utils/create-node.js"],"names":["UnixFS","require","DAGNode","mc","mh","createNode","context","type","options","format","toUpperCase","replace","hashAlg","names","node","create","marshal","ipld","put","cidVersion","cid","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,eAEIA,OAAO,CAAC,aAAD,CAFX;AAAA,IACEC,OADF,YACEA,OADF;;AAGA,IAAMC,EAAE,GAAGF,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAMG,EAAE,GAAGH,OAAO,CAAC,aAAD,CAAlB;;AAEA,IAAMI,UAAU;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,MADW,GACFN,EAAE,CAACK,OAAO,CAACC,MAAR,CAAeC,WAAf,GAA6BC,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAD,CADA;AAEXC,YAAAA,OAFW,GAEDR,EAAE,CAACS,KAAH,CAASL,OAAO,CAACI,OAAjB,CAFC;AAIXE,YAAAA,IAJW,GAIJZ,OAAO,CAACa,MAAR,CAAe,IAAIf,MAAJ,CAAWO,IAAX,EAAiBS,OAAjB,EAAf,CAJI;AAAA;AAAA,mBAKCV,OAAO,CAACW,IAAR,CAAaC,GAAb,CAAiBJ,IAAjB,EAAuBL,MAAvB,EAA+B;AAC/CU,cAAAA,UAAU,EAAEX,OAAO,CAACW,UAD2B;AAE/CP,cAAAA,OAAO,EAAPA;AAF+C,aAA/B,CALD;;AAAA;AAKXQ,YAAAA,GALW;AAAA,6CAUV;AACLA,cAAAA,GAAG,EAAHA,GADK;AAELN,cAAAA,IAAI,EAAJA;AAFK,aAVU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVT,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAgBAgB,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["'use strict'\n\nconst UnixFS = require('ipfs-unixfs')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst mc = require('multicodec')\nconst mh = require('multihashes')\n\nconst createNode = async (context, type, options) => {\n  const format = mc[options.format.toUpperCase().replace(/-/g, '_')]\n  const hashAlg = mh.names[options.hashAlg]\n\n  const node = DAGNode.create(new UnixFS(type).marshal())\n  const cid = await context.ipld.put(node, format, {\n    cidVersion: options.cidVersion,\n    hashAlg\n  })\n\n  return {\n    cid,\n    node\n  }\n}\n\nmodule.exports = createNode\n"]},"metadata":{},"sourceType":"script"}