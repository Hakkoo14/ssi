{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Heap = require('heap');\n\nvar distance = require('xor-distance');\n\nvar debug = require('debug');\n\nvar promisify = require('promisify-es6');\n\nvar utils = require('./utils');\n\nvar log = debug('libp2p:dht:peer-queue');\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nvar PeerQueue = /*#__PURE__*/function () {\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Buffer} from - The sha2-256 encoded peer id\n   */\n  function PeerQueue(from) {\n    _classCallCheck(this, PeerQueue);\n\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   * @returns {Promise}\n   */\n\n\n  _createClass(PeerQueue, [{\n    key: \"enqueue\",\n    value: function () {\n      var _enqueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var key, el;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                log('enqueue %s', id.toB58String());\n                _context.next = 3;\n                return promisify(function (cb) {\n                  return utils.convertPeerId(id, cb);\n                })();\n\n              case 3:\n                key = _context.sent;\n                el = {\n                  id: id,\n                  distance: distance(this.from, key)\n                };\n                this.heap.push(el);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function enqueue(_x) {\n        return _enqueue.apply(this, arguments);\n      }\n\n      return enqueue;\n    }()\n    /**\n     * Returns the closest peer to the `from` peer.\n     *\n     * @returns {PeerId}\n     */\n\n  }, {\n    key: \"dequeue\",\n    value: function dequeue() {\n      var el = this.heap.pop();\n      log('dequeue %s', el.id.toB58String());\n      return el.id;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.heap.size();\n    }\n  }], [{\n    key: \"fromPeerId\",\n    value:\n    /**\n     * Create from a given peer id.\n     *\n     * @param {PeerId} id\n     * @returns {Promise<PeerQueue>}\n     */\n    function () {\n      var _fromPeerId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return promisify(function (cb) {\n                  return utils.convertPeerId(id, cb);\n                })();\n\n              case 2:\n                key = _context2.sent;\n                return _context2.abrupt(\"return\", new PeerQueue(key));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromPeerId(_x2) {\n        return _fromPeerId.apply(this, arguments);\n      }\n\n      return fromPeerId;\n    }()\n    /**\n     * Create from a given buffer.\n     *\n     * @param {Buffer} keyBuffer\n     * @returns {Promise<PeerQueue>}\n     */\n\n  }, {\n    key: \"fromKey\",\n    value: function () {\n      var _fromKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(keyBuffer) {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return promisify(function (cb) {\n                  return utils.convertBuffer(keyBuffer, cb);\n                })();\n\n              case 2:\n                key = _context3.sent;\n                return _context3.abrupt(\"return\", new PeerQueue(key));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fromKey(_x3) {\n        return _fromKey.apply(this, arguments);\n      }\n\n      return fromKey;\n    }()\n  }]);\n\n  return PeerQueue;\n}();\n\nmodule.exports = PeerQueue;","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/libp2p-kad-dht/src/peer-queue.js"],"names":["Heap","require","distance","debug","promisify","utils","log","PeerQueue","from","heap","xorCompare","id","toB58String","cb","convertPeerId","key","el","push","pop","size","keyBuffer","convertBuffer","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAMK,GAAG,GAAGH,KAAK,CAAC,uBAAD,CAAjB;AAEA;AACA;AACA;AACA;;IACMI,S;AAuBJ;AACF;AACA;AACA;AACA;AACE,qBAAaC,IAAb,EAAmB;AAAA;;AACjBF,IAAAA,GAAG,CAAC,YAAD,EAAeE,IAAf,CAAH;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAIT,IAAJ,CAASK,KAAK,CAACK,UAAf,CAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;;8EACE,iBAAeC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEL,gBAAAA,GAAG,CAAC,YAAD,EAAeK,EAAE,CAACC,WAAH,EAAf,CAAH;AADF;AAAA,uBAEoBR,SAAS,CAAC,UAAAS,EAAE;AAAA,yBAAIR,KAAK,CAACS,aAAN,CAAoBH,EAApB,EAAwBE,EAAxB,CAAJ;AAAA,iBAAH,CAAT,EAFpB;;AAAA;AAEQE,gBAAAA,GAFR;AAIQC,gBAAAA,EAJR,GAIa;AACTL,kBAAAA,EAAE,EAAEA,EADK;AAETT,kBAAAA,QAAQ,EAAEA,QAAQ,CAAC,KAAKM,IAAN,EAAYO,GAAZ;AAFT,iBAJb;AASE,qBAAKN,IAAL,CAAUQ,IAAV,CAAeD,EAAf;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAYA;AACF;AACA;AACA;AACA;;;;WACE,mBAAW;AACT,UAAMA,EAAE,GAAG,KAAKP,IAAL,CAAUS,GAAV,EAAX;AACAZ,MAAAA,GAAG,CAAC,YAAD,EAAeU,EAAE,CAACL,EAAH,CAAMC,WAAN,EAAf,CAAH;AACA,aAAOI,EAAE,CAACL,EAAV;AACD;;;SAED,eAAc;AACZ,aAAO,KAAKF,IAAL,CAAUU,IAAV,EAAP;AACD;;;;AAhED;AACF;AACA;AACA;AACA;AACA;;iFACE,kBAAyBR,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBP,SAAS,CAAC,UAAAS,EAAE;AAAA,yBAAIR,KAAK,CAACS,aAAN,CAAoBH,EAApB,EAAwBE,EAAxB,CAAJ;AAAA,iBAAH,CAAT,EADpB;;AAAA;AACQE,gBAAAA,GADR;AAAA,kDAES,IAAIR,SAAJ,CAAcQ,GAAd,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAKA;AACF;AACA;AACA;AACA;AACA;;;;;8EACE,kBAAsBK,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBhB,SAAS,CAAC,UAAAS,EAAE;AAAA,yBAAIR,KAAK,CAACgB,aAAN,CAAoBD,SAApB,EAA+BP,EAA/B,CAAJ;AAAA,iBAAH,CAAT,EADpB;;AAAA;AACQE,gBAAAA,GADR;AAAA,kDAES,IAAIR,SAAJ,CAAcQ,GAAd,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAkDFO,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["'use strict'\n\nconst Heap = require('heap')\nconst distance = require('xor-distance')\nconst debug = require('debug')\nconst promisify = require('promisify-es6')\n\nconst utils = require('./utils')\n\nconst log = debug('libp2p:dht:peer-queue')\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId (id) {\n    const key = await promisify(cb => utils.convertPeerId(id, cb))()\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create from a given buffer.\n   *\n   * @param {Buffer} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromKey (keyBuffer) {\n    const key = await promisify(cb => utils.convertBuffer(keyBuffer, cb))()\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Buffer} from - The sha2-256 encoded peer id\n   */\n  constructor (from) {\n    log('create: %b', from)\n    this.from = from\n    this.heap = new Heap(utils.xorCompare)\n  }\n\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   * @returns {Promise}\n   */\n  async enqueue (id) {\n    log('enqueue %s', id.toB58String())\n    const key = await promisify(cb => utils.convertPeerId(id, cb))()\n\n    const el = {\n      id: id,\n      distance: distance(this.from, key)\n    }\n\n    this.heap.push(el)\n  }\n\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n  dequeue () {\n    const el = this.heap.pop()\n    log('dequeue %s', el.id.toB58String())\n    return el.id\n  }\n\n  get length () {\n    return this.heap.size()\n  }\n}\n\nmodule.exports = PeerQueue\n"]},"metadata":{},"sourceType":"script"}