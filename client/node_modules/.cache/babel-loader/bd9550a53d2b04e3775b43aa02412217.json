{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar setImmediate = require('async/setImmediate');\n\nvar EE = require('events').EventEmitter;\n\nvar Connection = require('interface-connection').Connection;\n\nvar utilsFactory = require('./utils');\n\nvar PeerInfo = require('peer-info');\n\nvar proto = require('../protocol').CircuitRelay;\n\nvar series = require('async/series');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:circuit:stop');\nlog.err = debug('libp2p:circuit:error:stop');\n\nvar Stop = /*#__PURE__*/function (_EE) {\n  _inherits(Stop, _EE);\n\n  var _super = _createSuper(Stop);\n\n  function Stop(swarm) {\n    var _this;\n\n    _classCallCheck(this, Stop);\n\n    _this = _super.call(this);\n    _this.swarm = swarm;\n    _this.utils = utilsFactory(swarm);\n    return _this;\n  }\n  /**\n   * Handle the incoming STOP message\n   *\n   * @param {{}} msg  - the parsed protobuf message\n   * @param {StreamHandler} sh  - the stream handler wrapped connection\n   * @param {Function} callback  - callback\n   * @returns {undefined}\n   */\n\n\n  _createClass(Stop, [{\n    key: \"handle\",\n    value: function handle(msg, sh, callback) {\n      var _this2 = this;\n\n      callback = callback || function () {};\n\n      series([function (cb) {\n        return _this2.utils.validateAddrs(msg, sh, proto.Type.STOP, cb);\n      }, function (cb) {\n        return _this2.utils.writeResponse(sh, proto.Status.Success, cb);\n      }], function (err) {\n        if (err) {\n          // we don't return the error here,\n          // since multistream select don't expect one\n          callback();\n          return log(err);\n        }\n\n        var peerInfo = new PeerInfo(_this2.utils.peerIdFromId(msg.srcPeer.id));\n        msg.srcPeer.addrs.forEach(function (addr) {\n          return peerInfo.multiaddrs.add(addr);\n        });\n        var newConn = new Connection(sh.rest());\n        newConn.setPeerInfo(peerInfo);\n        setImmediate(function () {\n          return _this2.emit('connection', newConn);\n        });\n        callback(newConn);\n      });\n    }\n  }]);\n\n  return Stop;\n}(EE);\n\nmodule.exports = Stop;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p-circuit/src/circuit/stop.js"],"names":["setImmediate","require","EE","EventEmitter","Connection","utilsFactory","PeerInfo","proto","CircuitRelay","series","debug","log","err","Stop","swarm","utils","msg","sh","callback","cb","validateAddrs","Type","STOP","writeResponse","Status","Success","peerInfo","peerIdFromId","srcPeer","id","addrs","forEach","addr","multiaddrs","add","newConn","rest","setPeerInfo","emit","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AAEA,IAAMC,EAAE,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBE,YAA7B;;AACA,IAAMC,UAAU,GAAGH,OAAO,CAAC,sBAAD,CAAP,CAAgCG,UAAnD;;AACA,IAAMC,YAAY,GAAGJ,OAAO,CAAC,SAAD,CAA5B;;AACA,IAAMK,QAAQ,GAAGL,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMM,KAAK,GAAGN,OAAO,CAAC,aAAD,CAAP,CAAuBO,YAArC;;AACA,IAAMC,MAAM,GAAGR,OAAO,CAAC,cAAD,CAAtB;;AAEA,IAAMS,KAAK,GAAGT,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMU,GAAG,GAAGD,KAAK,CAAC,qBAAD,CAAjB;AACAC,GAAG,CAACC,GAAJ,GAAUF,KAAK,CAAC,2BAAD,CAAf;;IAEMG,I;;;;;AACJ,gBAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAClB;AACA,UAAKA,KAAL,GAAaA,KAAb;AACA,UAAKC,KAAL,GAAaV,YAAY,CAACS,KAAD,CAAzB;AAHkB;AAInB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,gBAAQE,GAAR,EAAaC,EAAb,EAAiBC,QAAjB,EAA2B;AAAA;;AACzBA,MAAAA,QAAQ,GAAGA,QAAQ,IAAK,YAAM,CAAE,CAAhC;;AAEAT,MAAAA,MAAM,CAAC,CACL,UAACU,EAAD;AAAA,eAAQ,MAAI,CAACJ,KAAL,CAAWK,aAAX,CAAyBJ,GAAzB,EAA8BC,EAA9B,EAAkCV,KAAK,CAACc,IAAN,CAAWC,IAA7C,EAAmDH,EAAnD,CAAR;AAAA,OADK,EAEL,UAACA,EAAD;AAAA,eAAQ,MAAI,CAACJ,KAAL,CAAWQ,aAAX,CAAyBN,EAAzB,EAA6BV,KAAK,CAACiB,MAAN,CAAaC,OAA1C,EAAmDN,EAAnD,CAAR;AAAA,OAFK,CAAD,EAGH,UAACP,GAAD,EAAS;AACV,YAAIA,GAAJ,EAAS;AACP;AACA;AACAM,UAAAA,QAAQ;AACR,iBAAOP,GAAG,CAACC,GAAD,CAAV;AACD;;AAED,YAAMc,QAAQ,GAAG,IAAIpB,QAAJ,CAAa,MAAI,CAACS,KAAL,CAAWY,YAAX,CAAwBX,GAAG,CAACY,OAAJ,CAAYC,EAApC,CAAb,CAAjB;AACAb,QAAAA,GAAG,CAACY,OAAJ,CAAYE,KAAZ,CAAkBC,OAAlB,CAA0B,UAACC,IAAD;AAAA,iBAAUN,QAAQ,CAACO,UAAT,CAAoBC,GAApB,CAAwBF,IAAxB,CAAV;AAAA,SAA1B;AACA,YAAMG,OAAO,GAAG,IAAI/B,UAAJ,CAAea,EAAE,CAACmB,IAAH,EAAf,CAAhB;AACAD,QAAAA,OAAO,CAACE,WAAR,CAAoBX,QAApB;AACA1B,QAAAA,YAAY,CAAC;AAAA,iBAAM,MAAI,CAACsC,IAAL,CAAU,YAAV,EAAwBH,OAAxB,CAAN;AAAA,SAAD,CAAZ;AACAjB,QAAAA,QAAQ,CAACiB,OAAD,CAAR;AACD,OAjBK,CAAN;AAkBD;;;;EApCgBjC,E;;AAuCnBqC,MAAM,CAACC,OAAP,GAAiB3B,IAAjB","sourcesContent":["'use strict'\n\nconst setImmediate = require('async/setImmediate')\n\nconst EE = require('events').EventEmitter\nconst Connection = require('interface-connection').Connection\nconst utilsFactory = require('./utils')\nconst PeerInfo = require('peer-info')\nconst proto = require('../protocol').CircuitRelay\nconst series = require('async/series')\n\nconst debug = require('debug')\n\nconst log = debug('libp2p:circuit:stop')\nlog.err = debug('libp2p:circuit:error:stop')\n\nclass Stop extends EE {\n  constructor (swarm) {\n    super()\n    this.swarm = swarm\n    this.utils = utilsFactory(swarm)\n  }\n\n  /**\n   * Handle the incoming STOP message\n   *\n   * @param {{}} msg  - the parsed protobuf message\n   * @param {StreamHandler} sh  - the stream handler wrapped connection\n   * @param {Function} callback  - callback\n   * @returns {undefined}\n   */\n  handle (msg, sh, callback) {\n    callback = callback || (() => {})\n\n    series([\n      (cb) => this.utils.validateAddrs(msg, sh, proto.Type.STOP, cb),\n      (cb) => this.utils.writeResponse(sh, proto.Status.Success, cb)\n    ], (err) => {\n      if (err) {\n        // we don't return the error here,\n        // since multistream select don't expect one\n        callback()\n        return log(err)\n      }\n\n      const peerInfo = new PeerInfo(this.utils.peerIdFromId(msg.srcPeer.id))\n      msg.srcPeer.addrs.forEach((addr) => peerInfo.multiaddrs.add(addr))\n      const newConn = new Connection(sh.rest())\n      newConn.setPeerInfo(peerInfo)\n      setImmediate(() => this.emit('connection', newConn))\n      callback(newConn)\n    })\n  }\n}\n\nmodule.exports = Stop\n"]},"metadata":{},"sourceType":"script"}