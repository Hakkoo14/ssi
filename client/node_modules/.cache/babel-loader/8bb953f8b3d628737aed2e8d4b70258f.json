{"ast":null,"code":"'use strict';\n\nvar multistream = require('multistream-select');\n\nvar observeConn = require('./observe-connection');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:switch:protocol-muxer');\nlog.error = debug('libp2p:switch:protocol-muxer:error');\n\nmodule.exports = function protocolMuxer(protocols, observer) {\n  return function (transport) {\n    return function (_parentConn, msListener) {\n      var ms = msListener || new multistream.Listener();\n      var parentConn; // Only observe the transport if we have one, and there is not already a listener\n\n      if (transport && !msListener) {\n        parentConn = observeConn(transport, null, _parentConn, observer);\n      } else {\n        parentConn = _parentConn;\n      }\n\n      Object.keys(protocols).forEach(function (protocol) {\n        if (!protocol) {\n          return;\n        }\n\n        var handler = function handler(protocolName, _conn) {\n          log('registering handler with protocol %s', protocolName);\n          var protocol = protocols[protocolName];\n\n          if (protocol) {\n            var handlerFunc = protocol && protocol.handlerFunc;\n\n            if (handlerFunc) {\n              var conn = observeConn(null, protocolName, _conn, observer);\n              handlerFunc(protocol, conn);\n            }\n          }\n        };\n\n        ms.addHandler(protocol, handler, protocols[protocol].matchFunc);\n      });\n      ms.handle(parentConn, function (err) {\n        if (err) {\n          log.error(\"multistream handshake failed\", err);\n        }\n      });\n    };\n  };\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/libp2p-switch/src/protocol-muxer.js"],"names":["multistream","require","observeConn","debug","log","error","module","exports","protocolMuxer","protocols","observer","transport","_parentConn","msListener","ms","Listener","parentConn","Object","keys","forEach","protocol","handler","protocolName","_conn","handlerFunc","conn","addHandler","matchFunc","handle","err"],"mappings":"AAAA;;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,sBAAD,CAA3B;;AAEA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,GAAG,GAAGD,KAAK,CAAC,8BAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,oCAAD,CAAjB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAwBC,SAAxB,EAAmCC,QAAnC,EAA6C;AAC5D,SAAO,UAACC,SAAD;AAAA,WAAe,UAACC,WAAD,EAAcC,UAAd,EAA6B;AACjD,UAAMC,EAAE,GAAGD,UAAU,IAAI,IAAIb,WAAW,CAACe,QAAhB,EAAzB;AACA,UAAIC,UAAJ,CAFiD,CAIjD;;AACA,UAAIL,SAAS,IAAI,CAACE,UAAlB,EAA8B;AAC5BG,QAAAA,UAAU,GAAGd,WAAW,CAACS,SAAD,EAAY,IAAZ,EAAkBC,WAAlB,EAA+BF,QAA/B,CAAxB;AACD,OAFD,MAEO;AACLM,QAAAA,UAAU,GAAGJ,WAAb;AACD;;AAEDK,MAAAA,MAAM,CAACC,IAAP,CAAYT,SAAZ,EAAuBU,OAAvB,CAA+B,UAACC,QAAD,EAAc;AAC3C,YAAI,CAACA,QAAL,EAAe;AACb;AACD;;AAED,YAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,YAAD,EAAeC,KAAf,EAAyB;AACvCnB,UAAAA,GAAG,CAAC,sCAAD,EAAyCkB,YAAzC,CAAH;AACA,cAAMF,QAAQ,GAAGX,SAAS,CAACa,YAAD,CAA1B;;AACA,cAAIF,QAAJ,EAAc;AACZ,gBAAMI,WAAW,GAAGJ,QAAQ,IAAIA,QAAQ,CAACI,WAAzC;;AACA,gBAAIA,WAAJ,EAAiB;AACf,kBAAMC,IAAI,GAAGvB,WAAW,CAAC,IAAD,EAAOoB,YAAP,EAAqBC,KAArB,EAA4Bb,QAA5B,CAAxB;AACAc,cAAAA,WAAW,CAACJ,QAAD,EAAWK,IAAX,CAAX;AACD;AACF;AACF,SAVD;;AAYAX,QAAAA,EAAE,CAACY,UAAH,CAAcN,QAAd,EAAwBC,OAAxB,EAAiCZ,SAAS,CAACW,QAAD,CAAT,CAAoBO,SAArD;AACD,OAlBD;AAoBAb,MAAAA,EAAE,CAACc,MAAH,CAAUZ,UAAV,EAAsB,UAACa,GAAD,EAAS;AAC7B,YAAIA,GAAJ,EAAS;AACPzB,UAAAA,GAAG,CAACC,KAAJ,iCAA0CwB,GAA1C;AACD;AACF,OAJD;AAKD,KApCM;AAAA,GAAP;AAqCD,CAtCD","sourcesContent":["'use strict'\n\nconst multistream = require('multistream-select')\nconst observeConn = require('./observe-connection')\n\nconst debug = require('debug')\nconst log = debug('libp2p:switch:protocol-muxer')\nlog.error = debug('libp2p:switch:protocol-muxer:error')\n\nmodule.exports = function protocolMuxer (protocols, observer) {\n  return (transport) => (_parentConn, msListener) => {\n    const ms = msListener || new multistream.Listener()\n    let parentConn\n\n    // Only observe the transport if we have one, and there is not already a listener\n    if (transport && !msListener) {\n      parentConn = observeConn(transport, null, _parentConn, observer)\n    } else {\n      parentConn = _parentConn\n    }\n\n    Object.keys(protocols).forEach((protocol) => {\n      if (!protocol) {\n        return\n      }\n\n      const handler = (protocolName, _conn) => {\n        log('registering handler with protocol %s', protocolName)\n        const protocol = protocols[protocolName]\n        if (protocol) {\n          const handlerFunc = protocol && protocol.handlerFunc\n          if (handlerFunc) {\n            const conn = observeConn(null, protocolName, _conn, observer)\n            handlerFunc(protocol, conn)\n          }\n        }\n      }\n\n      ms.addHandler(protocol, handler, protocols[protocol].matchFunc)\n    })\n\n    ms.handle(parentConn, (err) => {\n      if (err) {\n        log.error(`multistream handshake failed`, err)\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}