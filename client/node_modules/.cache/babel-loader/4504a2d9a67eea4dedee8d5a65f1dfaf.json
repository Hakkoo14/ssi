{"ast":null,"code":"'use strict';\n\nvar OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;\n\nvar promisify = require('promisify-es6');\n\nvar setImmediate = require('async/setImmediate');\n\nvar Big = require('bignumber.js');\n\nvar CID = require('cids');\n\nvar PeerId = require('peer-id');\n\nvar errCode = require('err-code');\n\nfunction formatWantlist(list, cidBase) {\n  return Array.from(list).map(function (e) {\n    return {\n      '/': e[1].cid.toBaseEncodedString(cidBase)\n    };\n  });\n}\n\nmodule.exports = function bitswap(self) {\n  return {\n    wantlist: promisify(function (peerId, callback) {\n      if (typeof peerId === 'function') {\n        callback = peerId;\n        peerId = null;\n      }\n\n      if (!self.isOnline()) {\n        return setImmediate(function () {\n          return callback(new Error(OFFLINE_ERROR));\n        });\n      }\n\n      var list;\n\n      if (peerId) {\n        try {\n          peerId = PeerId.createFromB58String(peerId);\n        } catch (e) {\n          peerId = null;\n        }\n\n        if (!peerId) {\n          return setImmediate(function () {\n            return callback(new Error('Invalid peerId'));\n          });\n        }\n\n        list = self._bitswap.wantlistForPeer(peerId);\n      } else {\n        list = self._bitswap.getWantlist();\n      }\n\n      setImmediate(function () {\n        return callback(null, {\n          Keys: formatWantlist(list)\n        });\n      });\n    }),\n    stat: promisify(function (callback) {\n      if (!self.isOnline()) {\n        return setImmediate(function () {\n          return callback(new Error(OFFLINE_ERROR));\n        });\n      }\n\n      var snapshot = self._bitswap.stat().snapshot;\n\n      setImmediate(function () {\n        callback(null, {\n          provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n          blocksReceived: new Big(snapshot.blocksReceived),\n          wantlist: formatWantlist(self._bitswap.getWantlist()),\n          peers: self._bitswap.peers().map(function (id) {\n            return id.toB58String();\n          }),\n          dupBlksReceived: new Big(snapshot.dupBlksReceived),\n          dupDataReceived: new Big(snapshot.dupDataReceived),\n          dataReceived: new Big(snapshot.dataReceived),\n          blocksSent: new Big(snapshot.blocksSent),\n          dataSent: new Big(snapshot.dataSent)\n        });\n      });\n    }),\n    unwant: promisify(function (keys, callback) {\n      if (!self.isOnline()) {\n        return setImmediate(function () {\n          return callback(new Error(OFFLINE_ERROR));\n        });\n      }\n\n      if (!Array.isArray(keys)) {\n        keys = [keys];\n      }\n\n      try {\n        keys = keys.map(function (key) {\n          if (CID.isCID(key)) {\n            return key;\n          }\n\n          return new CID(key);\n        });\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(errCode(err, 'ERR_INVALID_CID'));\n        });\n      }\n\n      setImmediate(function () {\n        return callback(null, self._bitswap.unwant(keys));\n      });\n    })\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/bitswap.js"],"names":["OFFLINE_ERROR","require","promisify","setImmediate","Big","CID","PeerId","errCode","formatWantlist","list","cidBase","Array","from","map","e","cid","toBaseEncodedString","module","exports","bitswap","self","wantlist","peerId","callback","isOnline","Error","createFromB58String","_bitswap","wantlistForPeer","getWantlist","Keys","stat","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent","unwant","keys","isArray","key","isCID","err"],"mappings":"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","sourcesContent":["'use strict'\n\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR\nconst promisify = require('promisify-es6')\nconst setImmediate = require('async/setImmediate')\nconst Big = require('bignumber.js')\nconst CID = require('cids')\nconst PeerId = require('peer-id')\nconst errCode = require('err-code')\n\nfunction formatWantlist (list, cidBase) {\n  return Array.from(list).map((e) => ({ '/': e[1].cid.toBaseEncodedString(cidBase) }))\n}\n\nmodule.exports = function bitswap (self) {\n  return {\n    wantlist: promisify((peerId, callback) => {\n      if (typeof peerId === 'function') {\n        callback = peerId\n        peerId = null\n      }\n\n      if (!self.isOnline()) {\n        return setImmediate(() => callback(new Error(OFFLINE_ERROR)))\n      }\n\n      let list\n      if (peerId) {\n        try {\n          peerId = PeerId.createFromB58String(peerId)\n        } catch (e) {\n          peerId = null\n        }\n        if (!peerId) {\n          return setImmediate(() => callback(new Error('Invalid peerId')))\n        }\n        list = self._bitswap.wantlistForPeer(peerId)\n      } else {\n        list = self._bitswap.getWantlist()\n      }\n\n      setImmediate(() => callback(null, { Keys: formatWantlist(list) }))\n    }),\n\n    stat: promisify((callback) => {\n      if (!self.isOnline()) {\n        return setImmediate(() => callback(new Error(OFFLINE_ERROR)))\n      }\n\n      const snapshot = self._bitswap.stat().snapshot\n\n      setImmediate(() => {\n        callback(null, {\n          provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n          blocksReceived: new Big(snapshot.blocksReceived),\n          wantlist: formatWantlist(self._bitswap.getWantlist()),\n          peers: self._bitswap.peers().map((id) => id.toB58String()),\n          dupBlksReceived: new Big(snapshot.dupBlksReceived),\n          dupDataReceived: new Big(snapshot.dupDataReceived),\n          dataReceived: new Big(snapshot.dataReceived),\n          blocksSent: new Big(snapshot.blocksSent),\n          dataSent: new Big(snapshot.dataSent)\n        })\n      })\n    }),\n\n    unwant: promisify((keys, callback) => {\n      if (!self.isOnline()) {\n        return setImmediate(() => callback(new Error(OFFLINE_ERROR)))\n      }\n\n      if (!Array.isArray(keys)) {\n        keys = [keys]\n      }\n\n      try {\n        keys = keys.map((key) => {\n          if (CID.isCID(key)) {\n            return key\n          }\n          return new CID(key)\n        })\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      setImmediate(() => callback(null, self._bitswap.unwant(keys)))\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}