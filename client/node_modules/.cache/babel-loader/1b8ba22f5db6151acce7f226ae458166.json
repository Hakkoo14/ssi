{"ast":null,"code":"'use strict';\n\nvar pull = require('pull-stream/pull');\n\nvar values = require('pull-stream/sources/values');\n\nvar collect = require('pull-stream/sinks/collect');\n\nvar pullLP = require('pull-length-prefixed');\n\nvar debug = require('debug');\n\nexports = module.exports;\n\nfunction randomId() {\n  return (~~(Math.random() * 1e9)).toString(36);\n} // prefixes a message with a varint\n// TODO this is a pull-stream 'creep' (pull stream to add a byte?')\n\n\nfunction encode(msg, callback) {\n  pull(values(Buffer.isBuffer(msg) ? [msg] : [Buffer.from(msg)]), pullLP.encode(), collect(function (err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, encoded[0]);\n  }));\n}\n\nexports.writeEncoded = function (writer, msg, callback) {\n  encode(msg, function (err, msg) {\n    if (err) {\n      return callback(err);\n    }\n\n    writer.write(msg);\n  });\n};\n\nfunction createLogger(type) {\n  var rId = randomId();\n\n  function printer(logger) {\n    return function (msg) {\n      if (Array.isArray(msg)) {\n        msg = msg.join(' ');\n      }\n\n      logger('(%s) %s', rId, msg);\n    };\n  }\n\n  var log = printer(debug('mss:' + type));\n  log.error = printer(debug('mss:' + type + ':error'));\n  return log;\n}\n\nexports.log = {};\n\nexports.log.dialer = function () {\n  return createLogger('dialer\\t');\n};\n\nexports.log.listener = function () {\n  return createLogger('listener\\t');\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/multistream-select/src/util.js"],"names":["pull","require","values","collect","pullLP","debug","exports","module","randomId","Math","random","toString","encode","msg","callback","Buffer","isBuffer","from","err","encoded","writeEncoded","writer","write","createLogger","type","rId","printer","logger","Array","isArray","join","log","error","dialer","listener"],"mappings":"AAAA;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,4BAAD,CAAtB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,2BAAD,CAAvB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEAK,OAAO,GAAGC,MAAM,CAACD,OAAjB;;AAEA,SAASE,QAAT,GAAqB;AACnB,SAAQ,CAAC,CAAC,EAAEC,IAAI,CAACC,MAAL,KAAgB,GAAlB,CAAF,EAA0BC,QAA1B,CAAmC,EAAnC,CAAR;AACD,C,CAED;AACA;;;AACA,SAASC,MAAT,CAAiBC,GAAjB,EAAsBC,QAAtB,EAAgC;AAC9Bd,EAAAA,IAAI,CACFE,MAAM,CAACa,MAAM,CAACC,QAAP,CAAgBH,GAAhB,IAAuB,CAACA,GAAD,CAAvB,GAA+B,CAACE,MAAM,CAACE,IAAP,CAAYJ,GAAZ,CAAD,CAAhC,CADJ,EAEFT,MAAM,CAACQ,MAAP,EAFE,EAGFT,OAAO,CAAC,UAACe,GAAD,EAAMC,OAAN,EAAkB;AACxB,QAAID,GAAJ,EAAS;AACP,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACD;;AACDJ,IAAAA,QAAQ,CAAC,IAAD,EAAOK,OAAO,CAAC,CAAD,CAAd,CAAR;AACD,GALM,CAHL,CAAJ;AAUD;;AAEDb,OAAO,CAACc,YAAR,GAAuB,UAACC,MAAD,EAASR,GAAT,EAAcC,QAAd,EAA2B;AAChDF,EAAAA,MAAM,CAACC,GAAD,EAAM,UAACK,GAAD,EAAML,GAAN,EAAc;AACxB,QAAIK,GAAJ,EAAS;AACP,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACD;;AACDG,IAAAA,MAAM,CAACC,KAAP,CAAaT,GAAb;AACD,GALK,CAAN;AAMD,CAPD;;AASA,SAASU,YAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAMC,GAAG,GAAGjB,QAAQ,EAApB;;AAEA,WAASkB,OAAT,CAAkBC,MAAlB,EAA0B;AACxB,WAAO,UAACd,GAAD,EAAS;AACd,UAAIe,KAAK,CAACC,OAAN,CAAchB,GAAd,CAAJ,EAAwB;AACtBA,QAAAA,GAAG,GAAGA,GAAG,CAACiB,IAAJ,CAAS,GAAT,CAAN;AACD;;AACDH,MAAAA,MAAM,CAAC,SAAD,EAAYF,GAAZ,EAAiBZ,GAAjB,CAAN;AACD,KALD;AAMD;;AAED,MAAMkB,GAAG,GAAGL,OAAO,CAACrB,KAAK,CAAC,SAASmB,IAAV,CAAN,CAAnB;AACAO,EAAAA,GAAG,CAACC,KAAJ,GAAYN,OAAO,CAACrB,KAAK,CAAC,SAASmB,IAAT,GAAgB,QAAjB,CAAN,CAAnB;AAEA,SAAOO,GAAP;AACD;;AAEDzB,OAAO,CAACyB,GAAR,GAAc,EAAd;;AAEAzB,OAAO,CAACyB,GAAR,CAAYE,MAAZ,GAAqB,YAAM;AACzB,SAAOV,YAAY,CAAC,UAAD,CAAnB;AACD,CAFD;;AAGAjB,OAAO,CAACyB,GAAR,CAAYG,QAAZ,GAAuB,YAAM;AAC3B,SAAOX,YAAY,CAAC,YAAD,CAAnB;AACD,CAFD","sourcesContent":["'use strict'\n\nconst pull = require('pull-stream/pull')\nconst values = require('pull-stream/sources/values')\nconst collect = require('pull-stream/sinks/collect')\nconst pullLP = require('pull-length-prefixed')\nconst debug = require('debug')\n\nexports = module.exports\n\nfunction randomId () {\n  return ((~~(Math.random() * 1e9)).toString(36))\n}\n\n// prefixes a message with a varint\n// TODO this is a pull-stream 'creep' (pull stream to add a byte?')\nfunction encode (msg, callback) {\n  pull(\n    values(Buffer.isBuffer(msg) ? [msg] : [Buffer.from(msg)]),\n    pullLP.encode(),\n    collect((err, encoded) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, encoded[0])\n    })\n  )\n}\n\nexports.writeEncoded = (writer, msg, callback) => {\n  encode(msg, (err, msg) => {\n    if (err) {\n      return callback(err)\n    }\n    writer.write(msg)\n  })\n}\n\nfunction createLogger (type) {\n  const rId = randomId()\n\n  function printer (logger) {\n    return (msg) => {\n      if (Array.isArray(msg)) {\n        msg = msg.join(' ')\n      }\n      logger('(%s) %s', rId, msg)\n    }\n  }\n\n  const log = printer(debug('mss:' + type))\n  log.error = printer(debug('mss:' + type + ':error'))\n\n  return log\n}\n\nexports.log = {}\n\nexports.log.dialer = () => {\n  return createLogger('dialer\\t')\n}\nexports.log.listener = () => {\n  return createLogger('listener\\t')\n}\n"]},"metadata":{},"sourceType":"script"}