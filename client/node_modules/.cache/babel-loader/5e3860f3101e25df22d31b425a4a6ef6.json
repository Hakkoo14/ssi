{"ast":null,"code":"var Multiaddr = require('multiaddr');\n\nvar reduceValue = function reduceValue(_, v) {\n  return v;\n};\n\nvar Reducers = {\n  ip4: reduceValue,\n  ip6: function ip6(str, content, i, parts) {\n    return parts.length === 1 && parts[0].protocol === 'ip6' ? content : \"[\".concat(content, \"]\");\n  },\n  tcp: function tcp(str, content, i, parts) {\n    return parts.some(function (p) {\n      return ['http', 'https', 'ws', 'wss'].includes(p.protocol);\n    }) ? \"\".concat(str, \":\").concat(content) : \"tcp://\".concat(str, \":\").concat(content);\n  },\n  udp: function udp(str, content) {\n    return \"udp://\".concat(str, \":\").concat(content);\n  },\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: function ipfs(str, content) {\n    return \"\".concat(str, \"/ipfs/\").concat(content);\n  },\n  p2p: function p2p(str, content) {\n    return \"\".concat(str, \"/p2p/\").concat(content);\n  },\n  http: function http(str) {\n    return \"http://\".concat(str);\n  },\n  https: function https(str) {\n    return \"https://\".concat(str);\n  },\n  ws: function ws(str) {\n    return \"ws://\".concat(str);\n  },\n  wss: function wss(str) {\n    return \"wss://\".concat(str);\n  },\n  'p2p-websocket-star': function p2pWebsocketStar(str) {\n    return \"\".concat(str, \"/p2p-websocket-star\");\n  },\n  'p2p-webrtc-star': function p2pWebrtcStar(str) {\n    return \"\".concat(str, \"/p2p-webrtc-star\");\n  },\n  'p2p-webrtc-direct': function p2pWebrtcDirect(str) {\n    return \"\".concat(str, \"/p2p-webrtc-direct\");\n  }\n};\n\nmodule.exports = function (multiaddr) {\n  return Multiaddr(multiaddr).stringTuples().map(function (tuple) {\n    return {\n      protocol: Multiaddr.protocols.codes[tuple[0]].name,\n      content: tuple[1]\n    };\n  }).reduce(function (str, part, i, parts) {\n    var reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(\"Unsupported protocol \".concat(part.protocol));\n    return reduce(str, part.content, i, parts);\n  }, '');\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/node_modules/multiaddr-to-uri/index.js"],"names":["Multiaddr","require","reduceValue","_","v","Reducers","ip4","ip6","str","content","i","parts","length","protocol","tcp","some","p","includes","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","module","exports","multiaddr","stringTuples","map","tuple","protocols","codes","name","reduce","part","Error"],"mappings":"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","sourcesContent":["const Multiaddr = require('multiaddr')\nconst reduceValue = (_, v) => v\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : `tcp://${str}:${content}`\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr) => (\n  Multiaddr(multiaddr)\n    .stringTuples()\n    .map(tuple => ({\n      protocol: Multiaddr.protocols.codes[tuple[0]].name,\n      content: tuple[1]\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts)\n    }, '')\n)\n"]},"metadata":{},"sourceType":"script"}