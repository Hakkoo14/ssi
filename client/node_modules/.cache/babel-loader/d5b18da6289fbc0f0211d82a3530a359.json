{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar BlockService = require('ipfs-block-service');\n\nvar Ipld = require('ipld');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar crypto = require('libp2p-crypto');\n\nvar isIPFS = require('is-ipfs');\n\nvar multiaddr = require('multiaddr');\n\nvar multihash = require('multihashes');\n\nvar PeerBook = require('peer-book');\n\nvar multibase = require('multibase');\n\nvar multicodec = require('multicodec');\n\nvar multihashing = require('multihashing-async');\n\nvar CID = require('cids');\n\nvar debug = require('debug');\n\nvar mergeOptions = require('merge-options');\n\nvar EventEmitter = require('events');\n\nvar config = require('./config');\n\nvar boot = require('./boot');\n\nvar components = require('./components'); // replaced by repo-browser when running in the browser\n\n\nvar defaultRepo = require('./runtime/repo-nodejs');\n\nvar preload = require('./preload');\n\nvar mfsPreload = require('./mfs-preload');\n\nvar ipldOptions = require('./runtime/ipld-nodejs');\n\nvar IPFS = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(IPFS, _EventEmitter);\n\n  var _super = _createSuper(IPFS);\n\n  function IPFS(options) {\n    var _this;\n\n    _classCallCheck(this, IPFS);\n\n    _this = _super.call(this);\n    var defaults = {\n      init: true,\n      start: true,\n      EXPERIMENTAL: {},\n      preload: {\n        enabled: true,\n        addresses: ['/dnsaddr/node0.preload.ipfs.io/https', '/dnsaddr/node1.preload.ipfs.io/https']\n      }\n    };\n    options = config.validate(options || {});\n    _this._options = mergeOptions(defaults, options);\n\n    if (options.init === false) {\n      _this._options.init = false;\n    }\n\n    if (!(options.start === false)) {\n      _this._options.start = true;\n    }\n\n    if (typeof options.repo === 'string' || options.repo === undefined) {\n      _this._repo = defaultRepo(options.repo);\n    } else {\n      _this._repo = options.repo;\n    } // IPFS utils\n\n\n    _this.log = debug('ipfs');\n    _this.log.err = debug('ipfs:err'); // IPFS Core Internals\n    // this._repo - assigned above\n\n    _this._peerInfoBook = new PeerBook();\n    _this._peerInfo = undefined;\n    _this._bitswap = undefined;\n    _this._blockService = new BlockService(_this._repo);\n    _this._ipld = new Ipld(ipldOptions(_this._blockService, _this._options.ipld, _this.log));\n    _this._preload = preload(_assertThisInitialized(_this));\n    _this._mfsPreload = mfsPreload(_assertThisInitialized(_this));\n    _this._ipns = undefined; // eslint-disable-next-line no-console\n\n    _this._print = _this._options.silent ? _this.log : console.log; // IPFS Core exposed components\n    //   - for booting up a node\n\n    _this.init = components.init(_assertThisInitialized(_this));\n    _this.preStart = components.preStart(_assertThisInitialized(_this));\n    _this.start = components.start(_assertThisInitialized(_this));\n    _this.stop = components.stop(_assertThisInitialized(_this));\n    _this.shutdown = _this.stop;\n    _this.isOnline = components.isOnline(_assertThisInitialized(_this)); //   - interface-ipfs-core defined API\n\n    Object.assign(_assertThisInitialized(_this), components.filesRegular(_assertThisInitialized(_this)));\n    _this.version = components.version(_assertThisInitialized(_this));\n    _this.id = components.id(_assertThisInitialized(_this));\n    _this.repo = components.repo(_assertThisInitialized(_this));\n    _this.bootstrap = components.bootstrap(_assertThisInitialized(_this));\n    _this.config = components.config(_assertThisInitialized(_this));\n    _this.block = components.block(_assertThisInitialized(_this));\n    _this.object = components.object(_assertThisInitialized(_this));\n    _this.dag = components.dag(_assertThisInitialized(_this));\n    _this.files = components.filesMFS(_assertThisInitialized(_this));\n    _this.libp2p = null; // assigned on start\n\n    _this.swarm = components.swarm(_assertThisInitialized(_this));\n    _this.name = components.name(_assertThisInitialized(_this));\n    _this.bitswap = components.bitswap(_assertThisInitialized(_this));\n    _this.pin = components.pin(_assertThisInitialized(_this));\n    _this.ping = components.ping(_assertThisInitialized(_this));\n    _this.pingPullStream = components.pingPullStream(_assertThisInitialized(_this));\n    _this.pingReadableStream = components.pingReadableStream(_assertThisInitialized(_this));\n    _this.pubsub = components.pubsub(_assertThisInitialized(_this));\n    _this.dht = components.dht(_assertThisInitialized(_this));\n    _this.dns = components.dns(_assertThisInitialized(_this));\n    _this.key = components.key(_assertThisInitialized(_this));\n    _this.stats = components.stats(_assertThisInitialized(_this));\n    _this.resolve = components.resolve(_assertThisInitialized(_this));\n\n    if (_this._options.EXPERIMENTAL.pubsub) {\n      _this.log('EXPERIMENTAL pubsub is enabled');\n    }\n\n    if (_this._options.EXPERIMENTAL.ipnsPubsub) {\n      if (!_this._options.EXPERIMENTAL.pubsub) {\n        _this.log('EXPERIMENTAL pubsub is enabled to use IPNS pubsub');\n\n        _this._options.EXPERIMENTAL.pubsub = true;\n      }\n\n      _this.log('EXPERIMENTAL IPNS pubsub is enabled');\n    }\n\n    if (_this._options.EXPERIMENTAL.sharding) {\n      _this.log('EXPERIMENTAL sharding is enabled');\n    }\n\n    _this.state = require('./state')(_assertThisInitialized(_this));\n    boot(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  return IPFS;\n}(EventEmitter);\n\nmodule.exports = IPFS; // Note: We need to do this to force browserify to load the Buffer module\n\nvar BufferImpl = Buffer;\nObject.assign(module.exports, {\n  crypto: crypto,\n  isIPFS: isIPFS,\n  Buffer: BufferImpl,\n  CID: CID,\n  multiaddr: multiaddr,\n  multibase: multibase,\n  multihash: multihash,\n  multihashing: multihashing,\n  multicodec: multicodec,\n  PeerId: PeerId,\n  PeerInfo: PeerInfo\n});\n\nmodule.exports.createNode = function (options) {\n  return new IPFS(options);\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/index.js"],"names":["BlockService","require","Ipld","PeerId","PeerInfo","crypto","isIPFS","multiaddr","multihash","PeerBook","multibase","multicodec","multihashing","CID","debug","mergeOptions","EventEmitter","config","boot","components","defaultRepo","preload","mfsPreload","ipldOptions","IPFS","options","defaults","init","start","EXPERIMENTAL","enabled","addresses","validate","_options","repo","undefined","_repo","log","err","_peerInfoBook","_peerInfo","_bitswap","_blockService","_ipld","ipld","_preload","_mfsPreload","_ipns","_print","silent","console","preStart","stop","shutdown","isOnline","Object","assign","filesRegular","version","id","bootstrap","block","object","dag","files","filesMFS","libp2p","swarm","name","bitswap","pin","ping","pingPullStream","pingReadableStream","pubsub","dht","dns","key","stats","resolve","ipnsPubsub","sharding","state","module","exports","BufferImpl","Buffer","createNode"],"mappings":"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","sourcesContent":["'use strict'\n\nconst BlockService = require('ipfs-block-service')\nconst Ipld = require('ipld')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst crypto = require('libp2p-crypto')\nconst isIPFS = require('is-ipfs')\nconst multiaddr = require('multiaddr')\nconst multihash = require('multihashes')\nconst PeerBook = require('peer-book')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst debug = require('debug')\nconst mergeOptions = require('merge-options')\nconst EventEmitter = require('events')\n\nconst config = require('./config')\nconst boot = require('./boot')\nconst components = require('./components')\n\n// replaced by repo-browser when running in the browser\nconst defaultRepo = require('./runtime/repo-nodejs')\nconst preload = require('./preload')\nconst mfsPreload = require('./mfs-preload')\nconst ipldOptions = require('./runtime/ipld-nodejs')\n\nclass IPFS extends EventEmitter {\n  constructor (options) {\n    super()\n\n    const defaults = {\n      init: true,\n      start: true,\n      EXPERIMENTAL: {},\n      preload: {\n        enabled: true,\n        addresses: [\n          '/dnsaddr/node0.preload.ipfs.io/https',\n          '/dnsaddr/node1.preload.ipfs.io/https'\n        ]\n      }\n    }\n\n    options = config.validate(options || {})\n\n    this._options = mergeOptions(defaults, options)\n\n    if (options.init === false) {\n      this._options.init = false\n    }\n\n    if (!(options.start === false)) {\n      this._options.start = true\n    }\n\n    if (typeof options.repo === 'string' ||\n        options.repo === undefined) {\n      this._repo = defaultRepo(options.repo)\n    } else {\n      this._repo = options.repo\n    }\n\n    // IPFS utils\n    this.log = debug('ipfs')\n    this.log.err = debug('ipfs:err')\n\n    // IPFS Core Internals\n    // this._repo - assigned above\n    this._peerInfoBook = new PeerBook()\n    this._peerInfo = undefined\n    this._bitswap = undefined\n    this._blockService = new BlockService(this._repo)\n    this._ipld = new Ipld(ipldOptions(this._blockService, this._options.ipld, this.log))\n    this._preload = preload(this)\n    this._mfsPreload = mfsPreload(this)\n    this._ipns = undefined\n    // eslint-disable-next-line no-console\n    this._print = this._options.silent ? this.log : console.log\n\n    // IPFS Core exposed components\n    //   - for booting up a node\n    this.init = components.init(this)\n    this.preStart = components.preStart(this)\n    this.start = components.start(this)\n    this.stop = components.stop(this)\n    this.shutdown = this.stop\n    this.isOnline = components.isOnline(this)\n    //   - interface-ipfs-core defined API\n    Object.assign(this, components.filesRegular(this))\n    this.version = components.version(this)\n    this.id = components.id(this)\n    this.repo = components.repo(this)\n    this.bootstrap = components.bootstrap(this)\n    this.config = components.config(this)\n    this.block = components.block(this)\n    this.object = components.object(this)\n    this.dag = components.dag(this)\n    this.files = components.filesMFS(this)\n    this.libp2p = null // assigned on start\n    this.swarm = components.swarm(this)\n    this.name = components.name(this)\n    this.bitswap = components.bitswap(this)\n    this.pin = components.pin(this)\n    this.ping = components.ping(this)\n    this.pingPullStream = components.pingPullStream(this)\n    this.pingReadableStream = components.pingReadableStream(this)\n    this.pubsub = components.pubsub(this)\n    this.dht = components.dht(this)\n    this.dns = components.dns(this)\n    this.key = components.key(this)\n    this.stats = components.stats(this)\n    this.resolve = components.resolve(this)\n\n    if (this._options.EXPERIMENTAL.pubsub) {\n      this.log('EXPERIMENTAL pubsub is enabled')\n    }\n    if (this._options.EXPERIMENTAL.ipnsPubsub) {\n      if (!this._options.EXPERIMENTAL.pubsub) {\n        this.log('EXPERIMENTAL pubsub is enabled to use IPNS pubsub')\n        this._options.EXPERIMENTAL.pubsub = true\n      }\n\n      this.log('EXPERIMENTAL IPNS pubsub is enabled')\n    }\n    if (this._options.EXPERIMENTAL.sharding) {\n      this.log('EXPERIMENTAL sharding is enabled')\n    }\n\n    this.state = require('./state')(this)\n\n    boot(this)\n  }\n}\n\nmodule.exports = IPFS\n\n// Note: We need to do this to force browserify to load the Buffer module\nconst BufferImpl = Buffer\nObject.assign(module.exports, { crypto, isIPFS, Buffer: BufferImpl, CID, multiaddr, multibase, multihash, multihashing, multicodec, PeerId, PeerInfo })\n\nmodule.exports.createNode = (options) => {\n  return new IPFS(options)\n}\n"]},"metadata":{},"sourceType":"script"}