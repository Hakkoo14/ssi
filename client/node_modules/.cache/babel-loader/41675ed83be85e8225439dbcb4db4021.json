{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar DialQueueManager = require('./queueManager');\n\nvar getPeerInfo = require('../get-peer-info');\n\nvar _require = require('../constants'),\n    BLACK_LIST_ATTEMPTS = _require.BLACK_LIST_ATTEMPTS,\n    BLACK_LIST_TTL = _require.BLACK_LIST_TTL,\n    MAX_COLD_CALLS = _require.MAX_COLD_CALLS,\n    MAX_PARALLEL_DIALS = _require.MAX_PARALLEL_DIALS,\n    PRIORITY_HIGH = _require.PRIORITY_HIGH,\n    PRIORITY_LOW = _require.PRIORITY_LOW;\n\nmodule.exports = function (_switch) {\n  var dialQueueManager = new DialQueueManager(_switch);\n\n  _switch.state.on('STARTED:enter', start);\n\n  _switch.state.on('STOPPING:enter', stop);\n  /**\n   * @param {DialRequest} dialRequest\n   * @returns {void}\n   */\n\n\n  function _dial(_ref) {\n    var peerInfo = _ref.peerInfo,\n        protocol = _ref.protocol,\n        options = _ref.options,\n        callback = _ref.callback;\n\n    if (typeof protocol === 'function') {\n      callback = protocol;\n      protocol = null;\n    }\n\n    try {\n      peerInfo = getPeerInfo(peerInfo, _switch._peerBook);\n    } catch (err) {\n      return callback(err);\n    } // Add it to the queue, it will automatically get executed\n\n\n    dialQueueManager.add({\n      peerInfo: peerInfo,\n      protocol: protocol,\n      options: options,\n      callback: callback\n    });\n  }\n  /**\n   * Starts the `DialQueueManager`\n   *\n   * @param {function} callback\n   */\n\n\n  function start(callback) {\n    dialQueueManager.start();\n    callback();\n  }\n  /**\n   * Aborts all dials that are queued. This should\n   * only be used when the Switch is being stopped\n   *\n   * @param {function} callback\n   */\n\n\n  function stop(callback) {\n    dialQueueManager.stop();\n    callback();\n  }\n  /**\n   * Clears the blacklist for a given peer\n   * @param {PeerInfo} peerInfo\n   */\n\n\n  function clearBlacklist(peerInfo) {\n    dialQueueManager.clearBlacklist(peerInfo);\n  }\n  /**\n   * Attempts to establish a connection to the given `peerInfo` at\n   * a lower priority than a standard dial.\n   * @param {PeerInfo} peerInfo\n   * @param {object} options\n   * @param {boolean} options.useFSM Whether or not to return a `ConnectionFSM`. Defaults to false.\n   * @param {number} options.priority Lowest priority goes first. Defaults to 20.\n   * @param {function(Error, Connection)} callback\n   */\n\n\n  function connect(peerInfo, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = null;\n    }\n\n    options = _objectSpread({\n      useFSM: false,\n      priority: PRIORITY_LOW\n    }, options);\n\n    _dial({\n      peerInfo: peerInfo,\n      protocol: null,\n      options: options,\n      callback: callback\n    });\n  }\n  /**\n   * Adds the dial request to the queue for the given `peerInfo`\n   * The request will be added with a high priority (10).\n   * @param {PeerInfo} peerInfo\n   * @param {string} protocol\n   * @param {function(Error, Connection)} callback\n   */\n\n\n  function dial(peerInfo, protocol, callback) {\n    _dial({\n      peerInfo: peerInfo,\n      protocol: protocol,\n      options: {\n        useFSM: false,\n        priority: PRIORITY_HIGH\n      },\n      callback: callback\n    });\n  }\n  /**\n   * Behaves like dial, except it calls back with a ConnectionFSM\n   *\n   * @param {PeerInfo} peerInfo\n   * @param {string} protocol\n   * @param {function(Error, ConnectionFSM)} callback\n   */\n\n\n  function dialFSM(peerInfo, protocol, callback) {\n    _dial({\n      peerInfo: peerInfo,\n      protocol: protocol,\n      options: {\n        useFSM: true,\n        priority: PRIORITY_HIGH\n      },\n      callback: callback\n    });\n  }\n\n  return {\n    connect: connect,\n    dial: dial,\n    dialFSM: dialFSM,\n    clearBlacklist: clearBlacklist,\n    BLACK_LIST_ATTEMPTS: isNaN(_switch._options.blackListAttempts) ? BLACK_LIST_ATTEMPTS : _switch._options.blackListAttempts,\n    BLACK_LIST_TTL: isNaN(_switch._options.blacklistTTL) ? BLACK_LIST_TTL : _switch._options.blacklistTTL,\n    MAX_COLD_CALLS: isNaN(_switch._options.maxColdCalls) ? MAX_COLD_CALLS : _switch._options.maxColdCalls,\n    MAX_PARALLEL_DIALS: isNaN(_switch._options.maxParallelDials) ? MAX_PARALLEL_DIALS : _switch._options.maxParallelDials\n  };\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/libp2p-switch/src/dialer/index.js"],"names":["DialQueueManager","require","getPeerInfo","BLACK_LIST_ATTEMPTS","BLACK_LIST_TTL","MAX_COLD_CALLS","MAX_PARALLEL_DIALS","PRIORITY_HIGH","PRIORITY_LOW","module","exports","_switch","dialQueueManager","state","on","start","stop","_dial","peerInfo","protocol","options","callback","_peerBook","err","add","clearBlacklist","connect","useFSM","priority","dial","dialFSM","isNaN","_options","blackListAttempts","blacklistTTL","maxColdCalls","maxParallelDials"],"mappings":"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","sourcesContent":["'use strict'\n\nconst DialQueueManager = require('./queueManager')\nconst getPeerInfo = require('../get-peer-info')\nconst {\n  BLACK_LIST_ATTEMPTS,\n  BLACK_LIST_TTL,\n  MAX_COLD_CALLS,\n  MAX_PARALLEL_DIALS,\n  PRIORITY_HIGH,\n  PRIORITY_LOW\n} = require('../constants')\n\nmodule.exports = function (_switch) {\n  const dialQueueManager = new DialQueueManager(_switch)\n\n  _switch.state.on('STARTED:enter', start)\n  _switch.state.on('STOPPING:enter', stop)\n\n  /**\n   * @param {DialRequest} dialRequest\n   * @returns {void}\n   */\n  function _dial ({ peerInfo, protocol, options, callback }) {\n    if (typeof protocol === 'function') {\n      callback = protocol\n      protocol = null\n    }\n\n    try {\n      peerInfo = getPeerInfo(peerInfo, _switch._peerBook)\n    } catch (err) {\n      return callback(err)\n    }\n\n    // Add it to the queue, it will automatically get executed\n    dialQueueManager.add({ peerInfo, protocol, options, callback })\n  }\n\n  /**\n   * Starts the `DialQueueManager`\n   *\n   * @param {function} callback\n   */\n  function start (callback) {\n    dialQueueManager.start()\n    callback()\n  }\n\n  /**\n   * Aborts all dials that are queued. This should\n   * only be used when the Switch is being stopped\n   *\n   * @param {function} callback\n   */\n  function stop (callback) {\n    dialQueueManager.stop()\n    callback()\n  }\n\n  /**\n   * Clears the blacklist for a given peer\n   * @param {PeerInfo} peerInfo\n   */\n  function clearBlacklist (peerInfo) {\n    dialQueueManager.clearBlacklist(peerInfo)\n  }\n\n  /**\n   * Attempts to establish a connection to the given `peerInfo` at\n   * a lower priority than a standard dial.\n   * @param {PeerInfo} peerInfo\n   * @param {object} options\n   * @param {boolean} options.useFSM Whether or not to return a `ConnectionFSM`. Defaults to false.\n   * @param {number} options.priority Lowest priority goes first. Defaults to 20.\n   * @param {function(Error, Connection)} callback\n   */\n  function connect (peerInfo, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = null\n    }\n    options = { useFSM: false, priority: PRIORITY_LOW, ...options }\n    _dial({ peerInfo, protocol: null, options, callback })\n  }\n\n  /**\n   * Adds the dial request to the queue for the given `peerInfo`\n   * The request will be added with a high priority (10).\n   * @param {PeerInfo} peerInfo\n   * @param {string} protocol\n   * @param {function(Error, Connection)} callback\n   */\n  function dial (peerInfo, protocol, callback) {\n    _dial({ peerInfo, protocol, options: { useFSM: false, priority: PRIORITY_HIGH }, callback })\n  }\n\n  /**\n   * Behaves like dial, except it calls back with a ConnectionFSM\n   *\n   * @param {PeerInfo} peerInfo\n   * @param {string} protocol\n   * @param {function(Error, ConnectionFSM)} callback\n   */\n  function dialFSM (peerInfo, protocol, callback) {\n    _dial({ peerInfo, protocol, options: { useFSM: true, priority: PRIORITY_HIGH }, callback })\n  }\n\n  return {\n    connect,\n    dial,\n    dialFSM,\n    clearBlacklist,\n    BLACK_LIST_ATTEMPTS: isNaN(_switch._options.blackListAttempts) ? BLACK_LIST_ATTEMPTS : _switch._options.blackListAttempts,\n    BLACK_LIST_TTL: isNaN(_switch._options.blacklistTTL) ? BLACK_LIST_TTL : _switch._options.blacklistTTL,\n    MAX_COLD_CALLS: isNaN(_switch._options.maxColdCalls) ? MAX_COLD_CALLS : _switch._options.maxColdCalls,\n    MAX_PARALLEL_DIALS: isNaN(_switch._options.maxParallelDials) ? MAX_PARALLEL_DIALS : _switch._options.maxParallelDials\n  }\n}\n"]},"metadata":{},"sourceType":"script"}