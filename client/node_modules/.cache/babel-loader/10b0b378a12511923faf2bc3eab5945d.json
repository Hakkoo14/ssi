{"ast":null,"code":"'use strict';\n\nvar isIPFS = require('is-ipfs');\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:ipns:path');\nlog.error = debug('ipfs:ipns:path:error'); // resolves the given path by parsing out protocol-specific entries\n// (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n\nvar resolvePath = function resolvePath(ipfsNode, name, callback) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    log(\"resolve ipns path \".concat(name));\n    return ipfsNode._ipns.resolve(name, callback);\n  } // ipfs path\n\n\n  ipfsNode.dag.get(name.substring('/ipfs/'.length), function (err, value) {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, value);\n  });\n};\n\nmodule.exports = {\n  resolvePath: resolvePath\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/ipns/path.js"],"names":["isIPFS","require","debug","log","error","resolvePath","ipfsNode","name","callback","ipnsPath","_ipns","resolve","dag","get","substring","length","err","value","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,GAAG,GAAGD,KAAK,CAAC,gBAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,sBAAD,CAAjB,C,CAEA;AACA;;AACA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAWC,IAAX,EAAiBC,QAAjB,EAA8B;AAChD;AACA,MAAIR,MAAM,CAACS,QAAP,CAAgBF,IAAhB,CAAJ,EAA2B;AACzBJ,IAAAA,GAAG,6BAAsBI,IAAtB,EAAH;AAEA,WAAOD,QAAQ,CAACI,KAAT,CAAeC,OAAf,CAAuBJ,IAAvB,EAA6BC,QAA7B,CAAP;AACD,GAN+C,CAQhD;;;AACAF,EAAAA,QAAQ,CAACM,GAAT,CAAaC,GAAb,CAAiBN,IAAI,CAACO,SAAL,CAAe,SAASC,MAAxB,CAAjB,EAAkD,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAChE,QAAID,GAAJ,EAAS;AACP,aAAOR,QAAQ,CAACQ,GAAD,CAAf;AACD;;AAED,WAAOR,QAAQ,CAAC,IAAD,EAAOS,KAAP,CAAf;AACD,GAND;AAOD,CAhBD;;AAkBAC,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA,WAAW,EAAXA;AADe,CAAjB","sourcesContent":["'use strict'\n\nconst isIPFS = require('is-ipfs')\n\nconst debug = require('debug')\nconst log = debug('ipfs:ipns:path')\nlog.error = debug('ipfs:ipns:path:error')\n\n// resolves the given path by parsing out protocol-specific entries\n// (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\nconst resolvePath = (ipfsNode, name, callback) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    log(`resolve ipns path ${name}`)\n\n    return ipfsNode._ipns.resolve(name, callback)\n  }\n\n  // ipfs path\n  ipfsNode.dag.get(name.substring('/ipfs/'.length), (err, value) => {\n    if (err) {\n      return callback(err)\n    }\n\n    return callback(null, value)\n  })\n}\n\nmodule.exports = {\n  resolvePath\n}\n"]},"metadata":{},"sourceType":"script"}