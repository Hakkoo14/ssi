{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n\nvar base32 = require('base32.js');\n\nvar pull = require('pull-stream');\n\nvar pullDefer = require('pull-defer');\n\nmodule.exports = function (self) {\n  return function () {\n    var deferred = pullDefer.source();\n\n    self._repo.blocks.query({\n      keysOnly: true\n    }, function (err, blocks) {\n      if (err) {\n        return deferred.resolve(pull.error(err));\n      }\n\n      var refs = blocks.map(function (b) {\n        return dsKeyToRef(b.key);\n      });\n      deferred.resolve(pull.values(refs));\n    });\n\n    return deferred;\n  };\n};\n\nfunction dsKeyToRef(key) {\n  try {\n    // Block key is of the form /<base32 encoded string>\n    var decoder = new base32.Decoder();\n    var buff = Buffer.from(decoder.write(key.toString().slice(1)).finalize());\n    return {\n      ref: new CID(buff).toString()\n    };\n  } catch (err) {\n    return {\n      err: \"Could not convert block with key '\".concat(key, \"' to CID: \").concat(err.message)\n    };\n  }\n}","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/files-regular/refs-local-pull-stream.js"],"names":["CID","require","base32","pull","pullDefer","module","exports","self","deferred","source","_repo","blocks","query","keysOnly","err","resolve","error","refs","map","b","dsKeyToRef","key","values","decoder","Decoder","buff","Buffer","from","write","toString","slice","finalize","ref","message"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,aAAD,CAApB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,SAAO,YAAM;AACX,QAAMC,QAAQ,GAAGJ,SAAS,CAACK,MAAV,EAAjB;;AAEAF,IAAAA,IAAI,CAACG,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,CAAwB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAxB,EAA4C,UAACC,GAAD,EAAMH,MAAN,EAAiB;AAC3D,UAAIG,GAAJ,EAAS;AACP,eAAON,QAAQ,CAACO,OAAT,CAAiBZ,IAAI,CAACa,KAAL,CAAWF,GAAX,CAAjB,CAAP;AACD;;AAED,UAAMG,IAAI,GAAGN,MAAM,CAACO,GAAP,CAAW,UAAAC,CAAC;AAAA,eAAIC,UAAU,CAACD,CAAC,CAACE,GAAH,CAAd;AAAA,OAAZ,CAAb;AACAb,MAAAA,QAAQ,CAACO,OAAT,CAAiBZ,IAAI,CAACmB,MAAL,CAAYL,IAAZ,CAAjB;AACD,KAPD;;AASA,WAAOT,QAAP;AACD,GAbD;AAcD,CAfD;;AAiBA,SAASY,UAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAI;AACF;AACA,QAAME,OAAO,GAAG,IAAIrB,MAAM,CAACsB,OAAX,EAAhB;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAO,CAACK,KAAR,CAAcP,GAAG,CAACQ,QAAJ,GAAeC,KAAf,CAAqB,CAArB,CAAd,EAAuCC,QAAvC,EAAZ,CAAb;AACA,WAAO;AAAEC,MAAAA,GAAG,EAAE,IAAIhC,GAAJ,CAAQyB,IAAR,EAAcI,QAAd;AAAP,KAAP;AACD,GALD,CAKE,OAAOf,GAAP,EAAY;AACZ,WAAO;AAAEA,MAAAA,GAAG,8CAAuCO,GAAvC,uBAAuDP,GAAG,CAACmB,OAA3D;AAAL,KAAP;AACD;AACF","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst base32 = require('base32.js')\nconst pull = require('pull-stream')\nconst pullDefer = require('pull-defer')\n\nmodule.exports = function (self) {\n  return () => {\n    const deferred = pullDefer.source()\n\n    self._repo.blocks.query({ keysOnly: true }, (err, blocks) => {\n      if (err) {\n        return deferred.resolve(pull.error(err))\n      }\n\n      const refs = blocks.map(b => dsKeyToRef(b.key))\n      deferred.resolve(pull.values(refs))\n    })\n\n    return deferred\n  }\n}\n\nfunction dsKeyToRef (key) {\n  try {\n    // Block key is of the form /<base32 encoded string>\n    const decoder = new base32.Decoder()\n    const buff = Buffer.from(decoder.write(key.toString().slice(1)).finalize())\n    return { ref: new CID(buff).toString() }\n  } catch (err) {\n    return { err: `Could not convert block with key '${key}' to CID: ${err.message}` }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}