{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('superstruct'),\n    superstruct = _require.superstruct;\n\nvar dagBuilder = require('./dag-builder');\n\nvar treeBuilder = require('./tree-builder');\n\nvar mh = require('multihashes');\n\nvar struct = superstruct({\n  types: {\n    codec: function codec(v) {\n      return ['dag-pb', 'dag-cbor', 'raw'].includes(v);\n    },\n    hashAlg: function hashAlg(v) {\n      return Object.keys(mh.names).includes(v);\n    },\n    leafType: function leafType(v) {\n      return ['file', 'raw'].includes(v);\n    }\n  }\n});\nvar ChunkerOptions = struct({\n  minChunkSize: 'number?',\n  maxChunkSize: 'number?',\n  avgChunkSize: 'number?',\n  window: 'number?',\n  polynomial: 'number?'\n}, {\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653 // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n\n});\nvar BuilderOptions = struct({\n  maxChildrenPerNode: 'number?',\n  layerRepeat: 'number?'\n}, {\n  maxChildrenPerNode: 174,\n  layerRepeat: 4\n});\nvar Options = struct({\n  chunker: struct.enum(['fixed', 'rabin']),\n  rawLeaves: 'boolean?',\n  hashOnly: 'boolean?',\n  strategy: struct.enum(['balanced', 'flat', 'trickle']),\n  reduceSingleLeafToSelf: 'boolean?',\n  codec: 'codec?',\n  format: 'codec?',\n  hashAlg: 'hashAlg?',\n  leafType: 'leafType?',\n  cidVersion: 'number?',\n  progress: 'function?',\n  wrapWithDirectory: 'boolean?',\n  shardSplitThreshold: 'number?',\n  onlyHash: 'boolean?',\n  chunkerOptions: ChunkerOptions,\n  builderOptions: BuilderOptions,\n  wrap: 'boolean?',\n  pin: 'boolean?',\n  recursive: 'boolean?',\n  ignore: 'array?',\n  hidden: 'boolean?',\n  preload: 'boolean?'\n}, {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  cidVersion: 0,\n  progress: function progress() {\n    return function () {};\n  },\n  shardSplitThreshold: 1000\n});\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, ipld) {\n    var options,\n        opts,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        entry,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            opts = Options(options);\n\n            if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n              // if the cid version is 1 or above, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            }\n\n            if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n              // if a non-default hash alg has been specified, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n\n\n            if (options.strategy === 'trickle') {\n              opts.leafType = 'raw';\n              opts.reduceSingleLeafToSelf = false;\n            }\n\n            if (options.format) {\n              options.codec = options.format;\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 8;\n            _iterator = _asyncIterator(treeBuilder(dagBuilder(source, ipld, opts), ipld, opts));\n\n          case 10:\n            _context.next = 12;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 12:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 16;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 16:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 24;\n              break;\n            }\n\n            entry = _value;\n            _context.next = 21;\n            return {\n              cid: entry.cid,\n              path: entry.path,\n              unixfs: entry.unixfs,\n              size: entry.size\n            };\n\n          case 21:\n            _iteratorNormalCompletion = true;\n            _context.next = 10;\n            break;\n\n          case 24:\n            _context.next = 30;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](8);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 30:\n            _context.prev = 30;\n            _context.prev = 31;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 35;\n              break;\n            }\n\n            _context.next = 35;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 35:\n            _context.prev = 35;\n\n            if (!_didIteratorError) {\n              _context.next = 38;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 38:\n            return _context.finish(35);\n\n          case 39:\n            return _context.finish(30);\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 26, 30, 40], [31,, 35, 39]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs-unixfs-importer/src/index.js"],"names":["require","superstruct","dagBuilder","treeBuilder","mh","struct","types","codec","v","includes","hashAlg","Object","keys","names","leafType","ChunkerOptions","minChunkSize","maxChunkSize","avgChunkSize","window","polynomial","BuilderOptions","maxChildrenPerNode","layerRepeat","Options","chunker","enum","rawLeaves","hashOnly","strategy","reduceSingleLeafToSelf","format","cidVersion","progress","wrapWithDirectory","shardSplitThreshold","onlyHash","chunkerOptions","builderOptions","wrap","pin","recursive","ignore","hidden","preload","module","exports","source","ipld","options","opts","undefined","entry","cid","path","unixfs","size"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { superstruct } = require('superstruct')\nconst dagBuilder = require('./dag-builder')\nconst treeBuilder = require('./tree-builder')\nconst mh = require('multihashes')\n\nconst struct = superstruct({\n  types: {\n    codec: v => ['dag-pb', 'dag-cbor', 'raw'].includes(v),\n    hashAlg: v => Object.keys(mh.names).includes(v),\n    leafType: v => ['file', 'raw'].includes(v)\n  }\n})\n\nconst ChunkerOptions = struct({\n  minChunkSize: 'number?',\n  maxChunkSize: 'number?',\n  avgChunkSize: 'number?',\n  window: 'number?',\n  polynomial: 'number?'\n}, {\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653 // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n})\n\nconst BuilderOptions = struct({\n  maxChildrenPerNode: 'number?',\n  layerRepeat: 'number?'\n}, {\n  maxChildrenPerNode: 174,\n  layerRepeat: 4\n})\n\nconst Options = struct({\n  chunker: struct.enum(['fixed', 'rabin']),\n  rawLeaves: 'boolean?',\n  hashOnly: 'boolean?',\n  strategy: struct.enum(['balanced', 'flat', 'trickle']),\n  reduceSingleLeafToSelf: 'boolean?',\n  codec: 'codec?',\n  format: 'codec?',\n  hashAlg: 'hashAlg?',\n  leafType: 'leafType?',\n  cidVersion: 'number?',\n  progress: 'function?',\n  wrapWithDirectory: 'boolean?',\n  shardSplitThreshold: 'number?',\n  onlyHash: 'boolean?',\n  chunkerOptions: ChunkerOptions,\n  builderOptions: BuilderOptions,\n\n  wrap: 'boolean?',\n  pin: 'boolean?',\n  recursive: 'boolean?',\n  ignore: 'array?',\n  hidden: 'boolean?',\n  preload: 'boolean?'\n}, {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000\n})\n\nmodule.exports = async function * (source, ipld, options = {}) {\n  const opts = Options(options)\n\n  if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n    // if the cid version is 1 or above, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true\n  }\n\n  if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n    // if a non-default hash alg has been specified, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true\n  }\n\n  // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n  if (options.strategy === 'trickle') {\n    opts.leafType = 'raw'\n    opts.reduceSingleLeafToSelf = false\n  }\n\n  if (options.format) {\n    options.codec = options.format\n  }\n\n  for await (const entry of treeBuilder(dagBuilder(source, ipld, opts), ipld, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}