{"ast":null,"code":"'use strict';\n\nvar debug = require('debug');\n\nvar setImmediate = require('async/setImmediate');\n\nvar log = debug('ipfs:mfs-preload');\nlog.error = debug('ipfs:mfs-preload:error');\n\nmodule.exports = function (self) {\n  var options = self._options.preload || {};\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n    return {\n      start: function start(cb) {\n        return setImmediate(cb);\n      },\n      stop: function stop(cb) {\n        return setImmediate(cb);\n      }\n    };\n  }\n\n  var rootCid;\n  var timeoutId;\n\n  var preloadMfs = function preloadMfs() {\n    self.files.stat('/', function (err, stats) {\n      if (err) {\n        timeoutId = setTimeout(preloadMfs, options.interval);\n        return log.error('failed to stat MFS root for preload', err);\n      }\n\n      if (rootCid !== stats.hash) {\n        log(\"preloading updated MFS root \".concat(rootCid, \" -> \").concat(stats.hash));\n        return self._preload(stats.hash, function (err) {\n          timeoutId = setTimeout(preloadMfs, options.interval);\n          if (err) return log.error(\"failed to preload MFS root \".concat(stats.hash), err);\n          rootCid = stats.hash;\n        });\n      }\n\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    });\n  };\n\n  return {\n    start: function start(cb) {\n      self.files.stat('/', function (err, stats) {\n        if (err) return cb(err);\n        rootCid = stats.hash;\n        log(\"monitoring MFS root \".concat(rootCid));\n        timeoutId = setTimeout(preloadMfs, options.interval);\n        cb();\n      });\n    },\n    stop: function stop(cb) {\n      clearTimeout(timeoutId);\n      cb();\n    }\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/mfs-preload.js"],"names":["debug","require","setImmediate","log","error","module","exports","self","options","_options","preload","interval","enabled","start","cb","stop","rootCid","timeoutId","preloadMfs","files","stat","err","stats","setTimeout","hash","_preload","clearTimeout"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAME,GAAG,GAAGH,KAAK,CAAC,kBAAD,CAAjB;AACAG,GAAG,CAACC,KAAJ,GAAYJ,KAAK,CAAC,wBAAD,CAAjB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,MAAMC,OAAO,GAAGD,IAAI,CAACE,QAAL,CAAcC,OAAd,IAAyB,EAAzC;AACAF,EAAAA,OAAO,CAACG,QAAR,GAAmBH,OAAO,CAACG,QAAR,IAAoB,KAAK,IAA5C;;AAEA,MAAI,CAACH,OAAO,CAACI,OAAb,EAAsB;AACpBT,IAAAA,GAAG,CAAC,sBAAD,CAAH;AACA,WAAO;AACLU,MAAAA,KAAK,EAAE,eAACC,EAAD;AAAA,eAAQZ,YAAY,CAACY,EAAD,CAApB;AAAA,OADF;AAELC,MAAAA,IAAI,EAAE,cAACD,EAAD;AAAA,eAAQZ,YAAY,CAACY,EAAD,CAApB;AAAA;AAFD,KAAP;AAID;;AAED,MAAIE,OAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBX,IAAAA,IAAI,CAACY,KAAL,CAAWC,IAAX,CAAgB,GAAhB,EAAqB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACnC,UAAID,GAAJ,EAAS;AACPJ,QAAAA,SAAS,GAAGM,UAAU,CAACL,UAAD,EAAaV,OAAO,CAACG,QAArB,CAAtB;AACA,eAAOR,GAAG,CAACC,KAAJ,CAAU,qCAAV,EAAiDiB,GAAjD,CAAP;AACD;;AAED,UAAIL,OAAO,KAAKM,KAAK,CAACE,IAAtB,EAA4B;AAC1BrB,QAAAA,GAAG,uCAAgCa,OAAhC,iBAA8CM,KAAK,CAACE,IAApD,EAAH;AAEA,eAAOjB,IAAI,CAACkB,QAAL,CAAcH,KAAK,CAACE,IAApB,EAA0B,UAACH,GAAD,EAAS;AACxCJ,UAAAA,SAAS,GAAGM,UAAU,CAACL,UAAD,EAAaV,OAAO,CAACG,QAArB,CAAtB;AACA,cAAIU,GAAJ,EAAS,OAAOlB,GAAG,CAACC,KAAJ,sCAAwCkB,KAAK,CAACE,IAA9C,GAAsDH,GAAtD,CAAP;AACTL,UAAAA,OAAO,GAAGM,KAAK,CAACE,IAAhB;AACD,SAJM,CAAP;AAKD;;AAEDP,MAAAA,SAAS,GAAGM,UAAU,CAACL,UAAD,EAAaV,OAAO,CAACG,QAArB,CAAtB;AACD,KAjBD;AAkBD,GAnBD;;AAqBA,SAAO;AACLE,IAAAA,KADK,iBACEC,EADF,EACM;AACTP,MAAAA,IAAI,CAACY,KAAL,CAAWC,IAAX,CAAgB,GAAhB,EAAqB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACnC,YAAID,GAAJ,EAAS,OAAOP,EAAE,CAACO,GAAD,CAAT;AACTL,QAAAA,OAAO,GAAGM,KAAK,CAACE,IAAhB;AACArB,QAAAA,GAAG,+BAAwBa,OAAxB,EAAH;AACAC,QAAAA,SAAS,GAAGM,UAAU,CAACL,UAAD,EAAaV,OAAO,CAACG,QAArB,CAAtB;AACAG,QAAAA,EAAE;AACH,OAND;AAOD,KATI;AAULC,IAAAA,IAVK,gBAUCD,EAVD,EAUK;AACRY,MAAAA,YAAY,CAACT,SAAD,CAAZ;AACAH,MAAAA,EAAE;AACH;AAbI,GAAP;AAeD,CAnDD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst setImmediate = require('async/setImmediate')\nconst log = debug('ipfs:mfs-preload')\nlog.error = debug('ipfs:mfs-preload:error')\n\nmodule.exports = (self) => {\n  const options = self._options.preload || {}\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    return {\n      start: (cb) => setImmediate(cb),\n      stop: (cb) => setImmediate(cb)\n    }\n  }\n\n  let rootCid\n  let timeoutId\n\n  const preloadMfs = () => {\n    self.files.stat('/', (err, stats) => {\n      if (err) {\n        timeoutId = setTimeout(preloadMfs, options.interval)\n        return log.error('failed to stat MFS root for preload', err)\n      }\n\n      if (rootCid !== stats.hash) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.hash}`)\n\n        return self._preload(stats.hash, (err) => {\n          timeoutId = setTimeout(preloadMfs, options.interval)\n          if (err) return log.error(`failed to preload MFS root ${stats.hash}`, err)\n          rootCid = stats.hash\n        })\n      }\n\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    })\n  }\n\n  return {\n    start (cb) {\n      self.files.stat('/', (err, stats) => {\n        if (err) return cb(err)\n        rootCid = stats.hash\n        log(`monitoring MFS root ${rootCid}`)\n        timeoutId = setTimeout(preloadMfs, options.interval)\n        cb()\n      })\n    },\n    stop (cb) {\n      clearTimeout(timeoutId)\n      cb()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}