{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar errCode = require('err-code');\n\nvar fs = require('fs');\n\nvar log = require('debug')('ipfs:mfs:utils:to-async-iterator');\n\nvar _require = require('./constants'),\n    MAX_CHUNK_SIZE = _require.MAX_CHUNK_SIZE;\n\nvar toAsyncIterator = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(content) {\n    var index, iterator;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (content) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw errCode(new Error('paths must start with a leading /'), 'ERR_INVALID_PATH');\n\n          case 2:\n            if (!(typeof content === 'string' || content instanceof String)) {\n              _context3.next = 5;\n              break;\n            }\n\n            // Paths, node only\n            log('Content was a path');\n            return _context3.abrupt(\"return\", fs.createReadStream(content));\n\n          case 5:\n            if (!content.length) {\n              _context3.next = 8;\n              break;\n            }\n\n            log('Content was array-like');\n            return _context3.abrupt(\"return\", _defineProperty({}, Symbol.asyncIterator, function () {\n              var _bufferContent = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return content;\n\n                      case 2:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              function bufferContent() {\n                return _bufferContent.apply(this, arguments);\n              }\n\n              return bufferContent;\n            }()));\n\n          case 8:\n            if (!content[Symbol.asyncIterator]) {\n              _context3.next = 11;\n              break;\n            }\n\n            log('Content was an async iterator');\n            return _context3.abrupt(\"return\", content);\n\n          case 11:\n            if (!content[Symbol.iterator]) {\n              _context3.next = 14;\n              break;\n            }\n\n            log('Content was an iterator');\n            return _context3.abrupt(\"return\", content);\n\n          case 14:\n            if (!(global.Blob && content instanceof global.Blob)) {\n              _context3.next = 19;\n              break;\n            }\n\n            // HTML5 Blob objects (including Files)\n            log('Content was an HTML5 Blob');\n            index = 0;\n            iterator = {\n              next: function () {\n                var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (!(index > content.size)) {\n                            _context2.next = 2;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\", {\n                            done: true\n                          });\n\n                        case 2:\n                          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                            var chunk = content.slice(index, MAX_CHUNK_SIZE);\n                            index += MAX_CHUNK_SIZE;\n                            var reader = new global.FileReader();\n\n                            var handleLoad = function handleLoad(ev) {\n                              reader.removeEventListener('loadend', handleLoad, false);\n\n                              if (ev.error) {\n                                return reject(ev.error);\n                              }\n\n                              resolve({\n                                done: false,\n                                value: Buffer.from(reader.result)\n                              });\n                            };\n\n                            reader.addEventListener('loadend', handleLoad);\n                            reader.readAsArrayBuffer(chunk);\n                          }));\n\n                        case 3:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                function next() {\n                  return _next.apply(this, arguments);\n                }\n\n                return next;\n              }()\n            };\n            return _context3.abrupt(\"return\", _defineProperty({}, Symbol.asyncIterator, function () {\n              return iterator;\n            }));\n\n          case 19:\n            throw errCode(new Error(\"Don't know how to convert \".concat(content, \" into an async iterator\")), 'ERR_INVALID_PARAMS');\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function toAsyncIterator(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = toAsyncIterator;","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs-mfs/src/core/utils/to-async-iterator.js"],"names":["errCode","require","fs","log","MAX_CHUNK_SIZE","toAsyncIterator","content","Error","String","createReadStream","length","Symbol","asyncIterator","bufferContent","iterator","global","Blob","index","next","size","done","Promise","resolve","reject","chunk","slice","reader","FileReader","handleLoad","ev","removeEventListener","error","value","Buffer","from","result","addEventListener","readAsArrayBuffer","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst fs = require('fs')\nconst log = require('debug')('ipfs:mfs:utils:to-async-iterator')\nconst {\n  MAX_CHUNK_SIZE\n} = require('./constants')\n\nconst toAsyncIterator = async (content) => {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading /'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    // Paths, node only\n    log('Content was a path')\n\n    return fs.createReadStream(content)\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: async function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n\n    let index = 0\n\n    const iterator = {\n      next: async () => {\n        if (index > content.size) {\n          return {\n            done: true\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, MAX_CHUNK_SIZE)\n          index += MAX_CHUNK_SIZE\n\n          const reader = new global.FileReader()\n\n          const handleLoad = (ev) => {\n            reader.removeEventListener('loadend', handleLoad, false)\n\n            if (ev.error) {\n              return reject(ev.error)\n            }\n\n            resolve({\n              done: false,\n              value: Buffer.from(reader.result)\n            })\n          }\n\n          reader.addEventListener('loadend', handleLoad)\n          reader.readAsArrayBuffer(chunk)\n        })\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator\n      }\n    }\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n\nmodule.exports = toAsyncIterator\n"]},"metadata":{},"sourceType":"script"}