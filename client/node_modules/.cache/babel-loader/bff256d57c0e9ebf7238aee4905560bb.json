{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar Big = require('bignumber.js');\n\nvar Pushable = require('pull-pushable');\n\nvar human = require('human-to-milliseconds');\n\nvar toStream = require('pull-stream-to-stream');\n\nvar errCode = require('err-code');\n\nfunction bandwidthStats(self, opts) {\n  return new Promise(function (resolve, reject) {\n    var stats;\n\n    if (opts.peer) {\n      stats = self.libp2p.stats.forPeer(opts.peer);\n    } else if (opts.proto) {\n      stats = self.libp2p.stats.forProtocol(opts.proto);\n    } else {\n      stats = self.libp2p.stats.global;\n    }\n\n    if (!stats) {\n      resolve({\n        totalIn: new Big(0),\n        totalOut: new Big(0),\n        rateIn: new Big(0),\n        rateOut: new Big(0)\n      });\n      return;\n    }\n\n    resolve({\n      totalIn: stats.snapshot.dataReceived,\n      totalOut: stats.snapshot.dataSent,\n      rateIn: new Big(stats.movingAverages.dataReceived['60000'].movingAverage() / 60),\n      rateOut: new Big(stats.movingAverages.dataSent['60000'].movingAverage() / 60)\n    });\n  });\n}\n\nmodule.exports = function stats(self) {\n  var _bwPullStream = function _bwPullStream(opts) {\n    opts = opts || {};\n    var interval = null;\n    var stream = Pushable(true, function () {\n      if (interval) {\n        clearInterval(interval);\n      }\n    });\n\n    if (opts.poll) {\n      human(opts.interval || '1s', function (err, value) {\n        if (err) {\n          return stream.end(errCode(err, 'ERR_INVALID_POLL_INTERVAL'));\n        }\n\n        interval = setInterval(function () {\n          bandwidthStats(self, opts).then(function (stats) {\n            return stream.push(stats);\n          }).catch(function (err) {\n            return stream.end(err);\n          });\n        }, value);\n      });\n    } else {\n      bandwidthStats(self, opts).then(function (stats) {\n        stream.push(stats);\n        stream.end();\n      }).catch(function (err) {\n        return stream.end(err);\n      });\n    }\n\n    return stream.source;\n  };\n\n  return {\n    bitswap: require('./bitswap')(self).stat,\n    repo: require('./repo')(self).stat,\n    bw: promisify(function (opts, callback) {\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n\n      opts = opts || {};\n      bandwidthStats(self, opts).then(function (stats) {\n        return callback(null, stats);\n      }).catch(function (err) {\n        return callback(err);\n      });\n    }),\n    bwReadableStream: function bwReadableStream(opts) {\n      return toStream.source(_bwPullStream(opts));\n    },\n    bwPullStream: _bwPullStream\n  };\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/components/stats.js"],"names":["promisify","require","Big","Pushable","human","toStream","errCode","bandwidthStats","self","opts","Promise","resolve","reject","stats","peer","libp2p","forPeer","proto","forProtocol","global","totalIn","totalOut","rateIn","rateOut","snapshot","dataReceived","dataSent","movingAverages","movingAverage","module","exports","_bwPullStream","interval","stream","clearInterval","poll","err","value","end","setInterval","then","push","catch","source","bitswap","stat","repo","bw","callback","bwReadableStream","bwPullStream"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst Big = require('bignumber.js')\nconst Pushable = require('pull-pushable')\nconst human = require('human-to-milliseconds')\nconst toStream = require('pull-stream-to-stream')\nconst errCode = require('err-code')\n\nfunction bandwidthStats (self, opts) {\n  return new Promise((resolve, reject) => {\n    let stats\n\n    if (opts.peer) {\n      stats = self.libp2p.stats.forPeer(opts.peer)\n    } else if (opts.proto) {\n      stats = self.libp2p.stats.forProtocol(opts.proto)\n    } else {\n      stats = self.libp2p.stats.global\n    }\n\n    if (!stats) {\n      resolve({\n        totalIn: new Big(0),\n        totalOut: new Big(0),\n        rateIn: new Big(0),\n        rateOut: new Big(0)\n      })\n      return\n    }\n\n    resolve({\n      totalIn: stats.snapshot.dataReceived,\n      totalOut: stats.snapshot.dataSent,\n      rateIn: new Big(stats.movingAverages.dataReceived['60000'].movingAverage() / 60),\n      rateOut: new Big(stats.movingAverages.dataSent['60000'].movingAverage() / 60)\n    })\n  })\n}\n\nmodule.exports = function stats (self) {\n  const _bwPullStream = (opts) => {\n    opts = opts || {}\n    let interval = null\n    let stream = Pushable(true, () => {\n      if (interval) {\n        clearInterval(interval)\n      }\n    })\n\n    if (opts.poll) {\n      human(opts.interval || '1s', (err, value) => {\n        if (err) {\n          return stream.end(errCode(err, 'ERR_INVALID_POLL_INTERVAL'))\n        }\n\n        interval = setInterval(() => {\n          bandwidthStats(self, opts)\n            .then((stats) => stream.push(stats))\n            .catch((err) => stream.end(err))\n        }, value)\n      })\n    } else {\n      bandwidthStats(self, opts)\n        .then((stats) => {\n          stream.push(stats)\n          stream.end()\n        })\n        .catch((err) => stream.end(err))\n    }\n\n    return stream.source\n  }\n\n  return {\n    bitswap: require('./bitswap')(self).stat,\n    repo: require('./repo')(self).stat,\n    bw: promisify((opts, callback) => {\n      if (typeof opts === 'function') {\n        callback = opts\n        opts = {}\n      }\n\n      opts = opts || {}\n\n      bandwidthStats(self, opts)\n        .then((stats) => callback(null, stats))\n        .catch((err) => callback(err))\n    }),\n    bwReadableStream: (opts) => toStream.source(_bwPullStream(opts)),\n    bwPullStream: _bwPullStream\n  }\n}\n"]},"metadata":{},"sourceType":"script"}