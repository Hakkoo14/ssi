{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('assert');\n\nvar PeerInfo = require('peer-info');\n\nvar PeerId = require('peer-id');\n\nvar protons = require('protons');\n\nvar Record = require('libp2p-record').Record;\n\nvar pbm = protons(require('./dht.proto'));\nvar MESSAGE_TYPE = pbm.Message.MessageType;\nvar CONNECTION_TYPE = pbm.Message.ConnectionType;\n/**\n * Represents a single DHT control message.\n */\n\nvar Message = /*#__PURE__*/function () {\n  /**\n   * @param {MessageType} type\n   * @param {Buffer} key\n   * @param {number} level\n   */\n  function Message(type, key, level) {\n    _classCallCheck(this, Message);\n\n    if (key) {\n      assert(Buffer.isBuffer(key));\n    }\n\n    this.type = type;\n    this.key = key;\n    this._clusterLevelRaw = level;\n    this.closerPeers = [];\n    this.providerPeers = [];\n    this.record = null;\n  }\n  /**\n   * @type {number}\n   */\n\n\n  _createClass(Message, [{\n    key: \"clusterLevel\",\n    get: function get() {\n      var level = this._clusterLevelRaw - 1;\n\n      if (level < 0) {\n        return 0;\n      }\n\n      return level;\n    },\n    set: function set(level) {\n      this._clusterLevelRaw = level;\n    }\n    /**\n     * Encode into protobuf\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var obj = {\n        key: this.key,\n        type: this.type,\n        clusterLevelRaw: this._clusterLevelRaw,\n        closerPeers: this.closerPeers.map(toPbPeer),\n        providerPeers: this.providerPeers.map(toPbPeer)\n      };\n\n      if (this.record) {\n        if (Buffer.isBuffer(this.record)) {\n          obj.record = this.record;\n        } else {\n          obj.record = this.record.serialize();\n        }\n      }\n\n      return pbm.Message.encode(obj);\n    }\n    /**\n     * Decode from protobuf\n     *\n     * @param {Buffer} raw\n     * @returns {Message}\n     */\n\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(raw) {\n      var dec = pbm.Message.decode(raw);\n      var msg = new Message(dec.type, dec.key, dec.clusterLevelRaw);\n      msg.closerPeers = dec.closerPeers.map(fromPbPeer);\n      msg.providerPeers = dec.providerPeers.map(fromPbPeer);\n\n      if (dec.record) {\n        msg.record = Record.deserialize(dec.record);\n      }\n\n      return msg;\n    }\n  }]);\n\n  return Message;\n}();\n\nMessage.TYPES = MESSAGE_TYPE;\nMessage.CONNECTION_TYPES = CONNECTION_TYPE;\n\nfunction toPbPeer(peer) {\n  var res = {\n    id: peer.id.id,\n    addrs: peer.multiaddrs.toArray().map(function (m) {\n      return m.buffer;\n    })\n  };\n\n  if (peer.isConnected()) {\n    res.connection = CONNECTION_TYPE.CONNECTED;\n  } else {\n    res.connection = CONNECTION_TYPE.NOT_CONNECTED;\n  }\n\n  return res;\n}\n\nfunction fromPbPeer(peer) {\n  var info = new PeerInfo(new PeerId(peer.id));\n  peer.addrs.forEach(function (a) {\n    return info.multiaddrs.add(a);\n  });\n  return info;\n}\n\nmodule.exports = Message;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p-kad-dht/src/message/index.js"],"names":["assert","require","PeerInfo","PeerId","protons","Record","pbm","MESSAGE_TYPE","Message","MessageType","CONNECTION_TYPE","ConnectionType","type","key","level","Buffer","isBuffer","_clusterLevelRaw","closerPeers","providerPeers","record","obj","clusterLevelRaw","map","toPbPeer","serialize","encode","raw","dec","decode","msg","fromPbPeer","deserialize","TYPES","CONNECTION_TYPES","peer","res","id","addrs","multiaddrs","toArray","m","buffer","isConnected","connection","CONNECTED","NOT_CONNECTED","info","forEach","a","add","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst PeerInfo = require('peer-info')\nconst PeerId = require('peer-id')\nconst protons = require('protons')\nconst Record = require('libp2p-record').Record\n\nconst pbm = protons(require('./dht.proto'))\n\nconst MESSAGE_TYPE = pbm.Message.MessageType\nconst CONNECTION_TYPE = pbm.Message.ConnectionType\n\n/**\n * Represents a single DHT control message.\n */\nclass Message {\n  /**\n   * @param {MessageType} type\n   * @param {Buffer} key\n   * @param {number} level\n   */\n  constructor (type, key, level) {\n    if (key) {\n      assert(Buffer.isBuffer(key))\n    }\n\n    this.type = type\n    this.key = key\n    this._clusterLevelRaw = level\n    this.closerPeers = []\n    this.providerPeers = []\n    this.record = null\n  }\n\n  /**\n   * @type {number}\n   */\n  get clusterLevel () {\n    const level = this._clusterLevelRaw - 1\n    if (level < 0) {\n      return 0\n    }\n\n    return level\n  }\n\n  set clusterLevel (level) {\n    this._clusterLevelRaw = level\n  }\n\n  /**\n   * Encode into protobuf\n   * @returns {Buffer}\n   */\n  serialize () {\n    const obj = {\n      key: this.key,\n      type: this.type,\n      clusterLevelRaw: this._clusterLevelRaw,\n      closerPeers: this.closerPeers.map(toPbPeer),\n      providerPeers: this.providerPeers.map(toPbPeer)\n    }\n\n    if (this.record) {\n      if (Buffer.isBuffer(this.record)) {\n        obj.record = this.record\n      } else {\n        obj.record = this.record.serialize()\n      }\n    }\n\n    return pbm.Message.encode(obj)\n  }\n\n  /**\n   * Decode from protobuf\n   *\n   * @param {Buffer} raw\n   * @returns {Message}\n   */\n  static deserialize (raw) {\n    const dec = pbm.Message.decode(raw)\n\n    const msg = new Message(dec.type, dec.key, dec.clusterLevelRaw)\n\n    msg.closerPeers = dec.closerPeers.map(fromPbPeer)\n    msg.providerPeers = dec.providerPeers.map(fromPbPeer)\n    if (dec.record) {\n      msg.record = Record.deserialize(dec.record)\n    }\n\n    return msg\n  }\n}\n\nMessage.TYPES = MESSAGE_TYPE\nMessage.CONNECTION_TYPES = CONNECTION_TYPE\n\nfunction toPbPeer (peer) {\n  const res = {\n    id: peer.id.id,\n    addrs: peer.multiaddrs.toArray().map((m) => m.buffer)\n  }\n\n  if (peer.isConnected()) {\n    res.connection = CONNECTION_TYPE.CONNECTED\n  } else {\n    res.connection = CONNECTION_TYPE.NOT_CONNECTED\n  }\n\n  return res\n}\n\nfunction fromPbPeer (peer) {\n  const info = new PeerInfo(new PeerId(peer.id))\n  peer.addrs.forEach((a) => info.multiaddrs.add(a))\n\n  return info\n}\n\nmodule.exports = Message\n"]},"metadata":{},"sourceType":"script"}