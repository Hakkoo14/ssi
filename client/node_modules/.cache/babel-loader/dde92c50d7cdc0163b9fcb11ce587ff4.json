{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar shortid = require('shortid');\n\nvar _require = require('./constants'),\n    WORKER_REQUEST_READ_LOCK = _require.WORKER_REQUEST_READ_LOCK,\n    WORKER_RELEASE_READ_LOCK = _require.WORKER_RELEASE_READ_LOCK,\n    MASTER_GRANT_READ_LOCK = _require.MASTER_GRANT_READ_LOCK,\n    WORKER_REQUEST_WRITE_LOCK = _require.WORKER_REQUEST_WRITE_LOCK,\n    WORKER_RELEASE_WRITE_LOCK = _require.WORKER_RELEASE_WRITE_LOCK,\n    MASTER_GRANT_WRITE_LOCK = _require.MASTER_GRANT_WRITE_LOCK;\n\nvar observer = require('observable-webworkers');\n\nvar handleWorkerLockRequest = function handleWorkerLockRequest(emitter, masterEvent, requestType, releaseType, grantType) {\n  return function (worker, event) {\n    if (!event || !event.data || event.data.type !== requestType) {\n      return;\n    }\n\n    var requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    };\n    emitter.emit(masterEvent, requestEvent.name, function () {\n      // grant lock to worker\n      worker.postMessage({\n        type: grantType,\n        name: requestEvent.name,\n        identifier: requestEvent.identifier\n      }); // wait for worker to finish\n\n      return new Promise(function (resolve) {\n        var releaseEventListener = function releaseEventListener(event) {\n          if (!event || !event.data) {\n            return;\n          }\n\n          var releaseEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n          };\n\n          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n            worker.removeEventListener('message', releaseEventListener);\n            resolve();\n          }\n        };\n\n        worker.addEventListener('message', releaseEventListener);\n      });\n    });\n  };\n};\n\nvar makeWorkerLockRequest = function makeWorkerLockRequest(global, name, requestType, grantType, releaseType) {\n  return function (fn) {\n    var id = shortid.generate();\n    global.postMessage({\n      type: requestType,\n      identifier: id,\n      name: name\n    });\n    return new Promise(function (resolve, reject) {\n      var listener = function listener(event) {\n        if (!event || !event.data) {\n          return;\n        }\n\n        var responseEvent = {\n          type: event.data.type,\n          identifier: event.data.identifier\n        };\n\n        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {\n          global.removeEventListener('message', listener);\n          var error;\n          fn().catch(function (err) {\n            error = err;\n          }).then(function (result) {\n            global.postMessage({\n              type: releaseType,\n              identifier: id,\n              name: name\n            });\n\n            if (error) {\n              return reject(error);\n            }\n\n            return resolve(result);\n          });\n        }\n      };\n\n      global.addEventListener('message', listener);\n    });\n  };\n};\n\nvar defaultOptions = {\n  global: global,\n  singleProcess: false\n};\n\nmodule.exports = function (options) {\n  options = Object.assign({}, defaultOptions, options);\n  var isMaster = !!options.global.document || options.singleProcess;\n\n  if (isMaster) {\n    var emitter = new EventEmitter();\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));\n    return emitter;\n  }\n\n  return {\n    isWorker: true,\n    readLock: function readLock(name, options) {\n      return makeWorkerLockRequest(options.global, name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK);\n    },\n    writeLock: function writeLock(name, options) {\n      return makeWorkerLockRequest(options.global, name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/mortice/lib/browser.js"],"names":["EventEmitter","require","shortid","WORKER_REQUEST_READ_LOCK","WORKER_RELEASE_READ_LOCK","MASTER_GRANT_READ_LOCK","WORKER_REQUEST_WRITE_LOCK","WORKER_RELEASE_WRITE_LOCK","MASTER_GRANT_WRITE_LOCK","observer","handleWorkerLockRequest","emitter","masterEvent","requestType","releaseType","grantType","worker","event","data","type","requestEvent","name","identifier","emit","postMessage","Promise","resolve","releaseEventListener","releaseEvent","removeEventListener","addEventListener","makeWorkerLockRequest","global","fn","id","generate","reject","listener","responseEvent","error","catch","err","then","result","defaultOptions","singleProcess","module","exports","options","Object","assign","isMaster","document","isWorker","readLock","writeLock"],"mappings":"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","sourcesContent":["const EventEmitter = require('events').EventEmitter\nconst shortid = require('shortid')\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants')\nconst observer = require('observable-webworkers')\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, event) => {\n    if (!event || !event.data || event.data.type !== requestType) {\n      return\n    }\n\n    const requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    }\n\n    emitter.emit(masterEvent, requestEvent.name, () => {\n      // grant lock to worker\n      worker.postMessage({\n        type: grantType,\n        name: requestEvent.name,\n        identifier: requestEvent.identifier\n      })\n\n      // wait for worker to finish\n      return new Promise((resolve) => {\n        const releaseEventListener = (event) => {\n          if (!event || !event.data) {\n            return\n          }\n\n          const releaseEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n          }\n\n          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n            worker.removeEventListener('message', releaseEventListener)\n            resolve()\n          }\n        }\n\n        worker.addEventListener('message', releaseEventListener)\n      })\n    })\n  }\n}\n\nconst makeWorkerLockRequest = (global, name, requestType, grantType, releaseType) => {\n  return (fn) => {\n    const id = shortid.generate()\n\n    global.postMessage({\n      type: requestType,\n      identifier: id,\n      name\n    })\n\n    return new Promise((resolve, reject) => {\n      const listener = (event) => {\n        if (!event || !event.data) {\n          return\n        }\n\n        const responseEvent = {\n          type: event.data.type,\n          identifier: event.data.identifier\n        }\n\n        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {\n          global.removeEventListener('message', listener)\n\n          let error\n\n          fn()\n            .catch((err) => {\n              error = err\n            })\n            .then((result) => {\n              global.postMessage({\n                type: releaseType,\n                identifier: id,\n                name\n              })\n\n              if (error) {\n                return reject(error)\n              }\n\n              return resolve(result)\n            })\n        }\n      }\n\n      global.addEventListener('message', listener)\n    })\n  }\n}\n\nconst defaultOptions = {\n  global: global,\n  singleProcess: false\n}\n\nmodule.exports = (options) => {\n  options = Object.assign({}, defaultOptions, options)\n  const isMaster = !!options.global.document || options.singleProcess\n\n  if (isMaster) {\n    const emitter = new EventEmitter()\n\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK))\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK))\n\n    return emitter\n  }\n\n  return {\n    isWorker: true,\n    readLock: (name, options) => makeWorkerLockRequest(options.global, name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: (name, options) => makeWorkerLockRequest(options.global, name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}