{"ast":null,"code":"'use strict';\n\nvar setImmediate = require('async/setImmediate');\n\nvar retry = require('async/retry');\n\nvar toUri = require('multiaddr-to-uri');\n\nvar debug = require('debug');\n\nvar CID = require('cids');\n\nvar preload = require('./runtime/preload-nodejs');\n\nvar log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error');\n\nvar noop = function noop(err) {\n  if (err) log.error(err);\n};\n\nmodule.exports = function (self) {\n  var options = self._options.preload || {};\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n\n    var _api = function _api(_, callback) {\n      if (callback) {\n        setImmediate(function () {\n          return callback();\n        });\n      }\n    };\n\n    _api.start = function () {};\n\n    _api.stop = function () {};\n\n    return _api;\n  }\n\n  var stopped = true;\n  var requests = [];\n  var apiUris = options.addresses.map(apiAddrToUri);\n\n  var api = function api(cid, callback) {\n    callback = callback || noop;\n\n    if (typeof cid !== 'string') {\n      try {\n        cid = new CID(cid).toBaseEncodedString();\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(err);\n        });\n      }\n    }\n\n    var fallbackApiUris = Array.from(apiUris);\n    var request;\n    var now = Date.now();\n    retry({\n      times: fallbackApiUris.length\n    }, function (cb) {\n      if (stopped) return cb(new Error(\"preload aborted for \".concat(cid))); // Remove failed request from a previous attempt\n\n      requests = requests.filter(function (r) {\n        return r !== request;\n      });\n      var apiUri = fallbackApiUris.shift();\n      request = preload(\"\".concat(apiUri, \"/api/v0/refs?r=true&arg=\").concat(cid), cb);\n      requests = requests.concat(request);\n    }, function (err) {\n      requests = requests.filter(function (r) {\n        return r !== request;\n      });\n\n      if (err) {\n        return callback(err);\n      }\n\n      log(\"preloaded \".concat(cid, \" in \").concat(Date.now() - now, \"ms\"));\n      callback();\n    });\n  };\n\n  api.start = function () {\n    stopped = false;\n  };\n\n  api.stop = function () {\n    stopped = true;\n    log(\"canceling \".concat(requests.length, \" pending preload request(s)\"));\n    requests.forEach(function (r) {\n      return r.cancel();\n    });\n    requests = [];\n  };\n\n  return api;\n};\n\nfunction apiAddrToUri(addr) {\n  if (!(addr.endsWith('http') || addr.endsWith('https'))) {\n    addr = addr + '/http';\n  }\n\n  return toUri(addr);\n}","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/preload.js"],"names":["setImmediate","require","retry","toUri","debug","CID","preload","log","error","noop","err","module","exports","self","options","_options","enabled","Boolean","addresses","length","api","_","callback","start","stop","stopped","requests","apiUris","map","apiAddrToUri","cid","toBaseEncodedString","fallbackApiUris","Array","from","request","now","Date","times","cb","Error","filter","r","apiUri","shift","concat","forEach","cancel","addr","endsWith"],"mappings":"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","sourcesContent":["'use strict'\n\nconst setImmediate = require('async/setImmediate')\nconst retry = require('async/retry')\nconst toUri = require('multiaddr-to-uri')\nconst debug = require('debug')\nconst CID = require('cids')\nconst preload = require('./runtime/preload-nodejs')\n\nconst log = debug('ipfs:preload')\nlog.error = debug('ipfs:preload:error')\n\nconst noop = (err) => { if (err) log.error(err) }\n\nmodule.exports = self => {\n  const options = self._options.preload || {}\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = (_, callback) => {\n      if (callback) {\n        setImmediate(() => callback())\n      }\n    }\n    api.start = () => {}\n    api.stop = () => {}\n    return api\n  }\n\n  let stopped = true\n  let requests = []\n  const apiUris = options.addresses.map(apiAddrToUri)\n\n  const api = (cid, callback) => {\n    callback = callback || noop\n\n    if (typeof cid !== 'string') {\n      try {\n        cid = new CID(cid).toBaseEncodedString()\n      } catch (err) {\n        return setImmediate(() => callback(err))\n      }\n    }\n\n    const fallbackApiUris = Array.from(apiUris)\n    let request\n    const now = Date.now()\n\n    retry({ times: fallbackApiUris.length }, (cb) => {\n      if (stopped) return cb(new Error(`preload aborted for ${cid}`))\n\n      // Remove failed request from a previous attempt\n      requests = requests.filter(r => r !== request)\n\n      const apiUri = fallbackApiUris.shift()\n\n      request = preload(`${apiUri}/api/v0/refs?r=true&arg=${cid}`, cb)\n      requests = requests.concat(request)\n    }, (err) => {\n      requests = requests.filter(r => r !== request)\n\n      if (err) {\n        return callback(err)\n      }\n\n      log(`preloaded ${cid} in ${Date.now() - now}ms`)\n      callback()\n    })\n  }\n\n  api.start = () => {\n    stopped = false\n  }\n\n  api.stop = () => {\n    stopped = true\n    log(`canceling ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.cancel())\n    requests = []\n  }\n\n  return api\n}\n\nfunction apiAddrToUri (addr) {\n  if (!(addr.endsWith('http') || addr.endsWith('https'))) {\n    addr = addr + '/http'\n  }\n  return toUri(addr)\n}\n"]},"metadata":{},"sourceType":"script"}