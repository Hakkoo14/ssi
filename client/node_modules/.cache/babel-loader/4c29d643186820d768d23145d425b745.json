{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nvar Rabin = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of Rabin.\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param { import(\"./../dist/rabin\").default } asModule\n   * @memberof Rabin\n   */\n  function Rabin() {\n    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8 * 1024;\n    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32 * 1024;\n    var windowSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;\n    var asModule = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, Rabin);\n\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize);\n  }\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n\n\n  _createClass(Rabin, [{\n    key: \"fingerprint\",\n    value: function fingerprint(buf) {\n      var lengths = new Int32Array(Math.ceil(buf.length / this.min));\n      var lengthsPtr = this.asModule.newArray(lengths);\n      var pointer = this.asModule.newArray(buf); // run finderprint\n\n      this.rabin.fingerprint(pointer, lengthsPtr);\n      var processed = this.asModule.getArray(Int32Array, lengthsPtr); //free memory\n\n      this.asModule.freeArray(lengthsPtr);\n      this.asModule.freeArray(pointer); // TODO: remove this. @see https://github.com/ipfs/js-ipfs/issues/2118#issuecomment-497722625\n      // clean extra 0s in the array\n\n      var cleanArr = [];\n\n      for (var i = 0; i < processed.length; i++) {\n        if (processed[i] === 0) break;\n        cleanArr[i] = processed[i];\n      }\n\n      return cleanArr;\n    }\n  }]);\n\n  return Rabin;\n}();\n\nmodule.exports = Rabin;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/rabin-wasm/src/rabin.js"],"names":["Rabin","bits","min","max","windowSize","asModule","rabin","buf","lengths","Int32Array","Math","ceil","length","lengthsPtr","newArray","pointer","fingerprint","processed","getArray","freeArray","cleanArr","i","module","exports"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;IACMA,K;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,mBAAmF;AAAA,QAAvEC,IAAuE,uEAAhE,EAAgE;AAAA,QAA5DC,GAA4D,uEAAtD,IAAI,IAAkD;AAAA,QAA5CC,GAA4C,uEAAtC,KAAK,IAAiC;AAAA,QAA3BC,UAA2B,uEAAd,EAAc;AAAA,QAAVC,QAAU;;AAAA;;AAC/E,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKC,KAAL,GAAa,IAAID,QAAQ,CAACL,KAAb,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,UAAnC,CAAb;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;WACI,qBAAYG,GAAZ,EAAiB;AACb,UAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeC,IAAI,CAACC,IAAL,CAAUJ,GAAG,CAACK,MAAJ,GAAW,KAAKV,GAA1B,CAAf,CAAhB;AACA,UAAMW,UAAU,GAAG,KAAKR,QAAL,CAAcS,QAAd,CAAuBN,OAAvB,CAAnB;AACA,UAAMO,OAAO,GAAG,KAAKV,QAAL,CAAcS,QAAd,CAAuBP,GAAvB,CAAhB,CAHa,CAKb;;AACA,WAAKD,KAAL,CAAWU,WAAX,CAAuBD,OAAvB,EAAgCF,UAAhC;AAEA,UAAMI,SAAS,GAAG,KAAKZ,QAAL,CAAca,QAAd,CAAuBT,UAAvB,EAAmCI,UAAnC,CAAlB,CARa,CAUb;;AACA,WAAKR,QAAL,CAAcc,SAAd,CAAwBN,UAAxB;AACA,WAAKR,QAAL,CAAcc,SAAd,CAAwBJ,OAAxB,EAZa,CAcb;AACA;;AACA,UAAMK,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACL,MAA9B,EAAsCS,CAAC,EAAvC,EAA2C;AACvC,YAAGJ,SAAS,CAACI,CAAD,CAAT,KAAiB,CAApB,EAAuB;AACvBD,QAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcJ,SAAS,CAACI,CAAD,CAAvB;AACH;;AAED,aAAOD,QAAP;AACH;;;;;;AAGLE,MAAM,CAACC,OAAP,GAAiBvB,KAAjB","sourcesContent":["/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n    /**\n     * Creates an instance of Rabin.\n     * @param {number} [bits=12]\n     * @param {number} [min=8 * 1024]\n     * @param {number} [max=32 * 1024]\n     * @param { import(\"./../dist/rabin\").default } asModule\n     * @memberof Rabin\n     */\n    constructor(bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, asModule) {\n        this.bits = bits\n        this.min = min\n        this.max = max\n        this.asModule = asModule\n        this.rabin = new asModule.Rabin(bits, min, max, windowSize)\n    }\n\n    /**\n     * Fingerprints the buffer\n     *\n     * @param {Uint8Array} buf\n     * @returns {Array<number>}\n     * @memberof Rabin\n     */\n    fingerprint(buf) {\n        const lengths = new Int32Array(Math.ceil(buf.length/this.min))\n        const lengthsPtr = this.asModule.newArray(lengths)\n        const pointer = this.asModule.newArray(buf)\n\n        // run finderprint\n        this.rabin.fingerprint(pointer, lengthsPtr)\n\n        const processed = this.asModule.getArray(Int32Array, lengthsPtr)\n\n        //free memory\n        this.asModule.freeArray(lengthsPtr)\n        this.asModule.freeArray(pointer)\n\n        // TODO: remove this. @see https://github.com/ipfs/js-ipfs/issues/2118#issuecomment-497722625\n        // clean extra 0s in the array\n        const cleanArr = []\n        for (let i = 0; i < processed.length; i++) {\n            if(processed[i] === 0) break\n            cleanArr[i] = processed[i];\n        }\n\n        return cleanArr\n    }\n}\n\nmodule.exports = Rabin"]},"metadata":{},"sourceType":"script"}