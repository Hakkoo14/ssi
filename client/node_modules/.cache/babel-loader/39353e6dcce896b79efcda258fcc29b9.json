{"ast":null,"code":"'use strict';\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar deferred = require('pull-defer');\n\nvar pull = require('pull-stream/pull');\n\nvar once = require('pull-stream/sources/once');\n\nvar map = require('pull-stream/throughs/map');\n\nvar filter = require('pull-stream/throughs/filter');\n\nvar errCode = require('err-code');\n\nvar toPullStream = require('async-iterator-to-pull-stream');\n\nvar _require = require('./utils'),\n    normalizePath = _require.normalizePath,\n    mapFile = _require.mapFile;\n\nmodule.exports = function (self) {\n  return function (ipfsPath, options) {\n    options = options || {};\n    var path = normalizePath(ipfsPath);\n    var recursive = options.recursive;\n    var pathComponents = path.split('/');\n\n    if (options.preload !== false) {\n      self._preload(pathComponents[0]);\n    }\n\n    var d = deferred.source();\n    exporter(ipfsPath, self._ipld, options).then(function (file) {\n      if (!file.unixfs) {\n        return d.abort(errCode(new Error('dag node was not a UnixFS node'), 'ENOTUNIXFS'));\n      }\n\n      if (file.unixfs.type === 'file') {\n        return d.resolve(once(mapFile(options)(file)));\n      }\n\n      if (file.unixfs.type.includes('dir')) {\n        if (recursive) {\n          return d.resolve(pull(toPullStream.source(exporter.recursive(file.cid, self._ipld, options)), filter(function (child) {\n            return file.cid.toBaseEncodedString() !== child.cid.toBaseEncodedString();\n          }), map(mapFile(options))));\n        }\n\n        return d.resolve(pull(toPullStream.source(file.content()), map(mapFile(options)), map(function (file) {\n          file.depth--;\n          return file;\n        })));\n      }\n\n      d.abort(errCode(new Error(\"Unknown UnixFS type \".concat(file.unixfs.type)), 'EUNKNOWNUNIXFSTYPE'));\n    }, function (err) {\n      d.abort(err);\n    });\n    return d;\n  };\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/components/files-regular/ls-pull-stream.js"],"names":["exporter","require","deferred","pull","once","map","filter","errCode","toPullStream","normalizePath","mapFile","module","exports","self","ipfsPath","options","path","recursive","pathComponents","split","preload","_preload","d","source","_ipld","then","file","unixfs","abort","Error","type","resolve","includes","cid","child","toBaseEncodedString","content","depth","err"],"mappings":"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","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst deferred = require('pull-defer')\nconst pull = require('pull-stream/pull')\nconst once = require('pull-stream/sources/once')\nconst map = require('pull-stream/throughs/map')\nconst filter = require('pull-stream/throughs/filter')\nconst errCode = require('err-code')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst { normalizePath, mapFile } = require('./utils')\n\nmodule.exports = function (self) {\n  return function (ipfsPath, options) {\n    options = options || {}\n\n    const path = normalizePath(ipfsPath)\n    const recursive = options.recursive\n    const pathComponents = path.split('/')\n\n    if (options.preload !== false) {\n      self._preload(pathComponents[0])\n    }\n\n    const d = deferred.source()\n\n    exporter(ipfsPath, self._ipld, options)\n      .then(file => {\n        if (!file.unixfs) {\n          return d.abort(errCode(new Error('dag node was not a UnixFS node'), 'ENOTUNIXFS'))\n        }\n\n        if (file.unixfs.type === 'file') {\n          return d.resolve(once(mapFile(options)(file)))\n        }\n\n        if (file.unixfs.type.includes('dir')) {\n          if (recursive) {\n            return d.resolve(pull(\n              toPullStream.source(exporter.recursive(file.cid, self._ipld, options)),\n              filter(child => file.cid.toBaseEncodedString() !== child.cid.toBaseEncodedString()),\n              map(mapFile(options))\n            ))\n          }\n\n          return d.resolve(pull(\n            toPullStream.source(file.content()),\n            map(mapFile(options)),\n            map((file) => {\n              file.depth--\n\n              return file\n            })\n          ))\n        }\n\n        d.abort(errCode(new Error(`Unknown UnixFS type ${file.unixfs.type}`), 'EUNKNOWNUNIXFSTYPE'))\n      }, err => {\n        d.abort(err)\n      })\n\n    return d\n  }\n}\n"]},"metadata":{},"sourceType":"script"}