{"ast":null,"code":"/* global self */\n// created by @HenrikJoreteg\nvar prefix;\nvar version;\n\nif (self.mozRTCPeerConnection || navigator.mozGetUserMedia) {\n  prefix = 'moz';\n  version = parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n} else if (self.webkitRTCPeerConnection || navigator.webkitGetUserMedia) {\n  prefix = 'webkit';\n  version = navigator.userAgent.match(/Chrom(e|ium)/) && parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2], 10);\n}\n\nvar PC = self.RTCPeerConnection || self.mozRTCPeerConnection || self.webkitRTCPeerConnection;\nvar IceCandidate = self.mozRTCIceCandidate || self.RTCIceCandidate;\nvar SessionDescription = self.mozRTCSessionDescription || self.RTCSessionDescription;\nvar MediaStream = self.webkitMediaStream || self.MediaStream;\nvar screenSharing = self.location.protocol === 'https:' && (prefix === 'webkit' && version >= 26 || prefix === 'moz' && version >= 33);\nvar AudioContext = self.AudioContext || self.webkitAudioContext;\nvar videoEl = self.document && document.createElement('video');\nvar supportVp8 = videoEl && videoEl.canPlayType && videoEl.canPlayType('video/webm; codecs=\"vp8\", vorbis') === 'probably';\nvar getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia || navigator.mozGetUserMedia; // export support flags and constructors.prototype && PC\n\nmodule.exports = {\n  prefix: prefix,\n  browserVersion: version,\n  support: !!PC && !!getUserMedia,\n  // new support style\n  supportRTCPeerConnection: !!PC,\n  supportVp8: supportVp8,\n  supportGetUserMedia: !!getUserMedia,\n  supportDataChannel: !!(PC && PC.prototype && PC.prototype.createDataChannel),\n  supportWebAudio: !!(AudioContext && AudioContext.prototype.createMediaStreamSource),\n  supportMediaStream: !!(MediaStream && MediaStream.prototype.removeTrack),\n  supportScreenSharing: !!screenSharing,\n  // constructors\n  AudioContext: AudioContext,\n  PeerConnection: PC,\n  SessionDescription: SessionDescription,\n  IceCandidate: IceCandidate,\n  MediaStream: MediaStream,\n  getUserMedia: getUserMedia\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/webrtcsupport/index-browser.js"],"names":["prefix","version","self","mozRTCPeerConnection","navigator","mozGetUserMedia","parseInt","userAgent","match","webkitRTCPeerConnection","webkitGetUserMedia","PC","RTCPeerConnection","IceCandidate","mozRTCIceCandidate","RTCIceCandidate","SessionDescription","mozRTCSessionDescription","RTCSessionDescription","MediaStream","webkitMediaStream","screenSharing","location","protocol","AudioContext","webkitAudioContext","videoEl","document","createElement","supportVp8","canPlayType","getUserMedia","msGetUserMedia","module","exports","browserVersion","support","supportRTCPeerConnection","supportGetUserMedia","supportDataChannel","prototype","createDataChannel","supportWebAudio","createMediaStreamSource","supportMediaStream","removeTrack","supportScreenSharing","PeerConnection"],"mappings":"AAAA;AAEA;AACA,IAAIA,MAAJ;AACA,IAAIC,OAAJ;;AAEA,IAAIC,IAAI,CAACC,oBAAL,IAA6BC,SAAS,CAACC,eAA3C,EAA4D;AAC1DL,EAAAA,MAAM,GAAG,KAAT;AACAC,EAAAA,OAAO,GAAGK,QAAQ,CAACF,SAAS,CAACG,SAAV,CAAoBC,KAApB,CAA0B,qBAA1B,EAAiD,CAAjD,CAAD,EAAsD,EAAtD,CAAlB;AACD,CAHD,MAGO,IAAIN,IAAI,CAACO,uBAAL,IAAgCL,SAAS,CAACM,kBAA9C,EAAkE;AACvEV,EAAAA,MAAM,GAAG,QAAT;AACAC,EAAAA,OAAO,GAAGG,SAAS,CAACG,SAAV,CAAoBC,KAApB,CAA0B,cAA1B,KAA6CF,QAAQ,CAACF,SAAS,CAACG,SAAV,CAAoBC,KAApB,CAA0B,0BAA1B,EAAsD,CAAtD,CAAD,EAA2D,EAA3D,CAA/D;AACD;;AAED,IAAIG,EAAE,GAAGT,IAAI,CAACU,iBAAL,IAA0BV,IAAI,CAACC,oBAA/B,IAAuDD,IAAI,CAACO,uBAArE;AACA,IAAII,YAAY,GAAGX,IAAI,CAACY,kBAAL,IAA2BZ,IAAI,CAACa,eAAnD;AACA,IAAIC,kBAAkB,GAAGd,IAAI,CAACe,wBAAL,IAAiCf,IAAI,CAACgB,qBAA/D;AACA,IAAIC,WAAW,GAAGjB,IAAI,CAACkB,iBAAL,IAA0BlB,IAAI,CAACiB,WAAjD;AACA,IAAIE,aAAa,GAAGnB,IAAI,CAACoB,QAAL,CAAcC,QAAd,KAA2B,QAA3B,KACdvB,MAAM,KAAK,QAAX,IAAuBC,OAAO,IAAI,EAAnC,IACCD,MAAM,KAAK,KAAX,IAAoBC,OAAO,IAAI,EAFjB,CAApB;AAGA,IAAIuB,YAAY,GAAGtB,IAAI,CAACsB,YAAL,IAAqBtB,IAAI,CAACuB,kBAA7C;AACA,IAAIC,OAAO,GAAGxB,IAAI,CAACyB,QAAL,IAAiBA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAA/B;AACA,IAAIC,UAAU,GAAGH,OAAO,IAAIA,OAAO,CAACI,WAAnB,IAAkCJ,OAAO,CAACI,WAAR,CAAoB,kCAApB,MAA4D,UAA/G;AACA,IAAIC,YAAY,GAAG3B,SAAS,CAAC2B,YAAV,IAA0B3B,SAAS,CAACM,kBAApC,IAA0DN,SAAS,CAAC4B,cAApE,IAAsF5B,SAAS,CAACC,eAAnH,C,CAEA;;AACA4B,MAAM,CAACC,OAAP,GAAiB;AACflC,EAAAA,MAAM,EAAEA,MADO;AAEfmC,EAAAA,cAAc,EAAElC,OAFD;AAGfmC,EAAAA,OAAO,EAAE,CAAC,CAACzB,EAAF,IAAQ,CAAC,CAACoB,YAHJ;AAIb;AACFM,EAAAA,wBAAwB,EAAE,CAAC,CAAC1B,EALb;AAMfkB,EAAAA,UAAU,EAAEA,UANG;AAOfS,EAAAA,mBAAmB,EAAE,CAAC,CAACP,YAPR;AAQfQ,EAAAA,kBAAkB,EAAE,CAAC,EAAE5B,EAAE,IAAIA,EAAE,CAAC6B,SAAT,IAAsB7B,EAAE,CAAC6B,SAAH,CAAaC,iBAArC,CARN;AASfC,EAAAA,eAAe,EAAE,CAAC,EAAElB,YAAY,IAAIA,YAAY,CAACgB,SAAb,CAAuBG,uBAAzC,CATH;AAUfC,EAAAA,kBAAkB,EAAE,CAAC,EAAEzB,WAAW,IAAIA,WAAW,CAACqB,SAAZ,CAAsBK,WAAvC,CAVN;AAWfC,EAAAA,oBAAoB,EAAE,CAAC,CAACzB,aAXT;AAYb;AACFG,EAAAA,YAAY,EAAEA,YAbC;AAcfuB,EAAAA,cAAc,EAAEpC,EAdD;AAefK,EAAAA,kBAAkB,EAAEA,kBAfL;AAgBfH,EAAAA,YAAY,EAAEA,YAhBC;AAiBfM,EAAAA,WAAW,EAAEA,WAjBE;AAkBfY,EAAAA,YAAY,EAAEA;AAlBC,CAAjB","sourcesContent":["/* global self */\r\n\r\n// created by @HenrikJoreteg\r\nvar prefix\r\nvar version\r\n\r\nif (self.mozRTCPeerConnection || navigator.mozGetUserMedia) {\r\n  prefix = 'moz'\r\n  version = parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10)\r\n} else if (self.webkitRTCPeerConnection || navigator.webkitGetUserMedia) {\r\n  prefix = 'webkit'\r\n  version = navigator.userAgent.match(/Chrom(e|ium)/) && parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2], 10)\r\n}\r\n\r\nvar PC = self.RTCPeerConnection || self.mozRTCPeerConnection || self.webkitRTCPeerConnection\r\nvar IceCandidate = self.mozRTCIceCandidate || self.RTCIceCandidate\r\nvar SessionDescription = self.mozRTCSessionDescription || self.RTCSessionDescription\r\nvar MediaStream = self.webkitMediaStream || self.MediaStream\r\nvar screenSharing = self.location.protocol === 'https:' &&\r\n    ((prefix === 'webkit' && version >= 26) ||\r\n     (prefix === 'moz' && version >= 33))\r\nvar AudioContext = self.AudioContext || self.webkitAudioContext\r\nvar videoEl = self.document && document.createElement('video')\r\nvar supportVp8 = videoEl && videoEl.canPlayType && videoEl.canPlayType('video/webm; codecs=\"vp8\", vorbis') === 'probably'\r\nvar getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia || navigator.mozGetUserMedia\r\n\r\n// export support flags and constructors.prototype && PC\r\nmodule.exports = {\r\n  prefix: prefix,\r\n  browserVersion: version,\r\n  support: !!PC && !!getUserMedia,\r\n    // new support style\r\n  supportRTCPeerConnection: !!PC,\r\n  supportVp8: supportVp8,\r\n  supportGetUserMedia: !!getUserMedia,\r\n  supportDataChannel: !!(PC && PC.prototype && PC.prototype.createDataChannel),\r\n  supportWebAudio: !!(AudioContext && AudioContext.prototype.createMediaStreamSource),\r\n  supportMediaStream: !!(MediaStream && MediaStream.prototype.removeTrack),\r\n  supportScreenSharing: !!screenSharing,\r\n    // constructors\r\n  AudioContext: AudioContext,\r\n  PeerConnection: PC,\r\n  SessionDescription: SessionDescription,\r\n  IceCandidate: IceCandidate,\r\n  MediaStream: MediaStream,\r\n  getUserMedia: getUserMedia\r\n}\r\n"]},"metadata":{},"sourceType":"script"}