{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar WS = require('libp2p-websockets');\n\nvar WebRTCStar = require('libp2p-webrtc-star');\n\nvar WebSocketStarMulti = require('libp2p-websocket-star-multi');\n\nvar Multiplex = require('pull-mplex');\n\nvar SECIO = require('libp2p-secio');\n\nvar Bootstrap = require('libp2p-bootstrap');\n\nvar KadDHT = require('libp2p-kad-dht');\n\nvar libp2p = require('libp2p');\n\nvar mergeOptions = require('merge-options');\n\nvar multiaddr = require('multiaddr');\n\nvar Node = /*#__PURE__*/function (_libp2p) {\n  _inherits(Node, _libp2p);\n\n  var _super = _createSuper(Node);\n\n  function Node(_options) {\n    _classCallCheck(this, Node);\n\n    var wrtcstar = new WebRTCStar({\n      id: _options.peerInfo.id\n    }); // this can be replaced once optional listening is supported with the below code. ref: https://github.com/libp2p/interface-transport/issues/41\n    // const wsstar = new WebSocketStar({ id: _options.peerInfo.id })\n\n    var wsstarServers = _options.peerInfo.multiaddrs.toArray().map(String).filter(function (addr) {\n      return addr.includes('p2p-websocket-star');\n    });\n\n    _options.peerInfo.multiaddrs.replace(wsstarServers.map(multiaddr), '/p2p-websocket-star'); // the ws-star-multi module will replace this with the chosen ws-star servers\n\n\n    var wsstar = new WebSocketStarMulti({\n      servers: wsstarServers,\n      id: _options.peerInfo.id,\n      ignore_no_online: !wsstarServers.length || _options.wsStarIgnoreErrors\n    });\n    var defaults = {\n      switch: {\n        blacklistTTL: 2 * 60 * 1e3,\n        // 2 minute base\n        blackListAttempts: 5,\n        // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3\n      },\n      modules: {\n        transport: [WS, wrtcstar, wsstar],\n        streamMuxer: [Multiplex],\n        connEncryption: [SECIO],\n        peerDiscovery: [wrtcstar.discovery, wsstar.discovery, Bootstrap],\n        dht: KadDHT\n      },\n      config: {\n        peerDiscovery: {\n          autoDial: true,\n          bootstrap: {\n            enabled: true\n          },\n          webRTCStar: {\n            enabled: true\n          },\n          websocketStar: {\n            enabled: true\n          }\n        },\n        dht: {\n          enabled: false\n        },\n        EXPERIMENTAL: {\n          pubsub: false\n        }\n      }\n    };\n    return _super.call(this, mergeOptions(defaults, _options));\n  }\n\n  return Node;\n}(libp2p);\n\nmodule.exports = Node;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/ipfs/src/core/runtime/libp2p-browser.js"],"names":["WS","require","WebRTCStar","WebSocketStarMulti","Multiplex","SECIO","Bootstrap","KadDHT","libp2p","mergeOptions","multiaddr","Node","_options","wrtcstar","id","peerInfo","wsstarServers","multiaddrs","toArray","map","String","filter","addr","includes","replace","wsstar","servers","ignore_no_online","length","wsStarIgnoreErrors","defaults","switch","blacklistTTL","blackListAttempts","maxParallelDials","maxColdCalls","dialTimeout","modules","transport","streamMuxer","connEncryption","peerDiscovery","discovery","dht","config","autoDial","bootstrap","enabled","webRTCStar","websocketStar","EXPERIMENTAL","pubsub","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst WS = require('libp2p-websockets')\nconst WebRTCStar = require('libp2p-webrtc-star')\nconst WebSocketStarMulti = require('libp2p-websocket-star-multi')\nconst Multiplex = require('pull-mplex')\nconst SECIO = require('libp2p-secio')\nconst Bootstrap = require('libp2p-bootstrap')\nconst KadDHT = require('libp2p-kad-dht')\nconst libp2p = require('libp2p')\nconst mergeOptions = require('merge-options')\nconst multiaddr = require('multiaddr')\n\nclass Node extends libp2p {\n  constructor (_options) {\n    const wrtcstar = new WebRTCStar({ id: _options.peerInfo.id })\n\n    // this can be replaced once optional listening is supported with the below code. ref: https://github.com/libp2p/interface-transport/issues/41\n    // const wsstar = new WebSocketStar({ id: _options.peerInfo.id })\n    const wsstarServers = _options.peerInfo.multiaddrs.toArray().map(String).filter(addr => addr.includes('p2p-websocket-star'))\n    _options.peerInfo.multiaddrs.replace(wsstarServers.map(multiaddr), '/p2p-websocket-star') // the ws-star-multi module will replace this with the chosen ws-star servers\n    const wsstar = new WebSocketStarMulti({ servers: wsstarServers, id: _options.peerInfo.id, ignore_no_online: !wsstarServers.length || _options.wsStarIgnoreErrors })\n\n    const defaults = {\n      switch: {\n        blacklistTTL: 2 * 60 * 1e3, // 2 minute base\n        blackListAttempts: 5, // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3\n      },\n      modules: {\n        transport: [\n          WS,\n          wrtcstar,\n          wsstar\n        ],\n        streamMuxer: [\n          Multiplex\n        ],\n        connEncryption: [\n          SECIO\n        ],\n        peerDiscovery: [\n          wrtcstar.discovery,\n          wsstar.discovery,\n          Bootstrap\n        ],\n        dht: KadDHT\n      },\n      config: {\n        peerDiscovery: {\n          autoDial: true,\n          bootstrap: {\n            enabled: true\n          },\n          webRTCStar: {\n            enabled: true\n          },\n          websocketStar: {\n            enabled: true\n          }\n        },\n        dht: {\n          enabled: false\n        },\n        EXPERIMENTAL: {\n          pubsub: false\n        }\n      }\n    }\n\n    super(mergeOptions(defaults, _options))\n  }\n}\n\nmodule.exports = Node\n"]},"metadata":{},"sourceType":"script"}