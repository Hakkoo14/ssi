{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar setImmediate = require('async/setImmediate');\n\nvar errCode = require('err-code');\n\nvar errPubsubDisabled = function errPubsubDisabled() {\n  return errCode(new Error('pubsub experiment is not enabled'), 'ERR_PUBSUB_DISABLED');\n};\n\nmodule.exports = function pubsub(self) {\n  return {\n    subscribe: function subscribe(topic, handler, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback ? setImmediate(function () {\n          return callback(errPubsubDisabled());\n        }) : Promise.reject(errPubsubDisabled());\n      }\n\n      if (!callback) {\n        return new Promise(function (resolve, reject) {\n          self.libp2p.pubsub.subscribe(topic, options, handler, function (err) {\n            if (err) {\n              return reject(err);\n            }\n\n            resolve();\n          });\n        });\n      }\n\n      self.libp2p.pubsub.subscribe(topic, options, handler, callback);\n    },\n    unsubscribe: function unsubscribe(topic, handler, callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback ? setImmediate(function () {\n          return callback(errPubsubDisabled());\n        }) : Promise.reject(errPubsubDisabled());\n      }\n\n      self.libp2p.pubsub.unsubscribe(topic, handler);\n\n      if (!callback) {\n        return Promise.resolve();\n      }\n\n      setImmediate(function () {\n        return callback();\n      });\n    },\n    publish: promisify(function (topic, data, callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(function () {\n          return callback(errPubsubDisabled());\n        });\n      }\n\n      self.libp2p.pubsub.publish(topic, data, callback);\n    }),\n    ls: promisify(function (callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(function () {\n          return callback(errPubsubDisabled());\n        });\n      }\n\n      self.libp2p.pubsub.ls(callback);\n    }),\n    peers: promisify(function (topic, callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(function () {\n          return callback(errPubsubDisabled());\n        });\n      }\n\n      self.libp2p.pubsub.peers(topic, callback);\n    }),\n    setMaxListeners: function setMaxListeners(n) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        throw errPubsubDisabled();\n      }\n\n      self.libp2p.pubsub.setMaxListeners(n);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/pubsub.js"],"names":["promisify","require","setImmediate","errCode","errPubsubDisabled","Error","module","exports","pubsub","self","subscribe","topic","handler","options","callback","_options","EXPERIMENTAL","Promise","reject","resolve","libp2p","err","unsubscribe","publish","data","ls","peers","setMaxListeners","n"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst setImmediate = require('async/setImmediate')\nconst errCode = require('err-code')\n\nconst errPubsubDisabled = () => {\n  return errCode(new Error('pubsub experiment is not enabled'), 'ERR_PUBSUB_DISABLED')\n}\n\nmodule.exports = function pubsub (self) {\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback\n          ? setImmediate(() => callback(errPubsubDisabled()))\n          : Promise.reject(errPubsubDisabled())\n      }\n\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          self.libp2p.pubsub.subscribe(topic, options, handler, (err) => {\n            if (err) {\n              return reject(err)\n            }\n            resolve()\n          })\n        })\n      }\n\n      self.libp2p.pubsub.subscribe(topic, options, handler, callback)\n    },\n\n    unsubscribe: (topic, handler, callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback\n          ? setImmediate(() => callback(errPubsubDisabled()))\n          : Promise.reject(errPubsubDisabled())\n      }\n\n      self.libp2p.pubsub.unsubscribe(topic, handler)\n\n      if (!callback) {\n        return Promise.resolve()\n      }\n\n      setImmediate(() => callback())\n    },\n\n    publish: promisify((topic, data, callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(() => callback(errPubsubDisabled()))\n      }\n      self.libp2p.pubsub.publish(topic, data, callback)\n    }),\n\n    ls: promisify((callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(() => callback(errPubsubDisabled()))\n      }\n      self.libp2p.pubsub.ls(callback)\n    }),\n\n    peers: promisify((topic, callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(() => callback(errPubsubDisabled()))\n      }\n      self.libp2p.pubsub.peers(topic, callback)\n    }),\n\n    setMaxListeners (n) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        throw errPubsubDisabled()\n      }\n      self.libp2p.pubsub.setMaxListeners(n)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}