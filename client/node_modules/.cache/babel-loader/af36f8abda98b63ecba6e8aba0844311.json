{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode,\n    DAGLink = _require.DAGLink;\n\nvar all = require('async-iterator-all');\n\nvar dagBuilders = {\n  flat: require('./flat'),\n  balanced: require('./balanced'),\n  trickle: require('./trickle')\n};\n\nfunction buildFile(_x, _x2, _x3) {\n  return _buildFile.apply(this, arguments);\n}\n\nfunction _buildFile() {\n  _buildFile = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, ipld, options) {\n    var count, previous, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buffer, node, unixfs, opts, cid, entry;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            count = -1;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(source);\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 38;\n              break;\n            }\n\n            buffer = _value;\n            count++;\n            options.progress(buffer.length);\n            node = void 0;\n            unixfs = void 0;\n            opts = _objectSpread({}, options);\n\n            if (options.rawLeaves) {\n              node = buffer;\n              opts.codec = 'raw';\n              opts.cidVersion = 1;\n            } else {\n              unixfs = new UnixFS(options.leafType, buffer);\n              node = DAGNode.create(unixfs.marshal(), []);\n            }\n\n            _context.next = 22;\n            return _awaitAsyncGenerator(persist(node, ipld, opts));\n\n          case 22:\n            cid = _context.sent;\n            entry = {\n              cid: cid,\n              unixfs: unixfs,\n              node: node\n            };\n\n            if (!(count === 0)) {\n              _context.next = 29;\n              break;\n            }\n\n            previous = entry;\n            return _context.abrupt(\"continue\", 35);\n\n          case 29:\n            if (!(count === 1)) {\n              _context.next = 33;\n              break;\n            }\n\n            _context.next = 32;\n            return previous;\n\n          case 32:\n            previous = null;\n\n          case 33:\n            _context.next = 35;\n            return entry;\n\n          case 35:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 38:\n            _context.next = 44;\n            break;\n\n          case 40:\n            _context.prev = 40;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 44:\n            _context.prev = 44;\n            _context.prev = 45;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 49;\n              break;\n            }\n\n            _context.next = 49;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 49:\n            _context.prev = 49;\n\n            if (!_didIteratorError) {\n              _context.next = 52;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 52:\n            return _context.finish(49);\n\n          case 53:\n            return _context.finish(44);\n\n          case 54:\n            if (!previous) {\n              _context.next = 58;\n              break;\n            }\n\n            previous.single = true;\n            _context.next = 58;\n            return previous;\n\n          case 58:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 40, 44, 54], [45,, 49, 53]]);\n  }));\n  return _buildFile.apply(this, arguments);\n}\n\nvar reduce = function reduce(file, ipld, options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(leaves) {\n      var leaf, f, links, node, cid;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf)) {\n                _context2.next = 3;\n                break;\n              }\n\n              leaf = leaves[0];\n              return _context2.abrupt(\"return\", {\n                cid: leaf.cid,\n                path: file.path,\n                name: (file.path || '').split('/').pop(),\n                unixfs: leaf.unixfs,\n                node: leaf.node\n              });\n\n            case 3:\n              // create a parent node and add all the leaves\n              f = new UnixFS('file');\n              links = leaves.filter(function (leaf) {\n                if (leaf.cid.codec === 'raw' && leaf.node.length) {\n                  return true;\n                }\n\n                if (!leaf.unixfs.data && leaf.unixfs.fileSize()) {\n                  return true;\n                }\n\n                return Boolean(leaf.unixfs.data.length);\n              }).map(function (leaf) {\n                if (leaf.cid.codec === 'raw') {\n                  // node is a leaf buffer\n                  f.addBlockSize(leaf.node.length);\n                  return new DAGLink(leaf.name, leaf.node.length, leaf.cid);\n                }\n\n                if (!leaf.unixfs.data) {\n                  // node is an intermediate node\n                  f.addBlockSize(leaf.unixfs.fileSize());\n                } else {\n                  // node is a unixfs 'file' leaf node\n                  f.addBlockSize(leaf.unixfs.data.length);\n                }\n\n                return new DAGLink(leaf.name, leaf.node.size, leaf.cid);\n              });\n              node = DAGNode.create(f.marshal(), links);\n              _context2.next = 8;\n              return persist(node, ipld, options);\n\n            case 8:\n              cid = _context2.sent;\n              return _context2.abrupt(\"return\", {\n                cid: cid,\n                path: file.path,\n                unixfs: f,\n                node: node,\n                size: node.size\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar fileBuilder = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file, source, ipld, options) {\n    var dagBuilder, roots;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dagBuilder = dagBuilders[options.strategy];\n\n            if (dagBuilder) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw errCode(new Error(\"Unknown importer build strategy name: \".concat(options.strategy)), 'ERR_BAD_STRATEGY');\n\n          case 3:\n            _context3.next = 5;\n            return all(dagBuilder(buildFile(source, ipld, options), reduce(file, ipld, options), options.builderOptions));\n\n          case 5:\n            roots = _context3.sent;\n\n            if (!(roots.length > 1)) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw errCode(new Error('expected a maximum of 1 roots and got ' + roots.length), 'ETOOMANYROOTS');\n\n          case 8:\n            return _context3.abrupt(\"return\", roots[0]);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fileBuilder(_x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = fileBuilder;","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs-unixfs-importer/src/dag-builder/file/index.js"],"names":["errCode","require","UnixFS","persist","DAGNode","DAGLink","all","dagBuilders","flat","balanced","trickle","buildFile","source","ipld","options","count","buffer","progress","length","node","unixfs","opts","rawLeaves","codec","cidVersion","leafType","create","marshal","cid","entry","previous","single","reduce","file","leaves","reduceSingleLeafToSelf","leaf","path","name","split","pop","f","links","filter","data","fileSize","Boolean","map","addBlockSize","size","fileBuilder","dagBuilder","strategy","Error","builderOptions","roots","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst UnixFS = require('ipfs-unixfs')\nconst persist = require('../../utils/persist')\nconst {\n  DAGNode,\n  DAGLink\n} = require('ipld-dag-pb')\nconst all = require('async-iterator-all')\n\nconst dagBuilders = {\n  flat: require('./flat'),\n  balanced: require('./balanced'),\n  trickle: require('./trickle')\n}\n\nasync function * buildFile (source, ipld, options) {\n  let count = -1\n  let previous\n\n  for await (const buffer of source) {\n    count++\n    options.progress(buffer.length)\n    let node\n    let unixfs\n\n    let opts = {\n      ...options\n    }\n\n    if (options.rawLeaves) {\n      node = buffer\n\n      opts.codec = 'raw'\n      opts.cidVersion = 1\n    } else {\n      unixfs = new UnixFS(options.leafType, buffer)\n      node = DAGNode.create(unixfs.marshal(), [])\n    }\n\n    const cid = await persist(node, ipld, opts)\n\n    const entry = {\n      cid: cid,\n      unixfs,\n      node\n    }\n\n    if (count === 0) {\n      previous = entry\n      continue\n    } else if (count === 1) {\n      yield previous\n      previous = null\n    }\n\n    yield entry\n  }\n\n  if (previous) {\n    previous.single = true\n    yield previous\n  }\n}\n\nconst reduce = (file, ipld, options) => {\n  return async function (leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0]\n\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        name: (file.path || '').split('/').pop(),\n        unixfs: leaf.unixfs,\n        node: leaf.node\n      }\n    }\n\n    // create a parent node and add all the leaves\n    const f = new UnixFS('file')\n\n    const links = leaves\n      .filter(leaf => {\n        if (leaf.cid.codec === 'raw' && leaf.node.length) {\n          return true\n        }\n\n        if (!leaf.unixfs.data && leaf.unixfs.fileSize()) {\n          return true\n        }\n\n        return Boolean(leaf.unixfs.data.length)\n      })\n      .map((leaf) => {\n        if (leaf.cid.codec === 'raw') {\n          // node is a leaf buffer\n          f.addBlockSize(leaf.node.length)\n\n          return new DAGLink(leaf.name, leaf.node.length, leaf.cid)\n        }\n\n        if (!leaf.unixfs.data) {\n          // node is an intermediate node\n          f.addBlockSize(leaf.unixfs.fileSize())\n        } else {\n          // node is a unixfs 'file' leaf node\n          f.addBlockSize(leaf.unixfs.data.length)\n        }\n\n        return new DAGLink(leaf.name, leaf.node.size, leaf.cid)\n      })\n\n    const node = DAGNode.create(f.marshal(), links)\n    const cid = await persist(node, ipld, options)\n\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      node,\n      size: node.size\n    }\n  }\n}\n\nconst fileBuilder = async (file, source, ipld, options) => {\n  const dagBuilder = dagBuilders[options.strategy]\n\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY')\n  }\n\n  const roots = await all(dagBuilder(buildFile(source, ipld, options), reduce(file, ipld, options), options.builderOptions))\n\n  if (roots.length > 1) {\n    throw errCode(new Error('expected a maximum of 1 roots and got ' + roots.length), 'ETOOMANYROOTS')\n  }\n\n  return roots[0]\n}\n\nmodule.exports = fileBuilder\n"]},"metadata":{},"sourceType":"script"}