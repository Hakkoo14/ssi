{"ast":null,"code":"'use strict';\n\nvar map = require('pull-stream/throughs/map');\n\nvar EventEmitter = require('events');\n/**\n * Takes a Switch and returns an Observer that can be used in conjunction with\n * observe-connection.js. The returned Observer comes with `incoming` and\n * `outgoing` properties that can be used in pull streams to emit all metadata\n * for messages that pass through a Connection.\n *\n * @param {Switch} swtch\n * @returns {EventEmitter}\n */\n\n\nmodule.exports = function (swtch) {\n  var observer = Object.assign(new EventEmitter(), {\n    incoming: observe('in'),\n    outgoing: observe('out')\n  });\n  swtch.on('peer-mux-established', function (peerInfo) {\n    observer.emit('peer:connected', peerInfo.id.toB58String());\n  });\n  swtch.on('peer-mux-closed', function (peerInfo) {\n    observer.emit('peer:closed', peerInfo.id.toB58String());\n  });\n  return observer;\n\n  function observe(direction) {\n    return function (transport, protocol, peerInfo) {\n      return map(function (buffer) {\n        willObserve(peerInfo, transport, protocol, direction, buffer.length);\n        return buffer;\n      });\n    };\n  }\n\n  function willObserve(peerInfo, transport, protocol, direction, bufferLength) {\n    peerInfo.then(function (_peerInfo) {\n      if (_peerInfo) {\n        var peerId = _peerInfo.id.toB58String();\n\n        observer.emit('message', peerId, transport, protocol, direction, bufferLength);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/libp2p-switch/src/observer.js"],"names":["map","require","EventEmitter","module","exports","swtch","observer","Object","assign","incoming","observe","outgoing","on","peerInfo","emit","id","toB58String","direction","transport","protocol","buffer","willObserve","length","bufferLength","then","_peerInfo","peerId"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,0BAAD,CAAnB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAW;AAC1B,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAIN,YAAJ,EAAd,EAAkC;AACjDO,IAAAA,QAAQ,EAAEC,OAAO,CAAC,IAAD,CADgC;AAEjDC,IAAAA,QAAQ,EAAED,OAAO,CAAC,KAAD;AAFgC,GAAlC,CAAjB;AAKAL,EAAAA,KAAK,CAACO,EAAN,CAAS,sBAAT,EAAiC,UAACC,QAAD,EAAc;AAC7CP,IAAAA,QAAQ,CAACQ,IAAT,CAAc,gBAAd,EAAgCD,QAAQ,CAACE,EAAT,CAAYC,WAAZ,EAAhC;AACD,GAFD;AAIAX,EAAAA,KAAK,CAACO,EAAN,CAAS,iBAAT,EAA4B,UAACC,QAAD,EAAc;AACxCP,IAAAA,QAAQ,CAACQ,IAAT,CAAc,aAAd,EAA6BD,QAAQ,CAACE,EAAT,CAAYC,WAAZ,EAA7B;AACD,GAFD;AAIA,SAAOV,QAAP;;AAEA,WAASI,OAAT,CAAkBO,SAAlB,EAA6B;AAC3B,WAAO,UAACC,SAAD,EAAYC,QAAZ,EAAsBN,QAAtB,EAAmC;AACxC,aAAOb,GAAG,CAAC,UAACoB,MAAD,EAAY;AACrBC,QAAAA,WAAW,CAACR,QAAD,EAAWK,SAAX,EAAsBC,QAAtB,EAAgCF,SAAhC,EAA2CG,MAAM,CAACE,MAAlD,CAAX;AACA,eAAOF,MAAP;AACD,OAHS,CAAV;AAID,KALD;AAMD;;AAED,WAASC,WAAT,CAAsBR,QAAtB,EAAgCK,SAAhC,EAA2CC,QAA3C,EAAqDF,SAArD,EAAgEM,YAAhE,EAA8E;AAC5EV,IAAAA,QAAQ,CAACW,IAAT,CAAc,UAACC,SAAD,EAAe;AAC3B,UAAIA,SAAJ,EAAe;AACb,YAAMC,MAAM,GAAGD,SAAS,CAACV,EAAV,CAAaC,WAAb,EAAf;;AACAV,QAAAA,QAAQ,CAACQ,IAAT,CAAc,SAAd,EAAyBY,MAAzB,EAAiCR,SAAjC,EAA4CC,QAA5C,EAAsDF,SAAtD,EAAiEM,YAAjE;AACD;AACF,KALD;AAMD;AACF,CAjCD","sourcesContent":["'use strict'\n\nconst map = require('pull-stream/throughs/map')\nconst EventEmitter = require('events')\n\n/**\n * Takes a Switch and returns an Observer that can be used in conjunction with\n * observe-connection.js. The returned Observer comes with `incoming` and\n * `outgoing` properties that can be used in pull streams to emit all metadata\n * for messages that pass through a Connection.\n *\n * @param {Switch} swtch\n * @returns {EventEmitter}\n */\nmodule.exports = (swtch) => {\n  const observer = Object.assign(new EventEmitter(), {\n    incoming: observe('in'),\n    outgoing: observe('out')\n  })\n\n  swtch.on('peer-mux-established', (peerInfo) => {\n    observer.emit('peer:connected', peerInfo.id.toB58String())\n  })\n\n  swtch.on('peer-mux-closed', (peerInfo) => {\n    observer.emit('peer:closed', peerInfo.id.toB58String())\n  })\n\n  return observer\n\n  function observe (direction) {\n    return (transport, protocol, peerInfo) => {\n      return map((buffer) => {\n        willObserve(peerInfo, transport, protocol, direction, buffer.length)\n        return buffer\n      })\n    }\n  }\n\n  function willObserve (peerInfo, transport, protocol, direction, bufferLength) {\n    peerInfo.then((_peerInfo) => {\n      if (_peerInfo) {\n        const peerId = _peerInfo.id.toB58String()\n        observer.emit('message', peerId, transport, protocol, direction, bufferLength)\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}