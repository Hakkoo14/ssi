{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar Multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar _require = require('superstruct'),\n    struct = _require.struct,\n    superstruct = _require.superstruct;\n\nvar optional = struct.optional,\n    union = struct.union;\nvar s = superstruct({\n  types: {\n    multiaddr: function multiaddr(v) {\n      if (v === null) {\n        return \"multiaddr invalid, value must be a string, Buffer, or another Multiaddr got \".concat(v);\n      }\n\n      try {\n        Multiaddr(v);\n      } catch (err) {\n        return \"multiaddr invalid, \".concat(err.message);\n      }\n\n      return true;\n    },\n    'multiaddr-ipfs': function multiaddrIpfs(v) {\n      return mafmt.IPFS.matches(v) ? true : \"multiaddr IPFS invalid\";\n    }\n  }\n});\nvar configSchema = s({\n  repo: optional(s('object|string')),\n  repoOwner: 'boolean?',\n  preload: s({\n    enabled: 'boolean?',\n    addresses: optional(s(['multiaddr'])),\n    interval: 'number?'\n  }, {\n    enabled: true,\n    interval: 30 * 1000\n  }),\n  init: optional(union(['boolean', s({\n    bits: 'number?',\n    emptyRepo: 'boolean?',\n    privateKey: optional(s('object|string')),\n    // object should be a custom type for PeerId using 'kind-of'\n    pass: 'string?'\n  })])),\n  start: 'boolean?',\n  offline: 'boolean?',\n  pass: 'string?',\n  silent: 'boolean?',\n  relay: 'object?',\n  // relay validates in libp2p\n  EXPERIMENTAL: optional(s({\n    pubsub: 'boolean?',\n    ipnsPubsub: 'boolean?',\n    sharding: 'boolean?',\n    dht: 'boolean?'\n  })),\n  connectionManager: 'object?',\n  config: optional(s({\n    API: 'object?',\n    Addresses: optional(s({\n      Swarm: optional(s(['multiaddr'])),\n      API: 'multiaddr?',\n      Gateway: 'multiaddr'\n    })),\n    Discovery: optional(s({\n      MDNS: optional(s({\n        Enabled: 'boolean?',\n        Interval: 'number?'\n      })),\n      webRTCStar: optional(s({\n        Enabled: 'boolean?'\n      }))\n    })),\n    Bootstrap: optional(s(['multiaddr-ipfs']))\n  })),\n  ipld: 'object?',\n  libp2p: optional(union(['function', 'object'])) // libp2p validates this\n\n}, {\n  repoOwner: true\n});\n\nvar validate = function validate(opts) {\n  var _configSchema$validat = configSchema.validate(opts),\n      _configSchema$validat2 = _slicedToArray(_configSchema$validat, 2),\n      err = _configSchema$validat2[0],\n      options = _configSchema$validat2[1];\n\n  if (err) {\n    throw err;\n  }\n\n  return options;\n};\n\nmodule.exports = {\n  validate: validate\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/config.js"],"names":["Multiaddr","require","mafmt","struct","superstruct","optional","union","s","types","multiaddr","v","err","message","IPFS","matches","configSchema","repo","repoOwner","preload","enabled","addresses","interval","init","bits","emptyRepo","privateKey","pass","start","offline","silent","relay","EXPERIMENTAL","pubsub","ipnsPubsub","sharding","dht","connectionManager","config","API","Addresses","Swarm","Gateway","Discovery","MDNS","Enabled","Interval","webRTCStar","Bootstrap","ipld","libp2p","validate","opts","options","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { struct, superstruct } = require('superstruct')\n\nconst { optional, union } = struct\nconst s = superstruct({\n  types: {\n    multiaddr: v => {\n      if (v === null) {\n        return `multiaddr invalid, value must be a string, Buffer, or another Multiaddr got ${v}`\n      }\n\n      try {\n        Multiaddr(v)\n      } catch (err) {\n        return `multiaddr invalid, ${err.message}`\n      }\n\n      return true\n    },\n    'multiaddr-ipfs': v => mafmt.IPFS.matches(v) ? true : `multiaddr IPFS invalid`\n  }\n})\n\nconst configSchema = s({\n  repo: optional(s('object|string')),\n  repoOwner: 'boolean?',\n  preload: s({\n    enabled: 'boolean?',\n    addresses: optional(s(['multiaddr'])),\n    interval: 'number?'\n  }, { enabled: true, interval: 30 * 1000 }),\n  init: optional(union(['boolean', s({\n    bits: 'number?',\n    emptyRepo: 'boolean?',\n    privateKey: optional(s('object|string')), // object should be a custom type for PeerId using 'kind-of'\n    pass: 'string?'\n  })])),\n  start: 'boolean?',\n  offline: 'boolean?',\n  pass: 'string?',\n  silent: 'boolean?',\n  relay: 'object?', // relay validates in libp2p\n  EXPERIMENTAL: optional(s({\n    pubsub: 'boolean?',\n    ipnsPubsub: 'boolean?',\n    sharding: 'boolean?',\n    dht: 'boolean?'\n  })),\n  connectionManager: 'object?',\n  config: optional(s({\n    API: 'object?',\n    Addresses: optional(s({\n      Swarm: optional(s(['multiaddr'])),\n      API: 'multiaddr?',\n      Gateway: 'multiaddr'\n    })),\n    Discovery: optional(s({\n      MDNS: optional(s({\n        Enabled: 'boolean?',\n        Interval: 'number?'\n      })),\n      webRTCStar: optional(s({\n        Enabled: 'boolean?'\n      }))\n    })),\n    Bootstrap: optional(s(['multiaddr-ipfs']))\n  })),\n  ipld: 'object?',\n  libp2p: optional(union(['function', 'object'])) // libp2p validates this\n}, {\n  repoOwner: true\n})\n\nconst validate = (opts) => {\n  const [err, options] = configSchema.validate(opts)\n\n  if (err) {\n    throw err\n  }\n\n  return options\n}\n\nmodule.exports = { validate }\n"]},"metadata":{},"sourceType":"script"}