{"ast":null,"code":"'use strict';\n\nvar debug = require('debug');\n\nvar setImmediate = require('async/setImmediate');\n\nvar log = debug('repo:lock');\nvar lockFile = 'repo.lock';\nvar LOCKS = {};\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @param {function(Error, lock)} callback\n * @returns {void}\n */\n\nexports.lock = function (dir, callback) {\n  var file = dir + '/' + lockFile;\n  log('locking %s', file);\n  LOCKS[file] = true;\n  var closer = {\n    close: function close(cb) {\n      if (LOCKS[file]) {\n        delete LOCKS[file];\n      }\n\n      setImmediate(cb);\n    }\n  };\n  setImmediate(function () {\n    callback(null, closer);\n  });\n};\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @param {function(Error, bool)} callback\n * @returns {void}\n */\n\n\nexports.locked = function (dir, callback) {\n  var file = dir + '/' + lockFile;\n  log('checking lock: %s');\n  var locked = LOCKS[file];\n  setImmediate(function () {\n    callback(null, locked);\n  });\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs-repo/src/lock-memory.js"],"names":["debug","require","setImmediate","log","lockFile","LOCKS","exports","lock","dir","callback","file","closer","close","cb","locked"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA5B;;AAEA,IAAME,GAAG,GAAGH,KAAK,CAAC,WAAD,CAAjB;AAEA,IAAMI,QAAQ,GAAG,WAAjB;AAEA,IAAMC,KAAK,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,OAAO,CAACC,IAAR,GAAe,UAACC,GAAD,EAAMC,QAAN,EAAmB;AAChC,MAAMC,IAAI,GAAGF,GAAG,GAAG,GAAN,GAAYJ,QAAzB;AACAD,EAAAA,GAAG,CAAC,YAAD,EAAeO,IAAf,CAAH;AACAL,EAAAA,KAAK,CAACK,IAAD,CAAL,GAAc,IAAd;AACA,MAAMC,MAAM,GAAG;AACbC,IAAAA,KADa,iBACNC,EADM,EACF;AACT,UAAIR,KAAK,CAACK,IAAD,CAAT,EAAiB;AACf,eAAOL,KAAK,CAACK,IAAD,CAAZ;AACD;;AACDR,MAAAA,YAAY,CAACW,EAAD,CAAZ;AACD;AANY,GAAf;AAQAX,EAAAA,YAAY,CAAC,YAAM;AACjBO,IAAAA,QAAQ,CAAC,IAAD,EAAOE,MAAP,CAAR;AACD,GAFW,CAAZ;AAGD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACQ,MAAR,GAAiB,UAACN,GAAD,EAAMC,QAAN,EAAmB;AAClC,MAAMC,IAAI,GAAGF,GAAG,GAAG,GAAN,GAAYJ,QAAzB;AACAD,EAAAA,GAAG,CAAC,mBAAD,CAAH;AAEA,MAAMW,MAAM,GAAGT,KAAK,CAACK,IAAD,CAApB;AACAR,EAAAA,YAAY,CAAC,YAAM;AACjBO,IAAAA,QAAQ,CAAC,IAAD,EAAOK,MAAP,CAAR;AACD,GAFW,CAAZ;AAGD,CARD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst setImmediate = require('async/setImmediate')\n\nconst log = debug('repo:lock')\n\nconst lockFile = 'repo.lock'\n\nconst LOCKS = {}\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @param {function(Error, lock)} callback\n * @returns {void}\n */\nexports.lock = (dir, callback) => {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n  LOCKS[file] = true\n  const closer = {\n    close (cb) {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n      setImmediate(cb)\n    }\n  }\n  setImmediate(() => {\n    callback(null, closer)\n  })\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @param {function(Error, bool)} callback\n * @returns {void}\n */\nexports.locked = (dir, callback) => {\n  const file = dir + '/' + lockFile\n  log('checking lock: %s')\n\n  const locked = LOCKS[file]\n  setImmediate(() => {\n    callback(null, locked)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}