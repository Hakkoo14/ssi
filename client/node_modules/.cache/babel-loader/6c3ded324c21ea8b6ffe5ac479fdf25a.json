{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:websocket-star:multi');\n\nvar once = require('once');\n\nvar EE = require('events').EventEmitter;\n\nvar map = require('async/map');\n\nvar parallel = require('async/parallel');\n\nvar multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar WSStar = require('libp2p-websocket-star');\n\nvar WebsocketStarMulti = /*#__PURE__*/function () {\n  // listen on multiple websocket star servers without having to worry about one being down.\n  // NOTE: if no servers are reachable or provided an error is thrown\n  function WebsocketStarMulti(opt) {\n    _classCallCheck(this, WebsocketStarMulti);\n\n    this.opt = opt || {};\n    this.servers = opt.servers || [];\n    this.ws = new WSStar(this.opt);\n    this.discovery = this.ws.discovery;\n  }\n\n  _createClass(WebsocketStarMulti, [{\n    key: \"dial\",\n    value: function dial(ma, opt, cb) {\n      log('dial', ma);\n      return this.ws.dial(ma, opt, cb);\n    }\n  }, {\n    key: \"createListener\",\n    value: function createListener(options, handler) {\n      var _this = this;\n\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n\n      var listener = new EE();\n      listener.servers = {};\n      listener.online = [];\n      this.servers.forEach(function (ser) {\n        var s = _this.ws.createListener(options, handler);\n\n        s.once('error', function () {});\n        s.url = ser;\n        listener.servers[ser] = s;\n      });\n\n      listener.listen = function (ma, cb) {\n        var id = ma.toString().split('ipfs/').pop();\n        log('listen on %s server(s) with id %s', _this.servers.length, id);\n        parallel(_this.servers.map(function (url) {\n          return listener.servers[url];\n        }).map(function (server) {\n          return function (cb) {\n            log('listen %s', server.url);\n            var next = once(function (err) {\n              log('listen %s ok %s', server.url, !err);\n              if (err) return cb(log(err));\n              listener.online.push(server);\n              return cb();\n            });\n            setTimeout(next, _this.opt.timeout || 5000, new Error('Timeout'));\n            server.listen(multiaddr(server.url).encapsulate('/ipfs/' + id), next);\n          };\n        }), function () {\n          if (!listener.online.length && !_this.opt.ignore_no_online) {\n            var e = new Error(\"Couldn't listen on any of the servers\");\n            listener.emit('error', e);\n            cb(e);\n          } else {\n            listener.emit('listening');\n            cb();\n          }\n        });\n      };\n\n      listener.close = function (cb) {\n        return parallel(listener.online.map(function (s) {\n          return function (cb) {\n            return s.close(cb);\n          };\n        }), function (err) {\n          return cb(err, listener.online = []);\n        });\n      };\n\n      listener.getAddrs = function (cb) {\n        return map(listener.online, function (s, n) {\n          return s.getAddrs(n);\n        }, function (err, res) {\n          if (err) return cb(err);\n          return cb(null, res.reduce(function (a, b) {\n            return a.concat(b);\n          }, []));\n        });\n      };\n\n      return listener;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(ma) {\n      if (!Array.isArray(ma)) ma = [ma];\n      return ma.filter(function (ma) {\n        return ma.toString().startsWith('/p2p-websocket-star') || mafmt.WebSocketStar.matches(ma);\n      });\n    }\n  }]);\n\n  return WebsocketStarMulti;\n}();\n\nmodule.exports = WebsocketStarMulti;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p-websocket-star-multi/src/index.js"],"names":["debug","require","log","once","EE","EventEmitter","map","parallel","multiaddr","mafmt","WSStar","WebsocketStarMulti","opt","servers","ws","discovery","ma","cb","dial","options","handler","listener","online","forEach","ser","s","createListener","url","listen","id","toString","split","pop","length","server","next","err","push","setTimeout","timeout","Error","encapsulate","ignore_no_online","e","emit","close","getAddrs","n","res","reduce","a","b","concat","Array","isArray","filter","startsWith","WebSocketStar","matches","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGF,KAAK,CAAC,6BAAD,CAAjB;;AACA,IAAMG,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMG,EAAE,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBI,YAA7B;;AACA,IAAMC,GAAG,GAAGL,OAAO,CAAC,WAAD,CAAnB;;AACA,IAAMM,QAAQ,GAAGN,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAMO,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMQ,KAAK,GAAGR,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMS,MAAM,GAAGT,OAAO,CAAC,uBAAD,CAAtB;;IACMU,kB;AAAqB;AACzB;AACA,8BAAaC,GAAb,EAAkB;AAAA;;AAChB,SAAKA,GAAL,GAAWA,GAAG,IAAI,EAAlB;AACA,SAAKC,OAAL,GAAeD,GAAG,CAACC,OAAJ,IAAe,EAA9B;AACA,SAAKC,EAAL,GAAU,IAAIJ,MAAJ,CAAW,KAAKE,GAAhB,CAAV;AACA,SAAKG,SAAL,GAAiB,KAAKD,EAAL,CAAQC,SAAzB;AACD;;;;WACD,cAAMC,EAAN,EAAUJ,GAAV,EAAeK,EAAf,EAAmB;AACjBf,MAAAA,GAAG,CAAC,MAAD,EAASc,EAAT,CAAH;AACA,aAAO,KAAKF,EAAL,CAAQI,IAAR,CAAaF,EAAb,EAAiBJ,GAAjB,EAAsBK,EAAtB,CAAP;AACD;;;WACD,wBAAgBE,OAAhB,EAAyBC,OAAzB,EAAkC;AAAA;;AAChC,UAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,QAAAA,OAAO,GAAGD,OAAV;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAED,UAAME,QAAQ,GAAG,IAAIjB,EAAJ,EAAjB;AACAiB,MAAAA,QAAQ,CAACR,OAAT,GAAmB,EAAnB;AACAQ,MAAAA,QAAQ,CAACC,MAAT,GAAkB,EAAlB;AACA,WAAKT,OAAL,CAAaU,OAAb,CAAqB,UAAAC,GAAG,EAAI;AAC1B,YAAMC,CAAC,GAAG,KAAI,CAACX,EAAL,CAAQY,cAAR,CAAuBP,OAAvB,EAAgCC,OAAhC,CAAV;;AACAK,QAAAA,CAAC,CAACtB,IAAF,CAAO,OAAP,EAAgB,YAAM,CAAE,CAAxB;AACAsB,QAAAA,CAAC,CAACE,GAAF,GAAQH,GAAR;AACAH,QAAAA,QAAQ,CAACR,OAAT,CAAiBW,GAAjB,IAAwBC,CAAxB;AACD,OALD;;AAOAJ,MAAAA,QAAQ,CAACO,MAAT,GAAkB,UAACZ,EAAD,EAAKC,EAAL,EAAY;AAC5B,YAAMY,EAAE,GAAGb,EAAE,CAACc,QAAH,GAAcC,KAAd,CAAoB,OAApB,EAA6BC,GAA7B,EAAX;AACA9B,QAAAA,GAAG,CAAC,mCAAD,EAAsC,KAAI,CAACW,OAAL,CAAaoB,MAAnD,EAA2DJ,EAA3D,CAAH;AACAtB,QAAAA,QAAQ,CAAC,KAAI,CAACM,OAAL,CAAaP,GAAb,CAAiB,UAAAqB,GAAG;AAAA,iBAAIN,QAAQ,CAACR,OAAT,CAAiBc,GAAjB,CAAJ;AAAA,SAApB,EAA+CrB,GAA/C,CAAmD,UAAA4B,MAAM;AAAA,iBAChE,UAAAjB,EAAE,EAAI;AACJf,YAAAA,GAAG,CAAC,WAAD,EAAcgC,MAAM,CAACP,GAArB,CAAH;AACA,gBAAMQ,IAAI,GAAGhC,IAAI,CAAC,UAAAiC,GAAG,EAAI;AACvBlC,cAAAA,GAAG,CAAC,iBAAD,EAAoBgC,MAAM,CAACP,GAA3B,EAAgC,CAACS,GAAjC,CAAH;AACA,kBAAIA,GAAJ,EAAS,OAAOnB,EAAE,CAACf,GAAG,CAACkC,GAAD,CAAJ,CAAT;AACTf,cAAAA,QAAQ,CAACC,MAAT,CAAgBe,IAAhB,CAAqBH,MAArB;AACA,qBAAOjB,EAAE,EAAT;AACD,aALgB,CAAjB;AAMAqB,YAAAA,UAAU,CAACH,IAAD,EAAO,KAAI,CAACvB,GAAL,CAAS2B,OAAT,IAAoB,IAA3B,EAAiC,IAAIC,KAAJ,CAAU,SAAV,CAAjC,CAAV;AACAN,YAAAA,MAAM,CAACN,MAAP,CAAcpB,SAAS,CAAC0B,MAAM,CAACP,GAAR,CAAT,CAAsBc,WAAtB,CAAkC,WAAWZ,EAA7C,CAAd,EAAgEM,IAAhE;AACD,WAX+D;AAAA,SAAzD,CAAD,EAWF,YAAM;AACV,cAAI,CAACd,QAAQ,CAACC,MAAT,CAAgBW,MAAjB,IAA2B,CAAC,KAAI,CAACrB,GAAL,CAAS8B,gBAAzC,EAA2D;AACzD,gBAAMC,CAAC,GAAG,IAAIH,KAAJ,CAAU,uCAAV,CAAV;AACAnB,YAAAA,QAAQ,CAACuB,IAAT,CAAc,OAAd,EAAuBD,CAAvB;AACA1B,YAAAA,EAAE,CAAC0B,CAAD,CAAF;AACD,WAJD,MAIO;AACLtB,YAAAA,QAAQ,CAACuB,IAAT,CAAc,WAAd;AACA3B,YAAAA,EAAE;AACH;AACF,SApBO,CAAR;AAqBD,OAxBD;;AA0BAI,MAAAA,QAAQ,CAACwB,KAAT,GAAiB,UAAA5B,EAAE;AAAA,eACjBV,QAAQ,CAACc,QAAQ,CAACC,MAAT,CAAgBhB,GAAhB,CAAoB,UAAAmB,CAAC;AAAA,iBAAI,UAAAR,EAAE;AAAA,mBAAIQ,CAAC,CAACoB,KAAF,CAAQ5B,EAAR,CAAJ;AAAA,WAAN;AAAA,SAArB,CAAD,EAA8C,UAAAmB,GAAG;AAAA,iBAAInB,EAAE,CAACmB,GAAD,EAAOf,QAAQ,CAACC,MAAT,GAAkB,EAAzB,CAAN;AAAA,SAAjD,CADS;AAAA,OAAnB;;AAGAD,MAAAA,QAAQ,CAACyB,QAAT,GAAoB,UAAA7B,EAAE;AAAA,eAAIX,GAAG,CAACe,QAAQ,CAACC,MAAV,EAAkB,UAACG,CAAD,EAAIsB,CAAJ;AAAA,iBAAUtB,CAAC,CAACqB,QAAF,CAAWC,CAAX,CAAV;AAAA,SAAlB,EAA2C,UAACX,GAAD,EAAMY,GAAN,EAAc;AACpF,cAAIZ,GAAJ,EAAS,OAAOnB,EAAE,CAACmB,GAAD,CAAT;AACT,iBAAOnB,EAAE,CAAC,IAAD,EAAO+B,GAAG,CAACC,MAAJ,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,CAACE,MAAF,CAASD,CAAT,CAAV;AAAA,WAAX,EAAkC,EAAlC,CAAP,CAAT;AACD,SAH4B,CAAP;AAAA,OAAtB;;AAKA,aAAO9B,QAAP;AACD;;;WAED,gBAAQL,EAAR,EAAY;AACV,UAAI,CAACqC,KAAK,CAACC,OAAN,CAActC,EAAd,CAAL,EAAwBA,EAAE,GAAG,CAACA,EAAD,CAAL;AACxB,aAAOA,EAAE,CAACuC,MAAH,CAAU,UAAAvC,EAAE;AAAA,eAAIA,EAAE,CAACc,QAAH,GAAc0B,UAAd,CAAyB,qBAAzB,KAAmD/C,KAAK,CAACgD,aAAN,CAAoBC,OAApB,CAA4B1C,EAA5B,CAAvD;AAAA,OAAZ,CAAP;AACD;;;;;;AAGH2C,MAAM,CAACC,OAAP,GAAiBjD,kBAAjB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:websocket-star:multi')\nconst once = require('once')\n\nconst EE = require('events').EventEmitter\nconst map = require('async/map')\nconst parallel = require('async/parallel')\nconst multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\n\nconst WSStar = require('libp2p-websocket-star')\nclass WebsocketStarMulti { // listen on multiple websocket star servers without having to worry about one being down.\n  // NOTE: if no servers are reachable or provided an error is thrown\n  constructor (opt) {\n    this.opt = opt || {}\n    this.servers = opt.servers || []\n    this.ws = new WSStar(this.opt)\n    this.discovery = this.ws.discovery\n  }\n  dial (ma, opt, cb) {\n    log('dial', ma)\n    return this.ws.dial(ma, opt, cb)\n  }\n  createListener (options, handler) {\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    const listener = new EE()\n    listener.servers = {}\n    listener.online = []\n    this.servers.forEach(ser => {\n      const s = this.ws.createListener(options, handler)\n      s.once('error', () => {})\n      s.url = ser\n      listener.servers[ser] = s\n    })\n\n    listener.listen = (ma, cb) => {\n      const id = ma.toString().split('ipfs/').pop()\n      log('listen on %s server(s) with id %s', this.servers.length, id)\n      parallel(this.servers.map(url => listener.servers[url]).map(server =>\n        cb => {\n          log('listen %s', server.url)\n          const next = once(err => {\n            log('listen %s ok %s', server.url, !err)\n            if (err) return cb(log(err))\n            listener.online.push(server)\n            return cb()\n          })\n          setTimeout(next, this.opt.timeout || 5000, new Error('Timeout'))\n          server.listen(multiaddr(server.url).encapsulate('/ipfs/' + id), next)\n        }), () => {\n        if (!listener.online.length && !this.opt.ignore_no_online) {\n          const e = new Error(\"Couldn't listen on any of the servers\")\n          listener.emit('error', e)\n          cb(e)\n        } else {\n          listener.emit('listening')\n          cb()\n        }\n      })\n    }\n\n    listener.close = cb =>\n      parallel(listener.online.map(s => cb => s.close(cb)), err => cb(err, (listener.online = [])))\n\n    listener.getAddrs = cb => map(listener.online, (s, n) => s.getAddrs(n), (err, res) => {\n      if (err) return cb(err)\n      return cb(null, res.reduce((a, b) => a.concat(b), []))\n    })\n\n    return listener\n  }\n\n  filter (ma) {\n    if (!Array.isArray(ma)) ma = [ma]\n    return ma.filter(ma => ma.toString().startsWith('/p2p-websocket-star') || mafmt.WebSocketStar.matches(ma))\n  }\n}\n\nmodule.exports = WebsocketStarMulti\n"]},"metadata":{},"sourceType":"script"}