{"ast":null,"code":"'use strict';\n\nvar series = require('async/series');\n\nvar propose = require('./propose');\n\nvar exchange = require('./exchange');\n\nvar finish = require('./finish'); // Performs initial communication over insecure channel to share keys, IDs,\n// and initiate communication, assigning all necessary params.\n\n\nmodule.exports = function handshake(state, callback) {\n  series([function (cb) {\n    return propose(state, cb);\n  }, function (cb) {\n    return exchange(state, cb);\n  }, function (cb) {\n    return finish(state, cb);\n  }], function (err) {\n    state.cleanSecrets();\n\n    if (err) {\n      if (err === true) {\n        err = new Error('Stream ended prematurely');\n      }\n\n      state.shake.abort(err);\n    } // signal when the handshake is finished so that plumbing can happen\n\n\n    callback(err);\n  });\n  return state.stream;\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p-secio/src/handshake/index.js"],"names":["series","require","propose","exchange","finish","module","exports","handshake","state","callback","cb","err","cleanSecrets","Error","shake","abort","stream"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAtB;;AAEA,IAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB,C,CAEA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AACpDT,EAAAA,MAAM,CAAC,CACL,UAACU,EAAD;AAAA,WAAQR,OAAO,CAACM,KAAD,EAAQE,EAAR,CAAf;AAAA,GADK,EAEL,UAACA,EAAD;AAAA,WAAQP,QAAQ,CAACK,KAAD,EAAQE,EAAR,CAAhB;AAAA,GAFK,EAGL,UAACA,EAAD;AAAA,WAAQN,MAAM,CAACI,KAAD,EAAQE,EAAR,CAAd;AAAA,GAHK,CAAD,EAIH,UAACC,GAAD,EAAS;AACVH,IAAAA,KAAK,CAACI,YAAN;;AAEA,QAAID,GAAJ,EAAS;AACP,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChBA,QAAAA,GAAG,GAAG,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACDL,MAAAA,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkBJ,GAAlB;AACD,KARS,CAUV;;;AACAF,IAAAA,QAAQ,CAACE,GAAD,CAAR;AACD,GAhBK,CAAN;AAkBA,SAAOH,KAAK,CAACQ,MAAb;AACD,CApBD","sourcesContent":["'use strict'\n\nconst series = require('async/series')\n\nconst propose = require('./propose')\nconst exchange = require('./exchange')\nconst finish = require('./finish')\n\n// Performs initial communication over insecure channel to share keys, IDs,\n// and initiate communication, assigning all necessary params.\nmodule.exports = function handshake (state, callback) {\n  series([\n    (cb) => propose(state, cb),\n    (cb) => exchange(state, cb),\n    (cb) => finish(state, cb)\n  ], (err) => {\n    state.cleanSecrets()\n\n    if (err) {\n      if (err === true) {\n        err = new Error('Stream ended prematurely')\n      }\n      state.shake.abort(err)\n    }\n\n    // signal when the handshake is finished so that plumbing can happen\n    callback(err)\n  })\n\n  return state.stream\n}\n"]},"metadata":{},"sourceType":"script"}