{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar protons = require('protons');\n\nvar Block = require('ipfs-block');\n\nvar isEqualWith = require('lodash.isequalwith');\n\nvar assert = require('assert');\n\nvar each = require('async/each');\n\nvar nextTick = require('async/nextTick');\n\nvar CID = require('cids');\n\nvar codecName = require('multicodec/src/name-table');\n\nvar vd = require('varint-decoder');\n\nvar multihashing = require('multihashing-async');\n\nvar pbm = protons(require('./message.proto'));\n\nvar Entry = require('./entry');\n\nvar BitswapMessage = /*#__PURE__*/function () {\n  function BitswapMessage(full) {\n    _classCallCheck(this, BitswapMessage);\n\n    this.full = full;\n    this.wantlist = new Map();\n    this.blocks = new Map();\n  }\n\n  _createClass(BitswapMessage, [{\n    key: \"empty\",\n    get: function get() {\n      return this.blocks.size === 0 && this.wantlist.size === 0;\n    }\n  }, {\n    key: \"addEntry\",\n    value: function addEntry(cid, priority, cancel) {\n      assert(cid && CID.isCID(cid), 'must be a valid cid');\n      var cidStr = cid.buffer.toString();\n      var entry = this.wantlist.get(cidStr);\n\n      if (entry) {\n        entry.priority = priority;\n        entry.cancel = Boolean(cancel);\n      } else {\n        this.wantlist.set(cidStr, new Entry(cid, priority, cancel));\n      }\n    }\n  }, {\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      assert(Block.isBlock(block), 'must be a valid cid');\n      var cidStr = block.cid.buffer.toString();\n      this.blocks.set(cidStr, block);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(cid) {\n      assert(CID.isCID(cid), 'must be a valid cid');\n      var cidStr = cid.buffer.toString();\n      this.wantlist.delete(cidStr);\n      this.addEntry(cid, 0, true);\n    }\n    /*\n     * Serializes to Bitswap Message protobuf of\n     * version 1.0.0\n     */\n\n  }, {\n    key: \"serializeToBitswap100\",\n    value: function serializeToBitswap100() {\n      var msg = {\n        wantlist: {\n          entries: Array.from(this.wantlist.values()).map(function (entry) {\n            return {\n              block: entry.cid.buffer,\n              // cid\n              priority: Number(entry.priority),\n              cancel: Boolean(entry.cancel)\n            };\n          })\n        },\n        blocks: Array.from(this.blocks.values()).map(function (block) {\n          return block.data;\n        })\n      };\n\n      if (this.full) {\n        msg.wantlist.full = true;\n      }\n\n      return pbm.Message.encode(msg);\n    }\n    /*\n     * Serializes to Bitswap Message protobuf of\n     * version 1.1.0\n     */\n\n  }, {\n    key: \"serializeToBitswap110\",\n    value: function serializeToBitswap110() {\n      var msg = {\n        wantlist: {\n          entries: Array.from(this.wantlist.values()).map(function (entry) {\n            return {\n              block: entry.cid.buffer,\n              // cid\n              priority: Number(entry.priority),\n              cancel: Boolean(entry.cancel)\n            };\n          })\n        },\n        payload: []\n      };\n\n      if (this.full) {\n        msg.wantlist.full = true;\n      }\n\n      this.blocks.forEach(function (block) {\n        msg.payload.push({\n          prefix: block.cid.prefix,\n          data: block.data\n        });\n      });\n      return pbm.Message.encode(msg);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      var cmp = function cmp(a, b) {\n        if (a.equals && typeof a.equals === 'function') {\n          return a.equals(b);\n        }\n      };\n\n      if (this.full !== other.full || !isEqualWith(this.wantlist, other.wantlist, cmp) || !isEqualWith(this.blocks, other.blocks, cmp)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      var list = Array.from(this.wantlist.keys());\n      var blocks = Array.from(this.blocks.keys());\n      return \"BitswapMessage <full: \".concat(this.full, \", list: \").concat(list, \", blocks: \").concat(blocks, \">\");\n    }\n  }]);\n\n  return BitswapMessage;\n}();\n\nBitswapMessage.deserialize = function (raw, callback) {\n  var decoded;\n\n  try {\n    decoded = pbm.Message.decode(raw);\n  } catch (err) {\n    return nextTick(function () {\n      return callback(err);\n    });\n  }\n\n  var isFull = decoded.wantlist && decoded.wantlist.full || false;\n  var msg = new BitswapMessage(isFull);\n\n  if (decoded.wantlist) {\n    decoded.wantlist.entries.forEach(function (entry) {\n      // note: entry.block is the CID here\n      var cid;\n\n      try {\n        cid = new CID(entry.block);\n      } catch (err) {\n        return callback(err);\n      }\n\n      msg.addEntry(cid, entry.priority, entry.cancel);\n    });\n  } // Bitswap 1.0.0\n  // decoded.blocks are just the byte arrays\n\n\n  if (decoded.blocks.length > 0) {\n    return each(decoded.blocks, function (b, cb) {\n      multihashing(b, 'sha2-256', function (err, hash) {\n        if (err) {\n          return cb(err);\n        }\n\n        var cid;\n\n        try {\n          cid = new CID(hash);\n        } catch (err) {\n          return callback(err);\n        }\n\n        msg.addBlock(new Block(b, cid));\n        cb();\n      });\n    }, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, msg);\n    });\n  } // Bitswap 1.1.0\n\n\n  if (decoded.payload.length > 0) {\n    return each(decoded.payload, function (p, cb) {\n      if (!p.prefix || !p.data) {\n        return nextTick(cb);\n      }\n\n      var values = vd(p.prefix);\n      var cidVersion = values[0];\n      var multicodec = values[1];\n      var hashAlg = values[2]; // const hashLen = values[3] // We haven't need to use this so far\n\n      multihashing(p.data, hashAlg, function (err, hash) {\n        if (err) {\n          return cb(err);\n        }\n\n        var cid;\n\n        try {\n          cid = new CID(cidVersion, codecName[multicodec.toString('16')], hash);\n        } catch (err) {\n          return cb(err);\n        }\n\n        msg.addBlock(new Block(p.data, cid));\n        cb();\n      });\n    }, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, msg);\n    });\n  }\n\n  callback(null, msg);\n};\n\nBitswapMessage.Entry = Entry;\nmodule.exports = BitswapMessage;","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs-bitswap/src/types/message/index.js"],"names":["protons","require","Block","isEqualWith","assert","each","nextTick","CID","codecName","vd","multihashing","pbm","Entry","BitswapMessage","full","wantlist","Map","blocks","size","cid","priority","cancel","isCID","cidStr","buffer","toString","entry","get","Boolean","set","block","isBlock","delete","addEntry","msg","entries","Array","from","values","map","Number","data","Message","encode","payload","forEach","push","prefix","other","cmp","a","b","equals","Symbol","toStringTag","list","keys","deserialize","raw","callback","decoded","decode","err","isFull","length","cb","hash","addBlock","p","cidVersion","multicodec","hashAlg","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst protons = require('protons')\nconst Block = require('ipfs-block')\nconst isEqualWith = require('lodash.isequalwith')\nconst assert = require('assert')\nconst each = require('async/each')\nconst nextTick = require('async/nextTick')\nconst CID = require('cids')\nconst codecName = require('multicodec/src/name-table')\nconst vd = require('varint-decoder')\nconst multihashing = require('multihashing-async')\n\nconst pbm = protons(require('./message.proto'))\nconst Entry = require('./entry')\n\nclass BitswapMessage {\n  constructor (full) {\n    this.full = full\n    this.wantlist = new Map()\n    this.blocks = new Map()\n  }\n\n  get empty () {\n    return this.blocks.size === 0 &&\n           this.wantlist.size === 0\n  }\n\n  addEntry (cid, priority, cancel) {\n    assert(cid && CID.isCID(cid), 'must be a valid cid')\n    const cidStr = cid.buffer.toString()\n\n    const entry = this.wantlist.get(cidStr)\n\n    if (entry) {\n      entry.priority = priority\n      entry.cancel = Boolean(cancel)\n    } else {\n      this.wantlist.set(cidStr, new Entry(cid, priority, cancel))\n    }\n  }\n\n  addBlock (block) {\n    assert(Block.isBlock(block), 'must be a valid cid')\n    const cidStr = block.cid.buffer.toString()\n    this.blocks.set(cidStr, block)\n  }\n\n  cancel (cid) {\n    assert(CID.isCID(cid), 'must be a valid cid')\n    const cidStr = cid.buffer.toString()\n    this.wantlist.delete(cidStr)\n    this.addEntry(cid, 0, true)\n  }\n\n  /*\n   * Serializes to Bitswap Message protobuf of\n   * version 1.0.0\n   */\n  serializeToBitswap100 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.buffer, // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          }\n        })\n      },\n      blocks: Array.from(this.blocks.values())\n        .map((block) => block.data)\n    }\n\n    if (this.full) {\n      msg.wantlist.full = true\n    }\n\n    return pbm.Message.encode(msg)\n  }\n\n  /*\n   * Serializes to Bitswap Message protobuf of\n   * version 1.1.0\n   */\n  serializeToBitswap110 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.buffer, // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          }\n        })\n      },\n      payload: []\n    }\n\n    if (this.full) {\n      msg.wantlist.full = true\n    }\n\n    this.blocks.forEach((block) => {\n      msg.payload.push({\n        prefix: block.cid.prefix,\n        data: block.data\n      })\n    })\n\n    return pbm.Message.encode(msg)\n  }\n\n  equals (other) {\n    const cmp = (a, b) => {\n      if (a.equals && typeof a.equals === 'function') {\n        return a.equals(b)\n      }\n    }\n\n    if (this.full !== other.full ||\n        !isEqualWith(this.wantlist, other.wantlist, cmp) ||\n        !isEqualWith(this.blocks, other.blocks, cmp)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  get [Symbol.toStringTag] () {\n    const list = Array.from(this.wantlist.keys())\n    const blocks = Array.from(this.blocks.keys())\n    return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`\n  }\n}\n\nBitswapMessage.deserialize = (raw, callback) => {\n  let decoded\n  try {\n    decoded = pbm.Message.decode(raw)\n  } catch (err) {\n    return nextTick(() => callback(err))\n  }\n\n  const isFull = (decoded.wantlist && decoded.wantlist.full) || false\n  const msg = new BitswapMessage(isFull)\n\n  if (decoded.wantlist) {\n    decoded.wantlist.entries.forEach((entry) => {\n      // note: entry.block is the CID here\n      let cid\n      try {\n        cid = new CID(entry.block)\n      } catch (err) {\n        return callback(err)\n      }\n      msg.addEntry(cid, entry.priority, entry.cancel)\n    })\n  }\n\n  // Bitswap 1.0.0\n  // decoded.blocks are just the byte arrays\n  if (decoded.blocks.length > 0) {\n    return each(decoded.blocks, (b, cb) => {\n      multihashing(b, 'sha2-256', (err, hash) => {\n        if (err) {\n          return cb(err)\n        }\n        let cid\n        try {\n          cid = new CID(hash)\n        } catch (err) {\n          return callback(err)\n        }\n        msg.addBlock(new Block(b, cid))\n        cb()\n      })\n    }, (err) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, msg)\n    })\n  }\n\n  // Bitswap 1.1.0\n  if (decoded.payload.length > 0) {\n    return each(decoded.payload, (p, cb) => {\n      if (!p.prefix || !p.data) {\n        return nextTick(cb)\n      }\n      const values = vd(p.prefix)\n      const cidVersion = values[0]\n      const multicodec = values[1]\n      const hashAlg = values[2]\n      // const hashLen = values[3] // We haven't need to use this so far\n      multihashing(p.data, hashAlg, (err, hash) => {\n        if (err) {\n          return cb(err)\n        }\n\n        let cid\n        try {\n          cid = new CID(cidVersion, codecName[multicodec.toString('16')], hash)\n        } catch (err) {\n          return cb(err)\n        }\n\n        msg.addBlock(new Block(p.data, cid))\n        cb()\n      })\n    }, (err) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, msg)\n    })\n  }\n\n  callback(null, msg)\n}\n\nBitswapMessage.Entry = Entry\nmodule.exports = BitswapMessage\n"]},"metadata":{},"sourceType":"script"}