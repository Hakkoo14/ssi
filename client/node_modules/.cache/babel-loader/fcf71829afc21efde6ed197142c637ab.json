{"ast":null,"code":"'use strict';\n\nvar Key = require('interface-datastore').Key;\n\nvar sortKeys = require('sort-keys');\n\nvar specKey = new Key('datastore_spec');\n\nmodule.exports = function (store) {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    exists: function exists(callback) {\n      store.has(specKey, callback);\n    },\n\n    /**\n     * Get the current datastore spec.\n     *\n     * @param {function(Error, number)} callback\n     * @returns {void}\n     */\n    get: function get(callback) {\n      store.get(specKey, function (err, buf) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, JSON.parse(buf.toString()));\n      });\n    },\n\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     *\n     * @param {number} spec\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    set: function set(spec, callback) {\n      store.put(specKey, Buffer.from(JSON.stringify(sortKeys(spec, {\n        deep: true\n      }))), callback);\n    }\n  };\n};","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs-repo/src/spec.js"],"names":["Key","require","sortKeys","specKey","module","exports","store","exists","callback","has","get","err","buf","JSON","parse","toString","set","spec","put","Buffer","from","stringify","deep"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,GAA3C;;AACA,IAAME,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AAEA,IAAME,OAAO,GAAG,IAAIH,GAAJ,CAAQ,gBAAR,CAAhB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAW;AAC1B,SAAO;AACL;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAPK,kBAOGC,QAPH,EAOa;AAChBF,MAAAA,KAAK,CAACG,GAAN,CAAUN,OAAV,EAAmBK,QAAnB;AACD,KATI;;AAUL;AACJ;AACA;AACA;AACA;AACA;AACIE,IAAAA,GAhBK,eAgBAF,QAhBA,EAgBU;AACbF,MAAAA,KAAK,CAACI,GAAN,CAAUP,OAAV,EAAmB,UAACQ,GAAD,EAAMC,GAAN,EAAc;AAC/B,YAAID,GAAJ,EAAS;AACP,iBAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AACDH,QAAAA,QAAQ,CAAC,IAAD,EAAOK,IAAI,CAACC,KAAL,CAAWF,GAAG,CAACG,QAAJ,EAAX,CAAP,CAAR;AACD,OALD;AAMD,KAvBI;;AAwBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,GA/BK,eA+BAC,IA/BA,EA+BMT,QA/BN,EA+BgB;AACnBF,MAAAA,KAAK,CAACY,GAAN,CAAUf,OAAV,EAAmBgB,MAAM,CAACC,IAAP,CAAYP,IAAI,CAACQ,SAAL,CAAenB,QAAQ,CAACe,IAAD,EAAO;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAAP,CAAvB,CAAZ,CAAnB,EAAgFd,QAAhF;AACD;AAjCI,GAAP;AAmCD,CApCD","sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst sortKeys = require('sort-keys')\n\nconst specKey = new Key('datastore_spec')\n\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    exists (callback) {\n      store.has(specKey, callback)\n    },\n    /**\n     * Get the current datastore spec.\n     *\n     * @param {function(Error, number)} callback\n     * @returns {void}\n     */\n    get (callback) {\n      store.get(specKey, (err, buf) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, JSON.parse(buf.toString()))\n      })\n    },\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     *\n     * @param {number} spec\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    set (spec, callback) {\n      store.put(specKey, Buffer.from(JSON.stringify(sortKeys(spec, { deep: true }))), callback)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}