{"ast":null,"code":"'use strict';\n\nvar pull = require('pull-stream/pull');\n\nvar Connection = require('interface-connection').Connection;\n\nvar assert = require('assert');\n\nvar PeerInfo = require('peer-info');\n\nvar debug = require('debug');\n\nvar once = require('once');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error');\n\nvar handshake = require('./handshake');\n\nvar State = require('./state');\n\nmodule.exports = {\n  tag: '/secio/1.0.0',\n  encrypt: function encrypt(localId, conn, remoteId, callback) {\n    assert(localId, 'no local private key provided');\n    assert(conn, 'no connection for the handshake  provided');\n\n    if (typeof remoteId === 'function') {\n      callback = remoteId;\n      remoteId = undefined;\n    }\n\n    callback = once(callback || function (err) {\n      if (err) {\n        log.error(err);\n      }\n    });\n    var timeout = 60 * 1000 * 5;\n    var state = new State(localId, remoteId, timeout, callback);\n\n    function finish(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      conn.getPeerInfo(function (err, peerInfo) {\n        encryptedConnection.setInnerConn(new Connection(state.secure, conn));\n\n        if (err) {\n          // no peerInfo yet, means I'm the receiver\n          encryptedConnection.setPeerInfo(new PeerInfo(state.id.remote));\n        }\n\n        callback();\n      });\n    }\n\n    var encryptedConnection = new Connection(undefined, conn);\n    pull(conn, handshake(state, finish), conn);\n    return encryptedConnection;\n  }\n};","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/libp2p-secio/src/index.js"],"names":["pull","require","Connection","assert","PeerInfo","debug","once","log","error","handshake","State","module","exports","tag","encrypt","localId","conn","remoteId","callback","undefined","err","timeout","state","finish","getPeerInfo","peerInfo","encryptedConnection","setInnerConn","secure","setPeerInfo","id","remote"],"mappings":"AAAA;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,sBAAD,CAAP,CAAgCC,UAAnD;;AACA,IAAMC,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMM,GAAG,GAAGF,KAAK,CAAC,cAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,oBAAD,CAAjB;;AAEA,IAAMI,SAAS,GAAGR,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMS,KAAK,GAAGT,OAAO,CAAC,SAAD,CAArB;;AAEAU,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,EAAE,cADU;AAEfC,EAAAA,OAFe,mBAENC,OAFM,EAEGC,IAFH,EAESC,QAFT,EAEmBC,QAFnB,EAE6B;AAC1Cf,IAAAA,MAAM,CAACY,OAAD,EAAU,+BAAV,CAAN;AACAZ,IAAAA,MAAM,CAACa,IAAD,EAAO,2CAAP,CAAN;;AAEA,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,MAAAA,QAAQ,GAAGD,QAAX;AACAA,MAAAA,QAAQ,GAAGE,SAAX;AACD;;AAEDD,IAAAA,QAAQ,GAAGZ,IAAI,CAACY,QAAQ,IAAI,UAAUE,GAAV,EAAe;AACzC,UAAIA,GAAJ,EAAS;AAAEb,QAAAA,GAAG,CAACC,KAAJ,CAAUY,GAAV;AAAgB;AAC5B,KAFc,CAAf;AAIA,QAAMC,OAAO,GAAG,KAAK,IAAL,GAAY,CAA5B;AAEA,QAAMC,KAAK,GAAG,IAAIZ,KAAJ,CAAUK,OAAV,EAAmBE,QAAnB,EAA6BI,OAA7B,EAAsCH,QAAtC,CAAd;;AAEA,aAASK,MAAT,CAAiBH,GAAjB,EAAsB;AACpB,UAAIA,GAAJ,EAAS;AAAE,eAAOF,QAAQ,CAACE,GAAD,CAAf;AAAsB;;AAEjCJ,MAAAA,IAAI,CAACQ,WAAL,CAAiB,UAACJ,GAAD,EAAMK,QAAN,EAAmB;AAClCC,QAAAA,mBAAmB,CAACC,YAApB,CAAiC,IAAIzB,UAAJ,CAAeoB,KAAK,CAACM,MAArB,EAA6BZ,IAA7B,CAAjC;;AAEA,YAAII,GAAJ,EAAS;AAAE;AACTM,UAAAA,mBAAmB,CAACG,WAApB,CAAgC,IAAIzB,QAAJ,CAAakB,KAAK,CAACQ,EAAN,CAASC,MAAtB,CAAhC;AACD;;AAEDb,QAAAA,QAAQ;AACT,OARD;AASD;;AAED,QAAMQ,mBAAmB,GAAG,IAAIxB,UAAJ,CAAeiB,SAAf,EAA0BH,IAA1B,CAA5B;AAEAhB,IAAAA,IAAI,CACFgB,IADE,EAEFP,SAAS,CAACa,KAAD,EAAQC,MAAR,CAFP,EAGFP,IAHE,CAAJ;AAMA,WAAOU,mBAAP;AACD;AA1Cc,CAAjB","sourcesContent":["'use strict'\n\nconst pull = require('pull-stream/pull')\nconst Connection = require('interface-connection').Connection\nconst assert = require('assert')\nconst PeerInfo = require('peer-info')\nconst debug = require('debug')\nconst once = require('once')\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\nconst handshake = require('./handshake')\nconst State = require('./state')\n\nmodule.exports = {\n  tag: '/secio/1.0.0',\n  encrypt (localId, conn, remoteId, callback) {\n    assert(localId, 'no local private key provided')\n    assert(conn, 'no connection for the handshake  provided')\n\n    if (typeof remoteId === 'function') {\n      callback = remoteId\n      remoteId = undefined\n    }\n\n    callback = once(callback || function (err) {\n      if (err) { log.error(err) }\n    })\n\n    const timeout = 60 * 1000 * 5\n\n    const state = new State(localId, remoteId, timeout, callback)\n\n    function finish (err) {\n      if (err) { return callback(err) }\n\n      conn.getPeerInfo((err, peerInfo) => {\n        encryptedConnection.setInnerConn(new Connection(state.secure, conn))\n\n        if (err) { // no peerInfo yet, means I'm the receiver\n          encryptedConnection.setPeerInfo(new PeerInfo(state.id.remote))\n        }\n\n        callback()\n      })\n    }\n\n    const encryptedConnection = new Connection(undefined, conn)\n\n    pull(\n      conn,\n      handshake(state, finish),\n      conn\n    )\n\n    return encryptedConnection\n  }\n}\n"]},"metadata":{},"sourceType":"script"}