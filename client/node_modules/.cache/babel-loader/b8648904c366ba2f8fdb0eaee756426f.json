{"ast":null,"code":"'use strict';\n\nvar _require = require('datastore-core'),\n    TieredDatastore = _require.TieredDatastore;\n\nvar get = require('dlv');\n\nvar PubsubDatastore = require('./pubsub-datastore');\n\nvar OfflineDatastore = require('./offline-datastore');\n\nmodule.exports = function (ipfs) {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  var ipnsStores = []; // Add IPNS pubsub if enabled\n\n  var pubsubDs;\n\n  if (get(ipfs._options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    var pubsub = ipfs.libp2p.pubsub;\n    var localDatastore = ipfs._repo.datastore;\n    var peerId = ipfs._peerInfo.id;\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId);\n    ipnsStores.push(pubsubDs);\n  } // DHT should not be added as routing if we are offline or it is disabled\n\n\n  if (get(ipfs._options, 'offline') || !get(ipfs._options, 'libp2p.dht.enabled', false)) {\n    var offlineDatastore = new OfflineDatastore(ipfs._repo);\n    ipnsStores.push(offlineDatastore);\n  } else {\n    ipnsStores.push(ipfs.libp2p.dht);\n  } // Create ipns routing with a set of datastores\n\n\n  return new TieredDatastore(ipnsStores);\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/ipns/routing/config.js"],"names":["require","TieredDatastore","get","PubsubDatastore","OfflineDatastore","module","exports","ipfs","ipnsStores","pubsubDs","_options","pubsub","libp2p","localDatastore","_repo","datastore","peerId","_peerInfo","id","push","offlineDatastore","dht"],"mappings":"AAAA;;AAEA,eAA4BA,OAAO,CAAC,gBAAD,CAAnC;AAAA,IAAQC,eAAR,YAAQA,eAAR;;AACA,IAAMC,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AAEA,IAAMG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAMI,gBAAgB,GAAGJ,OAAO,CAAC,qBAAD,CAAhC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB;AACA,MAAMC,UAAU,GAAG,EAAnB,CAFyB,CAIzB;;AACA,MAAIC,QAAJ;;AACA,MAAIP,GAAG,CAACK,IAAI,CAACG,QAAN,EAAgB,yBAAhB,EAA2C,KAA3C,CAAP,EAA0D;AACxD,QAAMC,MAAM,GAAGJ,IAAI,CAACK,MAAL,CAAYD,MAA3B;AACA,QAAME,cAAc,GAAGN,IAAI,CAACO,KAAL,CAAWC,SAAlC;AACA,QAAMC,MAAM,GAAGT,IAAI,CAACU,SAAL,CAAeC,EAA9B;AAEAT,IAAAA,QAAQ,GAAG,IAAIN,eAAJ,CAAoBQ,MAApB,EAA4BE,cAA5B,EAA4CG,MAA5C,CAAX;AACAR,IAAAA,UAAU,CAACW,IAAX,CAAgBV,QAAhB;AACD,GAbwB,CAezB;;;AACA,MAAIP,GAAG,CAACK,IAAI,CAACG,QAAN,EAAgB,SAAhB,CAAH,IAAiC,CAACR,GAAG,CAACK,IAAI,CAACG,QAAN,EAAgB,oBAAhB,EAAsC,KAAtC,CAAzC,EAAuF;AACrF,QAAMU,gBAAgB,GAAG,IAAIhB,gBAAJ,CAAqBG,IAAI,CAACO,KAA1B,CAAzB;AACAN,IAAAA,UAAU,CAACW,IAAX,CAAgBC,gBAAhB;AACD,GAHD,MAGO;AACLZ,IAAAA,UAAU,CAACW,IAAX,CAAgBZ,IAAI,CAACK,MAAL,CAAYS,GAA5B;AACD,GArBwB,CAuBzB;;;AACA,SAAO,IAAIpB,eAAJ,CAAoBO,UAApB,CAAP;AACD,CAzBD","sourcesContent":["'use strict'\n\nconst { TieredDatastore } = require('datastore-core')\nconst get = require('dlv')\n\nconst PubsubDatastore = require('./pubsub-datastore')\nconst OfflineDatastore = require('./offline-datastore')\n\nmodule.exports = (ipfs) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(ipfs._options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = ipfs.libp2p.pubsub\n    const localDatastore = ipfs._repo.datastore\n    const peerId = ipfs._peerInfo.id\n\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // DHT should not be added as routing if we are offline or it is disabled\n  if (get(ipfs._options, 'offline') || !get(ipfs._options, 'libp2p.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(ipfs._repo)\n    ipnsStores.push(offlineDatastore)\n  } else {\n    ipnsStores.push(ipfs.libp2p.dht)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"]},"metadata":{},"sourceType":"script"}