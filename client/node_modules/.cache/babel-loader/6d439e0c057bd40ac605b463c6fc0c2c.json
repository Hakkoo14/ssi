{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Poject-main/Poject-main/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar setImmediate = require('async/setImmediate');\n\nvar series = require('async/series');\n\nvar detect = require('async/detect');\n\nvar waterfall = require('async/waterfall');\n\nrequire('node-forge/lib/pkcs7');\n\nrequire('node-forge/lib/pbe');\n\nvar forge = require('node-forge/lib/forge');\n\nvar util = require('./util');\n\nvar errcode = require('err-code');\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\n\nvar CMS = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {Keychain} keychain - the available keys\n   */\n  function CMS(keychain) {\n    _classCallCheck(this, CMS);\n\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');\n    }\n\n    this.keychain = keychain;\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Buffer contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Buffer} plain - The data to encrypt.\n   * @param {function(Error, Buffer)} callback\n   * @returns {undefined}\n   */\n\n\n  _createClass(CMS, [{\n    key: \"encrypt\",\n    value: function encrypt(name, plain, callback) {\n      var self = this;\n\n      var done = function done(err, result) {\n        return setImmediate(function () {\n          return callback(err, result);\n        });\n      };\n\n      if (!Buffer.isBuffer(plain)) {\n        return done(errcode(new Error('Plain data must be a Buffer'), 'ERR_INVALID_PARAMS'));\n      }\n\n      series([function (cb) {\n        return self.keychain.findKeyByName(name, cb);\n      }, function (cb) {\n        return self.keychain._getPrivateKey(name, cb);\n      }], function (err, results) {\n        if (err) return done(err);\n        var key = results[0];\n        var pem = results[1];\n\n        try {\n          var privateKey = forge.pki.decryptRsaPrivateKey(pem, self.keychain._());\n          util.certificateForKey(key, privateKey, function (err, certificate) {\n            if (err) return callback(err); // create a p7 enveloped message\n\n            var p7 = forge.pkcs7.createEnvelopedData();\n            p7.addRecipient(certificate);\n            p7.content = forge.util.createBuffer(plain);\n            p7.encrypt(); // convert message to DER\n\n            var der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n            done(null, Buffer.from(der, 'binary'));\n          });\n        } catch (err) {\n          done(err);\n        }\n      });\n    }\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     *\n     * @param {Buffer} cmsData - The CMS encrypted data to decrypt.\n     * @param {function(Error, Buffer)} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(cmsData, callback) {\n      var done = function done(err, result) {\n        return setImmediate(function () {\n          return callback(err, result);\n        });\n      };\n\n      if (!Buffer.isBuffer(cmsData)) {\n        return done(errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS'));\n      }\n\n      var self = this;\n      var cms;\n\n      try {\n        var buf = forge.util.createBuffer(cmsData.toString('binary'));\n        var obj = forge.asn1.fromDer(buf);\n        cms = forge.pkcs7.messageFromAsn1(obj);\n      } catch (err) {\n        return done(errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS'));\n      } // Find a recipient whose key we hold. We only deal with recipient certs\n      // issued by ipfs (O=ipfs).\n\n\n      var recipients = cms.recipients.filter(function (r) {\n        return r.issuer.find(function (a) {\n          return a.shortName === 'O' && a.value === 'ipfs';\n        });\n      }).filter(function (r) {\n        return r.issuer.find(function (a) {\n          return a.shortName === 'CN';\n        });\n      }).map(function (r) {\n        return {\n          recipient: r,\n          keyId: r.issuer.find(function (a) {\n            return a.shortName === 'CN';\n          }).value\n        };\n      });\n      detect(recipients, function (r, cb) {\n        return self.keychain.findKeyById(r.keyId, function (err, info) {\n          return cb(null, !err && info);\n        });\n      }, function (err, r) {\n        if (err) return done(err);\n\n        if (!r) {\n          var missingKeys = recipients.map(function (r) {\n            return r.keyId;\n          });\n          err = errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n            missingKeys: missingKeys\n          });\n          return done(err);\n        }\n\n        waterfall([function (cb) {\n          return self.keychain.findKeyById(r.keyId, cb);\n        }, function (key, cb) {\n          return self.keychain._getPrivateKey(key.name, cb);\n        }], function (err, pem) {\n          if (err) return done(err);\n          var privateKey = forge.pki.decryptRsaPrivateKey(pem, self.keychain._());\n          cms.decrypt(r.recipient, privateKey);\n          done(null, Buffer.from(cms.content.getBytes(), 'binary'));\n        });\n      });\n    }\n  }]);\n\n  return CMS;\n}();\n\nmodule.exports = CMS;","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/libp2p-keychain/src/cms.js"],"names":["setImmediate","require","series","detect","waterfall","forge","util","errcode","CMS","keychain","Error","name","plain","callback","self","done","err","result","Buffer","isBuffer","cb","findKeyByName","_getPrivateKey","results","key","pem","privateKey","pki","decryptRsaPrivateKey","_","certificateForKey","certificate","p7","pkcs7","createEnvelopedData","addRecipient","content","createBuffer","encrypt","der","asn1","toDer","toAsn1","getBytes","from","cmsData","cms","buf","toString","obj","fromDer","messageFromAsn1","message","recipients","filter","r","issuer","find","a","shortName","value","map","recipient","keyId","findKeyById","info","missingKeys","join","decrypt","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst setImmediate = require('async/setImmediate')\nconst series = require('async/series')\nconst detect = require('async/detect')\nconst waterfall = require('async/waterfall')\nrequire('node-forge/lib/pkcs7')\nrequire('node-forge/lib/pbe')\nconst forge = require('node-forge/lib/forge')\nconst util = require('./util')\nconst errcode = require('err-code')\n\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {Keychain} keychain - the available keys\n   */\n  constructor (keychain) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED')\n    }\n\n    this.keychain = keychain\n  }\n\n  /**\n   * Creates some protected data.\n   *\n   * The output Buffer contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Buffer} plain - The data to encrypt.\n   * @param {function(Error, Buffer)} callback\n   * @returns {undefined}\n   */\n  encrypt (name, plain, callback) {\n    const self = this\n    const done = (err, result) => setImmediate(() => callback(err, result))\n\n    if (!Buffer.isBuffer(plain)) {\n      return done(errcode(new Error('Plain data must be a Buffer'), 'ERR_INVALID_PARAMS'))\n    }\n\n    series([\n      (cb) => self.keychain.findKeyByName(name, cb),\n      (cb) => self.keychain._getPrivateKey(name, cb)\n    ], (err, results) => {\n      if (err) return done(err)\n\n      let key = results[0]\n      let pem = results[1]\n      try {\n        const privateKey = forge.pki.decryptRsaPrivateKey(pem, self.keychain._())\n        util.certificateForKey(key, privateKey, (err, certificate) => {\n          if (err) return callback(err)\n\n          // create a p7 enveloped message\n          const p7 = forge.pkcs7.createEnvelopedData()\n          p7.addRecipient(certificate)\n          p7.content = forge.util.createBuffer(plain)\n          p7.encrypt()\n\n          // convert message to DER\n          const der = forge.asn1.toDer(p7.toAsn1()).getBytes()\n          done(null, Buffer.from(der, 'binary'))\n        })\n      } catch (err) {\n        done(err)\n      }\n    })\n  }\n\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Buffer} cmsData - The CMS encrypted data to decrypt.\n   * @param {function(Error, Buffer)} callback\n   * @returns {undefined}\n   */\n  decrypt (cmsData, callback) {\n    const done = (err, result) => setImmediate(() => callback(err, result))\n\n    if (!Buffer.isBuffer(cmsData)) {\n      return done(errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS'))\n    }\n\n    const self = this\n    let cms\n    try {\n      const buf = forge.util.createBuffer(cmsData.toString('binary'))\n      const obj = forge.asn1.fromDer(buf)\n      cms = forge.pkcs7.messageFromAsn1(obj)\n    } catch (err) {\n      return done(errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS'))\n    }\n\n    // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n    const recipients = cms.recipients\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n      .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n      .map(r => {\n        return {\n          recipient: r,\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        }\n      })\n    detect(\n      recipients,\n      (r, cb) => self.keychain.findKeyById(r.keyId, (err, info) => cb(null, !err && info)),\n      (err, r) => {\n        if (err) return done(err)\n        if (!r) {\n          const missingKeys = recipients.map(r => r.keyId)\n          err = errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n            missingKeys\n          })\n          return done(err)\n        }\n\n        waterfall([\n          (cb) => self.keychain.findKeyById(r.keyId, cb),\n          (key, cb) => self.keychain._getPrivateKey(key.name, cb)\n        ], (err, pem) => {\n          if (err) return done(err)\n\n          const privateKey = forge.pki.decryptRsaPrivateKey(pem, self.keychain._())\n          cms.decrypt(r.recipient, privateKey)\n          done(null, Buffer.from(cms.content.getBytes(), 'binary'))\n        })\n      }\n    )\n  }\n}\n\nmodule.exports = CMS\n"]},"metadata":{},"sourceType":"script"}