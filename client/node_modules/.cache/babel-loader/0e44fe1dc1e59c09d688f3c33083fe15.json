{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar distance = require('xor-distance');\n\nvar utils = require('./utils');\n\nvar map = require('async/map');\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nvar PeerDistanceList = /*#__PURE__*/function () {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Buffer} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  function PeerDistanceList(originDhtKey, capacity) {\n    _classCallCheck(this, PeerDistanceList);\n\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  _createClass(PeerDistanceList, [{\n    key: \"length\",\n    get: function get() {\n      return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n\n  }, {\n    key: \"peers\",\n    get: function get() {\n      return this.peerDistances.map(function (pd) {\n        return pd.peerId;\n      });\n    }\n    /**\n     * Add a peerId to the list.\n     *\n     * @param {PeerId} peerId\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(peerId, callback) {\n      var _this = this;\n\n      if (this.peerDistances.find(function (pd) {\n        return pd.peerId.id.equals(peerId.id);\n      })) {\n        return callback();\n      }\n\n      utils.convertPeerId(peerId, function (err, dhtKey) {\n        if (err) {\n          return callback(err);\n        }\n\n        var el = {\n          peerId: peerId,\n          distance: distance(_this.originDhtKey, dhtKey)\n        };\n\n        _this.peerDistances.push(el);\n\n        _this.peerDistances.sort(function (a, b) {\n          return distance.compare(a.distance, b.distance);\n        });\n\n        _this.peerDistances = _this.peerDistances.slice(0, _this.capacity);\n        callback();\n      });\n    }\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     *\n     * @param {Array<PeerId>} peerIds\n     * @param {function(Error, Boolean)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"anyCloser\",\n    value: function anyCloser(peerIds, callback) {\n      var _this2 = this;\n\n      if (!peerIds.length) {\n        return callback(null, false);\n      }\n\n      if (!this.length) {\n        return callback(null, true);\n      }\n\n      map(peerIds, function (peerId, cb) {\n        return utils.convertPeerId(peerId, cb);\n      }, function (err, dhtKeys) {\n        if (err) {\n          return callback(err);\n        }\n\n        var furthestDistance = _this2.peerDistances[_this2.peerDistances.length - 1].distance;\n\n        var _iterator = _createForOfIteratorHelper(dhtKeys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var dhtKey = _step.value;\n            var keyDistance = distance(_this2.originDhtKey, dhtKey);\n\n            if (distance.compare(keyDistance, furthestDistance) < 0) {\n              return callback(null, true);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return callback(null, false);\n      });\n    }\n  }]);\n\n  return PeerDistanceList;\n}();\n\nmodule.exports = PeerDistanceList;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/libp2p-kad-dht/src/peer-distance-list.js"],"names":["distance","require","utils","map","PeerDistanceList","originDhtKey","capacity","peerDistances","length","pd","peerId","callback","find","id","equals","convertPeerId","err","dhtKey","el","push","sort","a","b","compare","slice","peerIds","cb","dhtKeys","furthestDistance","keyDistance","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst distance = require('xor-distance')\nconst utils = require('./utils')\nconst map = require('async/map')\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Buffer} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor (originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n  get peers () {\n    return this.peerDistances.map(pd => pd.peerId)\n  }\n\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  add (peerId, callback) {\n    if (this.peerDistances.find(pd => pd.peerId.id.equals(peerId.id))) {\n      return callback()\n    }\n\n    utils.convertPeerId(peerId, (err, dhtKey) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const el = {\n        peerId,\n        distance: distance(this.originDhtKey, dhtKey)\n      }\n\n      this.peerDistances.push(el)\n      this.peerDistances.sort((a, b) => distance.compare(a.distance, b.distance))\n      this.peerDistances = this.peerDistances.slice(0, this.capacity)\n\n      callback()\n    })\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {Array<PeerId>} peerIds\n   * @param {function(Error, Boolean)} callback\n   * @returns {void}\n   */\n  anyCloser (peerIds, callback) {\n    if (!peerIds.length) {\n      return callback(null, false)\n    }\n\n    if (!this.length) {\n      return callback(null, true)\n    }\n\n    map(peerIds, (peerId, cb) => utils.convertPeerId(peerId, cb), (err, dhtKeys) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n      for (const dhtKey of dhtKeys) {\n        const keyDistance = distance(this.originDhtKey, dhtKey)\n        if (distance.compare(keyDistance, furthestDistance) < 0) {\n          return callback(null, true)\n        }\n      }\n      return callback(null, false)\n    })\n  }\n}\n\nmodule.exports = PeerDistanceList\n"]},"metadata":{},"sourceType":"script"}