{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar lp = require('pull-length-prefixed');\n\nvar Pushable = require('pull-pushable');\n\nvar pull = require('pull-stream');\n\nvar setImmediate = require('async/setImmediate');\n\nvar EventEmitter = require('events');\n\nvar _require = require('./message'),\n    RPC = _require.RPC;\n/**\n * The known state of a connected peer.\n */\n\n\nvar Peer = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Peer, _EventEmitter);\n\n  var _super = _createSuper(Peer);\n\n  /**\n   * @param {PeerInfo} info\n   */\n  function Peer(info) {\n    var _this;\n\n    _classCallCheck(this, Peer);\n\n    _this = _super.call(this);\n    /**\n     * @type {PeerInfo}\n     */\n\n    _this.info = info;\n    /**\n     * @type {Connection}\n     */\n\n    _this.conn = null;\n    /**\n     * @type {Set}\n     */\n\n    _this.topics = new Set();\n    /**\n     * @type {Pushable}\n     */\n\n    _this.stream = null;\n    _this._references = 0;\n    return _this;\n  }\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n\n\n  _createClass(Peer, [{\n    key: \"isConnected\",\n    get: function get() {\n      return Boolean(this.conn);\n    }\n    /**\n     * Do we have a connection to write on?\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isWritable\",\n    get: function get() {\n      return Boolean(this.stream);\n    }\n    /**\n     * Send a message to this peer.\n     * Throws if there is no `stream` to write to available.\n     *\n     * @param {Buffer} msg\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg) {\n      if (!this.isWritable) {\n        var id = this.info.id.toB58String();\n        throw new Error('No writable connection to ' + id);\n      }\n\n      this.stream.push(msg);\n    }\n    /**\n     * Attach the peer to a connection and setup a write stream\n     *\n     * @param {Connection} conn\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"attachConnection\",\n    value: function attachConnection(conn) {\n      var _this2 = this;\n\n      this.conn = conn;\n      this.stream = new Pushable();\n      pull(this.stream, lp.encode(), conn, pull.onEnd(function () {\n        _this2.conn = null;\n        _this2.stream = null;\n\n        _this2.emit('close');\n      }));\n      this.emit('connection');\n    }\n  }, {\n    key: \"_sendRawSubscriptions\",\n    value: function _sendRawSubscriptions(topics, subscribe) {\n      if (topics.size === 0) {\n        return;\n      }\n\n      var subs = [];\n      topics.forEach(function (topic) {\n        subs.push({\n          subscribe: subscribe,\n          topicID: topic\n        });\n      });\n      this.write(RPC.encode({\n        subscriptions: subs\n      }));\n    }\n    /**\n     * Send the given subscriptions to this peer.\n     * @param {Set|Array} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendSubscriptions\",\n    value: function sendSubscriptions(topics) {\n      this._sendRawSubscriptions(topics, true);\n    }\n    /**\n     * Send the given unsubscriptions to this peer.\n     * @param {Set|Array} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendUnsubscriptions\",\n    value: function sendUnsubscriptions(topics) {\n      this._sendRawSubscriptions(topics, false);\n    }\n    /**\n     * Send messages to this peer.\n     *\n     * @param {Array<any>} msgs\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendMessages\",\n    value: function sendMessages(msgs) {\n      this.write(RPC.encode({\n        msgs: msgs\n      }));\n    }\n    /**\n     * Bulk process subscription updates.\n     *\n     * @param {Array} changes\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"updateSubscriptions\",\n    value: function updateSubscriptions(changes) {\n      var _this3 = this;\n\n      changes.forEach(function (subopt) {\n        if (subopt.subscribe) {\n          _this3.topics.add(subopt.topicID);\n        } else {\n          _this3.topics.delete(subopt.topicID);\n        }\n      });\n    }\n    /**\n     * Closes the open connection to peer\n     *\n     * @param {Function} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this4 = this;\n\n      // Force removal of peer\n      this._references = 1; // End the pushable\n\n      if (this.stream) {\n        this.stream.end();\n      }\n\n      setImmediate(function () {\n        _this4.conn = null;\n        _this4.stream = null;\n\n        _this4.emit('close');\n\n        callback();\n      });\n    }\n  }]);\n\n  return Peer;\n}(EventEmitter);\n\nmodule.exports = Peer;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/libp2p-pubsub/src/peer.js"],"names":["lp","require","Pushable","pull","setImmediate","EventEmitter","RPC","Peer","info","conn","topics","Set","stream","_references","Boolean","msg","isWritable","id","toB58String","Error","push","encode","onEnd","emit","subscribe","size","subs","forEach","topic","topicID","write","subscriptions","_sendRawSubscriptions","msgs","changes","subopt","add","delete","callback","end","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst lp = require('pull-length-prefixed')\nconst Pushable = require('pull-pushable')\nconst pull = require('pull-stream')\nconst setImmediate = require('async/setImmediate')\nconst EventEmitter = require('events')\n\nconst { RPC } = require('./message')\n\n/**\n * The known state of a connected peer.\n */\nclass Peer extends EventEmitter {\n  /**\n   * @param {PeerInfo} info\n   */\n  constructor (info) {\n    super()\n\n    /**\n     * @type {PeerInfo}\n     */\n    this.info = info\n    /**\n     * @type {Connection}\n     */\n    this.conn = null\n    /**\n     * @type {Set}\n     */\n    this.topics = new Set()\n    /**\n     * @type {Pushable}\n     */\n    this.stream = null\n\n    this._references = 0\n  }\n\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n  get isConnected () {\n    return Boolean(this.conn)\n  }\n\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n  get isWritable () {\n    return Boolean(this.stream)\n  }\n\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Buffer} msg\n   * @returns {undefined}\n   */\n  write (msg) {\n    if (!this.isWritable) {\n      const id = this.info.id.toB58String()\n      throw new Error('No writable connection to ' + id)\n    }\n\n    this.stream.push(msg)\n  }\n\n  /**\n   * Attach the peer to a connection and setup a write stream\n   *\n   * @param {Connection} conn\n   * @returns {undefined}\n   */\n  attachConnection (conn) {\n    this.conn = conn\n    this.stream = new Pushable()\n\n    pull(\n      this.stream,\n      lp.encode(),\n      conn,\n      pull.onEnd(() => {\n        this.conn = null\n        this.stream = null\n        this.emit('close')\n      })\n    )\n\n    this.emit('connection')\n  }\n\n  _sendRawSubscriptions (topics, subscribe) {\n    if (topics.size === 0) {\n      return\n    }\n\n    const subs = []\n    topics.forEach((topic) => {\n      subs.push({\n        subscribe: subscribe,\n        topicID: topic\n      })\n    })\n\n    this.write(RPC.encode({\n      subscriptions: subs\n    }))\n  }\n\n  /**\n   * Send the given subscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n  sendSubscriptions (topics) {\n    this._sendRawSubscriptions(topics, true)\n  }\n\n  /**\n   * Send the given unsubscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n  sendUnsubscriptions (topics) {\n    this._sendRawSubscriptions(topics, false)\n  }\n\n  /**\n   * Send messages to this peer.\n   *\n   * @param {Array<any>} msgs\n   * @returns {undefined}\n   */\n  sendMessages (msgs) {\n    this.write(RPC.encode({\n      msgs: msgs\n    }))\n  }\n\n  /**\n   * Bulk process subscription updates.\n   *\n   * @param {Array} changes\n   * @returns {undefined}\n   */\n  updateSubscriptions (changes) {\n    changes.forEach((subopt) => {\n      if (subopt.subscribe) {\n        this.topics.add(subopt.topicID)\n      } else {\n        this.topics.delete(subopt.topicID)\n      }\n    })\n  }\n\n  /**\n   * Closes the open connection to peer\n   *\n   * @param {Function} callback\n   * @returns {undefined}\n   */\n  close (callback) {\n    // Force removal of peer\n    this._references = 1\n\n    // End the pushable\n    if (this.stream) {\n      this.stream.end()\n    }\n\n    setImmediate(() => {\n      this.conn = null\n      this.stream = null\n      this.emit('close')\n      callback()\n    })\n  }\n}\n\nmodule.exports = Peer\n"]},"metadata":{},"sourceType":"script"}