{"ast":null,"code":"'use strict';\n\nvar Block = require('ipfs-block');\n\nvar multihashing = require('multihashing-async');\n\nvar CID = require('cids');\n\nvar waterfall = require('async/waterfall');\n\nvar setImmediate = require('async/setImmediate');\n\nvar promisify = require('promisify-es6');\n\nvar errCode = require('err-code');\n\nmodule.exports = function block(self) {\n  return {\n    get: promisify(function (cid, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n\n      try {\n        cid = cleanCid(cid);\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(errCode(err, 'ERR_INVALID_CID'));\n        });\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid);\n      }\n\n      self._blockService.get(cid, callback);\n    }),\n    put: promisify(function (block, options, callback) {\n      callback = callback || function noop() {};\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n\n      if (Array.isArray(block)) {\n        return callback(new Error('Array is not supported'));\n      }\n\n      waterfall([function (cb) {\n        if (Block.isBlock(block)) {\n          return cb(null, block);\n        }\n\n        if (options.cid && CID.isCID(options.cid)) {\n          return cb(null, new Block(block, options.cid));\n        }\n\n        var mhtype = options.mhtype || 'sha2-256';\n        var format = options.format || 'dag-pb';\n        var cidVersion; // const mhlen = options.mhlen || 0\n\n        if (options.version == null) {\n          // Pick appropriate CID version\n          cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1;\n        } else {\n          cidVersion = options.version;\n        }\n\n        multihashing(block, mhtype, function (err, multihash) {\n          if (err) {\n            return cb(err);\n          }\n\n          var cid;\n\n          try {\n            cid = new CID(cidVersion, format, multihash);\n          } catch (err) {\n            return cb(err);\n          }\n\n          cb(null, new Block(block, cid));\n        });\n      }, function (block, cb) {\n        return self._blockService.put(block, function (err) {\n          if (err) {\n            return cb(err);\n          }\n\n          if (options.preload !== false) {\n            self._preload(block.cid);\n          }\n\n          cb(null, block);\n        });\n      }], callback);\n    }),\n    rm: promisify(function (cid, callback) {\n      try {\n        cid = cleanCid(cid);\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(errCode(err, 'ERR_INVALID_CID'));\n        });\n      }\n\n      self._blockService.delete(cid, callback);\n    }),\n    stat: promisify(function (cid, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n\n      try {\n        cid = cleanCid(cid);\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(errCode(err, 'ERR_INVALID_CID'));\n        });\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid);\n      }\n\n      self._blockService.get(cid, function (err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, {\n          key: cid.toString(),\n          size: block.data.length\n        });\n      });\n    })\n  };\n};\n\nfunction cleanCid(cid) {\n  if (CID.isCID(cid)) {\n    return cid;\n  } // CID constructor knows how to do the cleaning :)\n\n\n  return new CID(cid);\n}","map":{"version":3,"sources":["D:/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/block.js"],"names":["Block","require","multihashing","CID","waterfall","setImmediate","promisify","errCode","module","exports","block","self","get","cid","options","callback","cleanCid","err","preload","_preload","_blockService","put","noop","Array","isArray","Error","cb","isBlock","isCID","mhtype","format","cidVersion","version","multihash","rm","delete","stat","key","toString","size","data","length"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMI,YAAY,GAAGJ,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAMK,SAAS,GAAGL,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMM,OAAO,GAAGN,OAAO,CAAC,UAAD,CAAvB;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAgBC,IAAhB,EAAsB;AACrC,SAAO;AACLC,IAAAA,GAAG,EAAEN,SAAS,CAAC,UAACO,GAAD,EAAMC,OAAN,EAAeC,QAAf,EAA4B;AACzC,UAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,QAAAA,QAAQ,GAAGD,OAAX;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAI;AACFD,QAAAA,GAAG,GAAGG,QAAQ,CAACH,GAAD,CAAd;AACD,OAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,eAAOZ,YAAY,CAAC;AAAA,iBAAMU,QAAQ,CAACR,OAAO,CAACU,GAAD,EAAM,iBAAN,CAAR,CAAd;AAAA,SAAD,CAAnB;AACD;;AAED,UAAIH,OAAO,CAACI,OAAR,KAAoB,KAAxB,EAA+B;AAC7BP,QAAAA,IAAI,CAACQ,QAAL,CAAcN,GAAd;AACD;;AAEDF,MAAAA,IAAI,CAACS,aAAL,CAAmBR,GAAnB,CAAuBC,GAAvB,EAA4BE,QAA5B;AACD,KAnBa,CADT;AAqBLM,IAAAA,GAAG,EAAEf,SAAS,CAAC,UAACI,KAAD,EAAQI,OAAR,EAAiBC,QAAjB,EAA8B;AAC3CA,MAAAA,QAAQ,GAAGA,QAAQ,IAAI,SAASO,IAAT,GAAiB,CAAE,CAA1C;;AAEA,UAAI,OAAOR,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,QAAAA,QAAQ,GAAGD,OAAX;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAIS,KAAK,CAACC,OAAN,CAAcd,KAAd,CAAJ,EAA0B;AACxB,eAAOK,QAAQ,CAAC,IAAIU,KAAJ,CAAU,wBAAV,CAAD,CAAf;AACD;;AAEDrB,MAAAA,SAAS,CAAC,CACR,UAACsB,EAAD,EAAQ;AACN,YAAI1B,KAAK,CAAC2B,OAAN,CAAcjB,KAAd,CAAJ,EAA0B;AACxB,iBAAOgB,EAAE,CAAC,IAAD,EAAOhB,KAAP,CAAT;AACD;;AAED,YAAII,OAAO,CAACD,GAAR,IAAeV,GAAG,CAACyB,KAAJ,CAAUd,OAAO,CAACD,GAAlB,CAAnB,EAA2C;AACzC,iBAAOa,EAAE,CAAC,IAAD,EAAO,IAAI1B,KAAJ,CAAUU,KAAV,EAAiBI,OAAO,CAACD,GAAzB,CAAP,CAAT;AACD;;AAED,YAAMgB,MAAM,GAAGf,OAAO,CAACe,MAAR,IAAkB,UAAjC;AACA,YAAMC,MAAM,GAAGhB,OAAO,CAACgB,MAAR,IAAkB,QAAjC;AACA,YAAIC,UAAJ,CAXM,CAYN;;AAEA,YAAIjB,OAAO,CAACkB,OAAR,IAAmB,IAAvB,EAA6B;AAC3B;AACAD,UAAAA,UAAU,GAAGF,MAAM,KAAK,UAAX,IAAyBC,MAAM,KAAK,QAApC,GAA+C,CAA/C,GAAmD,CAAhE;AACD,SAHD,MAGO;AACLC,UAAAA,UAAU,GAAGjB,OAAO,CAACkB,OAArB;AACD;;AAED9B,QAAAA,YAAY,CAACQ,KAAD,EAAQmB,MAAR,EAAgB,UAACZ,GAAD,EAAMgB,SAAN,EAAoB;AAC9C,cAAIhB,GAAJ,EAAS;AACP,mBAAOS,EAAE,CAACT,GAAD,CAAT;AACD;;AAED,cAAIJ,GAAJ;;AACA,cAAI;AACFA,YAAAA,GAAG,GAAG,IAAIV,GAAJ,CAAQ4B,UAAR,EAAoBD,MAApB,EAA4BG,SAA5B,CAAN;AACD,WAFD,CAEE,OAAOhB,GAAP,EAAY;AACZ,mBAAOS,EAAE,CAACT,GAAD,CAAT;AACD;;AAEDS,UAAAA,EAAE,CAAC,IAAD,EAAO,IAAI1B,KAAJ,CAAUU,KAAV,EAAiBG,GAAjB,CAAP,CAAF;AACD,SAbW,CAAZ;AAcD,OApCO,EAqCR,UAACH,KAAD,EAAQgB,EAAR;AAAA,eAAef,IAAI,CAACS,aAAL,CAAmBC,GAAnB,CAAuBX,KAAvB,EAA8B,UAACO,GAAD,EAAS;AACpD,cAAIA,GAAJ,EAAS;AACP,mBAAOS,EAAE,CAACT,GAAD,CAAT;AACD;;AAED,cAAIH,OAAO,CAACI,OAAR,KAAoB,KAAxB,EAA+B;AAC7BP,YAAAA,IAAI,CAACQ,QAAL,CAAcT,KAAK,CAACG,GAApB;AACD;;AAEDa,UAAAA,EAAE,CAAC,IAAD,EAAOhB,KAAP,CAAF;AACD,SAVc,CAAf;AAAA,OArCQ,CAAD,EAgDNK,QAhDM,CAAT;AAiDD,KA/Da,CArBT;AAqFLmB,IAAAA,EAAE,EAAE5B,SAAS,CAAC,UAACO,GAAD,EAAME,QAAN,EAAmB;AAC/B,UAAI;AACFF,QAAAA,GAAG,GAAGG,QAAQ,CAACH,GAAD,CAAd;AACD,OAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,eAAOZ,YAAY,CAAC;AAAA,iBAAMU,QAAQ,CAACR,OAAO,CAACU,GAAD,EAAM,iBAAN,CAAR,CAAd;AAAA,SAAD,CAAnB;AACD;;AACDN,MAAAA,IAAI,CAACS,aAAL,CAAmBe,MAAnB,CAA0BtB,GAA1B,EAA+BE,QAA/B;AACD,KAPY,CArFR;AA6FLqB,IAAAA,IAAI,EAAE9B,SAAS,CAAC,UAACO,GAAD,EAAMC,OAAN,EAAeC,QAAf,EAA4B;AAC1C,UAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,QAAAA,QAAQ,GAAGD,OAAX;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAI;AACFD,QAAAA,GAAG,GAAGG,QAAQ,CAACH,GAAD,CAAd;AACD,OAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,eAAOZ,YAAY,CAAC;AAAA,iBAAMU,QAAQ,CAACR,OAAO,CAACU,GAAD,EAAM,iBAAN,CAAR,CAAd;AAAA,SAAD,CAAnB;AACD;;AAED,UAAIH,OAAO,CAACI,OAAR,KAAoB,KAAxB,EAA+B;AAC7BP,QAAAA,IAAI,CAACQ,QAAL,CAAcN,GAAd;AACD;;AAEDF,MAAAA,IAAI,CAACS,aAAL,CAAmBR,GAAnB,CAAuBC,GAAvB,EAA4B,UAACI,GAAD,EAAMP,KAAN,EAAgB;AAC1C,YAAIO,GAAJ,EAAS;AACP,iBAAOF,QAAQ,CAACE,GAAD,CAAf;AACD;;AACDF,QAAAA,QAAQ,CAAC,IAAD,EAAO;AACbsB,UAAAA,GAAG,EAAExB,GAAG,CAACyB,QAAJ,EADQ;AAEbC,UAAAA,IAAI,EAAE7B,KAAK,CAAC8B,IAAN,CAAWC;AAFJ,SAAP,CAAR;AAID,OARD;AASD,KA3Bc;AA7FV,GAAP;AA0HD,CA3HD;;AA6HA,SAASzB,QAAT,CAAmBH,GAAnB,EAAwB;AACtB,MAAIV,GAAG,CAACyB,KAAJ,CAAUf,GAAV,CAAJ,EAAoB;AAClB,WAAOA,GAAP;AACD,GAHqB,CAKtB;;;AACA,SAAO,IAAIV,GAAJ,CAAQU,GAAR,CAAP;AACD","sourcesContent":["'use strict'\n\nconst Block = require('ipfs-block')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst waterfall = require('async/waterfall')\nconst setImmediate = require('async/setImmediate')\nconst promisify = require('promisify-es6')\nconst errCode = require('err-code')\n\nmodule.exports = function block (self) {\n  return {\n    get: promisify((cid, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      try {\n        cid = cleanCid(cid)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      self._blockService.get(cid, callback)\n    }),\n    put: promisify((block, options, callback) => {\n      callback = callback || function noop () {}\n\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      if (Array.isArray(block)) {\n        return callback(new Error('Array is not supported'))\n      }\n\n      waterfall([\n        (cb) => {\n          if (Block.isBlock(block)) {\n            return cb(null, block)\n          }\n\n          if (options.cid && CID.isCID(options.cid)) {\n            return cb(null, new Block(block, options.cid))\n          }\n\n          const mhtype = options.mhtype || 'sha2-256'\n          const format = options.format || 'dag-pb'\n          let cidVersion\n          // const mhlen = options.mhlen || 0\n\n          if (options.version == null) {\n            // Pick appropriate CID version\n            cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1\n          } else {\n            cidVersion = options.version\n          }\n\n          multihashing(block, mhtype, (err, multihash) => {\n            if (err) {\n              return cb(err)\n            }\n\n            let cid\n            try {\n              cid = new CID(cidVersion, format, multihash)\n            } catch (err) {\n              return cb(err)\n            }\n\n            cb(null, new Block(block, cid))\n          })\n        },\n        (block, cb) => self._blockService.put(block, (err) => {\n          if (err) {\n            return cb(err)\n          }\n\n          if (options.preload !== false) {\n            self._preload(block.cid)\n          }\n\n          cb(null, block)\n        })\n      ], callback)\n    }),\n    rm: promisify((cid, callback) => {\n      try {\n        cid = cleanCid(cid)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n      self._blockService.delete(cid, callback)\n    }),\n    stat: promisify((cid, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      try {\n        cid = cleanCid(cid)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      self._blockService.get(cid, (err, block) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, {\n          key: cid.toString(),\n          size: block.data.length\n        })\n      })\n    })\n  }\n}\n\nfunction cleanCid (cid) {\n  if (CID.isCID(cid)) {\n    return cid\n  }\n\n  // CID constructor knows how to do the cleaning :)\n  return new CID(cid)\n}\n"]},"metadata":{},"sourceType":"script"}