{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar pull = require('pull-stream/pull');\n\nvar empty = require('pull-stream/sources/empty');\n\nvar handshake = require('pull-handshake');\n\nvar constants = require('./constants');\n\nvar util = require('./util');\n\nvar rnd = util.rnd;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\nvar PROTOCOL = constants.PROTOCOL;\nvar PING_LENGTH = constants.PING_LENGTH;\n\nvar Ping = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Ping, _EventEmitter);\n\n  var _super = _createSuper(Ping);\n\n  function Ping(swarm, peer) {\n    var _this;\n\n    _classCallCheck(this, Ping);\n\n    _this = _super.call(this);\n    _this._stopped = false;\n    _this.peer = peer;\n    _this.swarm = swarm;\n    return _this;\n  }\n\n  _createClass(Ping, [{\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      log('dialing %s to %s', PROTOCOL, this.peer.id.toB58String());\n      this.swarm.dial(this.peer, PROTOCOL, function (err, conn) {\n        if (err) {\n          return _this2.emit('error', err);\n        }\n\n        var stream = handshake({\n          timeout: 0\n        });\n        _this2.shake = stream.handshake;\n        pull(stream, conn, stream); // write and wait to see ping back\n\n        var self = _this2;\n\n        function next() {\n          var start = new Date();\n          var buf = rnd(PING_LENGTH);\n          self.shake.write(buf);\n          self.shake.read(PING_LENGTH, function (err, bufBack) {\n            var end = new Date();\n\n            if (err || !buf.equals(bufBack)) {\n              var _err = new Error('Received wrong ping ack');\n\n              return self.emit('error', _err);\n            }\n\n            self.emit('ping', end - start);\n\n            if (self._stopped) {\n              return;\n            }\n\n            next();\n          });\n        }\n\n        next();\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._stopped || !this.shake) {\n        return;\n      }\n\n      this._stopped = true;\n      pull(empty(), this.shake.rest());\n    }\n  }]);\n\n  return Ping;\n}(EventEmitter);\n\nmodule.exports = Ping;","map":{"version":3,"sources":["C:/Users/dd/Desktop/Project SSI/Major Project/client/node_modules/libp2p-ping/src/ping.js"],"names":["EventEmitter","require","pull","empty","handshake","constants","util","rnd","debug","log","error","PROTOCOL","PING_LENGTH","Ping","swarm","peer","_stopped","id","toB58String","dial","err","conn","emit","stream","timeout","shake","self","next","start","Date","buf","write","read","bufBack","end","equals","Error","rest","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;AACA,IAAME,IAAI,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,2BAAD,CAArB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMM,GAAG,GAAGD,IAAI,CAACC,GAAjB;;AACA,IAAMC,KAAK,GAAGP,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMQ,GAAG,GAAGD,KAAK,CAAC,aAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,mBAAD,CAAjB;AAEA,IAAMG,QAAQ,GAAGN,SAAS,CAACM,QAA3B;AACA,IAAMC,WAAW,GAAGP,SAAS,CAACO,WAA9B;;IAEMC,I;;;;;AACJ,gBAAaC,KAAb,EAAoBC,IAApB,EAA0B;AAAA;;AAAA;;AACxB;AAEA,UAAKC,QAAL,GAAgB,KAAhB;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKD,KAAL,GAAaA,KAAb;AALwB;AAMzB;;;;WAED,iBAAS;AAAA;;AACPL,MAAAA,GAAG,CAAC,kBAAD,EAAqBE,QAArB,EAA+B,KAAKI,IAAL,CAAUE,EAAV,CAAaC,WAAb,EAA/B,CAAH;AAEA,WAAKJ,KAAL,CAAWK,IAAX,CAAgB,KAAKJ,IAArB,EAA2BJ,QAA3B,EAAqC,UAACS,GAAD,EAAMC,IAAN,EAAe;AAClD,YAAID,GAAJ,EAAS;AACP,iBAAO,MAAI,CAACE,IAAL,CAAU,OAAV,EAAmBF,GAAnB,CAAP;AACD;;AAED,YAAMG,MAAM,GAAGnB,SAAS,CAAC;AAAEoB,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAxB;AACA,QAAA,MAAI,CAACC,KAAL,GAAaF,MAAM,CAACnB,SAApB;AAEAF,QAAAA,IAAI,CACFqB,MADE,EAEFF,IAFE,EAGFE,MAHE,CAAJ,CARkD,CAclD;;AACA,YAAMG,IAAI,GAAG,MAAb;;AACA,iBAASC,IAAT,GAAiB;AACf,cAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,cAAIC,GAAG,GAAGvB,GAAG,CAACK,WAAD,CAAb;AACAc,UAAAA,IAAI,CAACD,KAAL,CAAWM,KAAX,CAAiBD,GAAjB;AACAJ,UAAAA,IAAI,CAACD,KAAL,CAAWO,IAAX,CAAgBpB,WAAhB,EAA6B,UAACQ,GAAD,EAAMa,OAAN,EAAkB;AAC7C,gBAAIC,GAAG,GAAG,IAAIL,IAAJ,EAAV;;AACA,gBAAIT,GAAG,IAAI,CAACU,GAAG,CAACK,MAAJ,CAAWF,OAAX,CAAZ,EAAiC;AAC/B,kBAAMb,IAAG,GAAG,IAAIgB,KAAJ,CAAU,yBAAV,CAAZ;;AACA,qBAAOV,IAAI,CAACJ,IAAL,CAAU,OAAV,EAAmBF,IAAnB,CAAP;AACD;;AAEDM,YAAAA,IAAI,CAACJ,IAAL,CAAU,MAAV,EAAkBY,GAAG,GAAGN,KAAxB;;AAEA,gBAAIF,IAAI,CAACV,QAAT,EAAmB;AACjB;AACD;;AACDW,YAAAA,IAAI;AACL,WAbD;AAcD;;AAEDA,QAAAA,IAAI;AACL,OArCD;AAsCD;;;WAED,gBAAQ;AACN,UAAI,KAAKX,QAAL,IAAiB,CAAC,KAAKS,KAA3B,EAAkC;AAChC;AACD;;AAED,WAAKT,QAAL,GAAgB,IAAhB;AAEAd,MAAAA,IAAI,CACFC,KAAK,EADH,EAEF,KAAKsB,KAAL,CAAWY,IAAX,EAFE,CAAJ;AAID;;;;EA/DgBrC,Y;;AAkEnBsC,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst pull = require('pull-stream/pull')\nconst empty = require('pull-stream/sources/empty')\nconst handshake = require('pull-handshake')\nconst constants = require('./constants')\nconst util = require('./util')\nconst rnd = util.rnd\nconst debug = require('debug')\nconst log = debug('libp2p-ping')\nlog.error = debug('libp2p-ping:error')\n\nconst PROTOCOL = constants.PROTOCOL\nconst PING_LENGTH = constants.PING_LENGTH\n\nclass Ping extends EventEmitter {\n  constructor (swarm, peer) {\n    super()\n\n    this._stopped = false\n    this.peer = peer\n    this.swarm = swarm\n  }\n\n  start () {\n    log('dialing %s to %s', PROTOCOL, this.peer.id.toB58String())\n\n    this.swarm.dial(this.peer, PROTOCOL, (err, conn) => {\n      if (err) {\n        return this.emit('error', err)\n      }\n\n      const stream = handshake({ timeout: 0 })\n      this.shake = stream.handshake\n\n      pull(\n        stream,\n        conn,\n        stream\n      )\n\n      // write and wait to see ping back\n      const self = this\n      function next () {\n        let start = new Date()\n        let buf = rnd(PING_LENGTH)\n        self.shake.write(buf)\n        self.shake.read(PING_LENGTH, (err, bufBack) => {\n          let end = new Date()\n          if (err || !buf.equals(bufBack)) {\n            const err = new Error('Received wrong ping ack')\n            return self.emit('error', err)\n          }\n\n          self.emit('ping', end - start)\n\n          if (self._stopped) {\n            return\n          }\n          next()\n        })\n      }\n\n      next()\n    })\n  }\n\n  stop () {\n    if (this._stopped || !this.shake) {\n      return\n    }\n\n    this._stopped = true\n\n    pull(\n      empty(),\n      this.shake.rest()\n    )\n  }\n}\n\nmodule.exports = Ping\n"]},"metadata":{},"sourceType":"script"}