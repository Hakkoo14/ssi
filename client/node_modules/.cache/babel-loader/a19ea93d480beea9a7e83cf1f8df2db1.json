{"ast":null,"code":"'use strict';\n\nvar debug = require('debug');\n\nvar errcode = require('err-code');\n\nvar promisify = require('promisify-es6');\n\nvar IpnsPubsubDatastore = require('../ipns/routing/pubsub-datastore');\n\nvar log = debug('ipfs:name-pubsub');\nlog.error = debug('ipfs:name-pubsub:error'); // Is pubsub enabled\n\nvar isNamePubsubEnabled = function isNamePubsubEnabled(node) {\n  try {\n    return Boolean(getPubsubRouting(node));\n  } catch (err) {\n    return false;\n  }\n}; // Get pubsub from IPNS routing\n\n\nvar getPubsubRouting = function getPubsubRouting(node) {\n  if (!node._ipns || !node._options.EXPERIMENTAL.ipnsPubsub) {\n    var errMsg = 'IPNS pubsub subsystem is not enabled';\n    throw errcode(errMsg, 'ERR_IPNS_PUBSUB_NOT_ENABLED');\n  } // Only one store and it is pubsub\n\n\n  if (IpnsPubsubDatastore.isIpnsPubsubDatastore(node._ipns.routing)) {\n    return node._ipns.routing;\n  } // Find in tiered\n\n\n  var pubsub = (node._ipns.routing.stores || []).find(function (s) {\n    return IpnsPubsubDatastore.isIpnsPubsubDatastore(s);\n  });\n\n  if (!pubsub) {\n    var _errMsg = 'IPNS pubsub datastore not found';\n    throw errcode(_errMsg, 'ERR_PUBSUB_DATASTORE_NOT_FOUND');\n  }\n\n  return pubsub;\n};\n\nmodule.exports = function namePubsub(self) {\n  return {\n    /**\n     * Query the state of IPNS pubsub.\n     *\n     * @returns {Promise|void}\n     */\n    state: promisify(function (callback) {\n      callback(null, {\n        enabled: isNamePubsubEnabled(self)\n      });\n    }),\n\n    /**\n     * Cancel a name subscription.\n     *\n     * @param {String} name subscription name.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    cancel: promisify(function (name, callback) {\n      var pubsub;\n\n      try {\n        pubsub = getPubsubRouting(self);\n      } catch (err) {\n        return callback(err);\n      }\n\n      pubsub.cancel(name, callback);\n    }),\n\n    /**\n     * Show current name subscriptions.\n     *\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    subs: promisify(function (callback) {\n      var pubsub;\n\n      try {\n        pubsub = getPubsubRouting(self);\n      } catch (err) {\n        return callback(err);\n      }\n\n      pubsub.getSubscriptions(callback);\n    })\n  };\n};","map":{"version":3,"sources":["C:/Users/gkhakurel/Downloads/Poject-main/Poject-main/client/node_modules/ipfs/src/core/components/name-pubsub.js"],"names":["debug","require","errcode","promisify","IpnsPubsubDatastore","log","error","isNamePubsubEnabled","node","Boolean","getPubsubRouting","err","_ipns","_options","EXPERIMENTAL","ipnsPubsub","errMsg","isIpnsPubsubDatastore","routing","pubsub","stores","find","s","module","exports","namePubsub","self","state","callback","enabled","cancel","name","subs","getSubscriptions"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst promisify = require('promisify-es6')\n\nconst IpnsPubsubDatastore = require('../ipns/routing/pubsub-datastore')\n\nconst log = debug('ipfs:name-pubsub')\nlog.error = debug('ipfs:name-pubsub:error')\n\n// Is pubsub enabled\nconst isNamePubsubEnabled = (node) => {\n  try {\n    return Boolean(getPubsubRouting(node))\n  } catch (err) {\n    return false\n  }\n}\n\n// Get pubsub from IPNS routing\nconst getPubsubRouting = (node) => {\n  if (!node._ipns || !node._options.EXPERIMENTAL.ipnsPubsub) {\n    const errMsg = 'IPNS pubsub subsystem is not enabled'\n\n    throw errcode(errMsg, 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (IpnsPubsubDatastore.isIpnsPubsubDatastore(node._ipns.routing)) {\n    return node._ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (node._ipns.routing.stores || []).find(s => IpnsPubsubDatastore.isIpnsPubsubDatastore(s))\n\n  if (!pubsub) {\n    const errMsg = 'IPNS pubsub datastore not found'\n\n    throw errcode(errMsg, 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n\nmodule.exports = function namePubsub (self) {\n  return {\n    /**\n     * Query the state of IPNS pubsub.\n     *\n     * @returns {Promise|void}\n     */\n    state: promisify((callback) => {\n      callback(null, {\n        enabled: isNamePubsubEnabled(self)\n      })\n    }),\n    /**\n     * Cancel a name subscription.\n     *\n     * @param {String} name subscription name.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    cancel: promisify((name, callback) => {\n      let pubsub\n      try {\n        pubsub = getPubsubRouting(self)\n      } catch (err) {\n        return callback(err)\n      }\n\n      pubsub.cancel(name, callback)\n    }),\n    /**\n     * Show current name subscriptions.\n     *\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    subs: promisify((callback) => {\n      let pubsub\n      try {\n        pubsub = getPubsubRouting(self)\n      } catch (err) {\n        return callback(err)\n      }\n\n      pubsub.getSubscriptions(callback)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}